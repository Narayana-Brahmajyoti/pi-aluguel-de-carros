{
	"info": {
		"_postman_id": "5c3e919c-a69c-4ad3-8e13-0ff711b95ae2",
		"name": "PI",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20400348",
		"_collection_link": "https://grey-robot-433565.postman.co/workspace/Projeto-Integrador~c14188df-11a7-48b8-87fc-db6defcef0f4/collection/20400348-5c3e919c-a69c-4ad3-8e13-0ff711b95ae2?action=share&creator=20400348&source=collection_link"
	},
	"item": [
		{
			"name": "/usuario",
			"item": [
				{
					"name": "Obter todos os usuários",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Solicitação POST bem-sucedida\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"var response_body = pm.response.json();\r",
									"pm.test(\"Validando se a resposta é json\", function(){\r",
									"    pm.response.to.be.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{servidor}}usuario",
							"host": [
								"{{servidor}}usuario"
							]
						}
					},
					"response": []
				},
				{
					"name": "Salvar usuário nara",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Solicitação POST bem-sucedida\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Location no header está presente\", function () {\r",
									"    pm.response.to.have.header(\"Location\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"nomeUsuario\": \"Narayana\",\r\n    \"sobrenomeUsuario\": \"Brahmajyoti\",\r\n    \"emailUsuario\": \"nara@email.com\",\r\n    \"senhaUsuario\": \"123456abc\",\r\n    \"permissao\": [\r\n        {\r\n        \"idFuncao\": 1\r\n        }\r\n    ]\r\n    \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{servidor}}usuario",
							"host": [
								"{{servidor}}usuario"
							]
						}
					},
					"response": []
				},
				{
					"name": "Salvar usuário ADMIN ja cadastrado",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Código de status 409\", function () {\r",
									"pm.collectionVariables.get(\"variable_key\");\r",
									"    pm.response.to.have.status(409);\r",
									"    pm.response.to.be.clientError\r",
									"});\r",
									"\r",
									"tests[\"Body is correct\"] = responseBody === \"E-mail já cadastrado\";\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"nomeUsuario\": \"Narayana\",\r\n    \"sobrenomeUsuario\": \"Brahmajyoti\",\r\n    \"emailUsuario\": \"nara@email.com\",\r\n    \"senhaUsuario\": \"123456abc\",\r\n    \"permissao\": [\r\n        {\r\n        \"idFuncao\": 1\r\n        }\r\n    ]\r\n    \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{servidor}}usuario",
							"host": [
								"{{servidor}}usuario"
							]
						}
					},
					"response": []
				},
				{
					"name": "Salvar usuário ADMIN campos em branco",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Código de status 403\", function () {\r",
									"pm.collectionVariables.get(\"variable_key\");\r",
									"    pm.response.to.have.status(403);\r",
									"    pm.response.to.be.forbidden\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"nomeUsuario\": \"Narayana\",\r\n    \"sobrenomeUsuario\": \"Brahmajyoti\",\r\n    \"emailUsuario\": \" \",\r\n    \"senhaUsuario\": \" \",\r\n    \"permissao\": [\r\n        {\r\n        \"idFuncao\": 1\r\n        }\r\n    ]\r\n    \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{servidor}}usuario",
							"host": [
								"{{servidor}}usuario"
							]
						}
					},
					"response": []
				},
				{
					"name": "Salvar usuário Padrão brahmajyoti",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Solicitação POST bem-sucedida\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Location no header está presente\", function () {\r",
									"    pm.response.to.have.header(\"Location\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"nomeUsuario\": \"Nara\",\r\n    \"sobrenomeUsuario\": \"Brahmajyoti\",\r\n    \"emailUsuario\": \"brahmajyoti@email.com\",\r\n    \"senhaUsuario\": \"123456abc\",\r\n    \"permissao\": [\r\n        {\r\n        \"idFuncao\": 0\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{servidor}}usuario",
							"host": [
								"{{servidor}}usuario"
							]
						}
					},
					"response": [
						{
							"name": "Salvar usuário Padrão brahmajyoti",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{   \r\n    \"nomeUsuario\": \"Nara\",\r\n    \"sobrenomeUsuario\": \"Brahmajyoti\",\r\n    \"emailUsuario\": \"brahmajyoti@email.com\",\r\n    \"senhaUsuario\": \"123456abc\",\r\n    \"permissao\": [\r\n        {\r\n        \"idFuncao\": 0\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{servidor}}usuario",
									"host": [
										"{{servidor}}usuario"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Location",
									"value": "http://localhost:8080/usuario/4"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "0"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Length",
									"value": "0"
								},
								{
									"key": "Date",
									"value": "Sun, 09 Apr 2023 18:17:48 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Alterar permissão de usuário para ADMIN",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Solicitação POST bem-sucedida\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Location no header está presente\", function () {\r",
									"    pm.response.to.have.header(\"Location\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 21,\r\n  \"emailUsuario\": \"narayana.16@hotmail.com\",\r\n  \"permissao\": [\r\n    {\r\n      \"idFuncao\": 1\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{servidor}}usuario/admin",
							"host": [
								"{{servidor}}usuario"
							],
							"path": [
								"admin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obter usuário por id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Solicitação POST bem-sucedida\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"var response_body = pm.response.json();\r",
									"pm.test(\"Validando se a resposta é json\", function(){\r",
									"    pm.response.to.be.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Validando se a nome usuario é a mesma esperada\", function(){\r",
									"    pm.expect(\"PadraoADMIN\").to.eql(response_body.nomeUsuario)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{servidor}}usuario/:id",
							"host": [
								"{{servidor}}usuario"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar usuário",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Solicitação POST bem-sucedida\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"pm.test(\"Successful Patch request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type está presente\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n    \"id\": 3,\n    \"nomeUsuario\": \"Teste Narayana\",\n    \"sobrenomeUsuario\": \"Teste Brahmajyoti\",\n    \"emailUsuario\": \"testeEditar@email.com\",\n    \"senhaUsuario\": \"Teste123456abc\",\n    \"permissao\": [\n        {\n        \"idFuncao\": 1\n        }\n    ]\n    \n}"
						},
						"url": {
							"raw": "{{servidor}}usuario",
							"host": [
								"{{servidor}}usuario"
							]
						}
					},
					"response": [
						{
							"name": "Editar usuário",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{tokenAdmin}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{tokenUser}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{   \n    \"id\": 3,\n    \"nomeUsuario\": \"Teste Narayana\",\n    \"sobrenomeUsuario\": \"Teste Brahmajyoti\",\n    \"emailUsuario\": \"testeEditar@email.com\",\n    \"senhaUsuario\": \"Teste123456abc\",\n    \"permissao\": [\n        {\n        \"idFuncao\": 1\n        }\n    ]\n    \n}"
								},
								"url": {
									"raw": "{{servidor}}usuario",
									"host": [
										"{{servidor}}usuario"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "0"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/hal+json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sun, 09 Apr 2023 18:17:56 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 3,\n    \"nomeUsuario\": \"Teste Narayana\",\n    \"sobrenomeUsuario\": \"Teste Brahmajyoti\",\n    \"emailUsuario\": \"testeEditar@email.com\",\n    \"_links\": {\n        \"self\": {\n            \"href\": \"http://localhost:8080/usuario/3\"\n        }\n    }\n}"
						}
					]
				},
				{
					"name": "Editar usuário já cadastrado",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content-Type está presente\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Código de status 409\", function () {\r",
									"pm.collectionVariables.get(\"variable_key\");\r",
									"    pm.response.to.have.status(409);\r",
									"    pm.response.to.be.clientError\r",
									"});\r",
									"\r",
									"tests[\"Body is correct\"] = responseBody === \"E-mail já cadastrado\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n    \"id\": 2,\n    \"nomeUsuario\": \"Teste Narayana\",\n    \"sobrenomeUsuario\": \"Teste Brahmajyoti\",\n    \"emailUsuario\": \"testeEditar@email.com\",\n    \"senhaUsuario\": \"Teste123456abc\",\n    \"permissao\": [\n        {\n        \"idFuncao\": 1\n        }\n    ]\n    \n}"
						},
						"url": {
							"raw": "{{servidor}}usuario",
							"host": [
								"{{servidor}}usuario"
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar usuário 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Solicitação POST bem-sucedida\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"pm.test(\"Successful Patch request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type está presente\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n    \"id\": 4,\n    \"nomeUsuario\": \"Narayana\",\n    \"sobrenomeUsuario\": \"Brahmajyoti\",\n    \"emailUsuario\": \"nara@email.com\",\n    \"senhaUsuario\": \"123456abc\",\n    \"permissao\": [\n        {\n        \"idFuncao\": 1\n        }\n    ]\n    \n}"
						},
						"url": {
							"raw": "{{servidor}}usuario",
							"host": [
								"{{servidor}}usuario"
							]
						}
					},
					"response": []
				},
				{
					"name": "Apagar reserva Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// pathVariableId = pm.variables.get(\"$endpointDeletarId\");\r",
									"// tests[\"Body is correct\"] = responseBody === \"Excluido produto de ID: pathVariableId\";\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{servidor}}usuario/:id",
							"host": [
								"{{servidor}}usuario"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Apagar reserva com ID inexistente Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status Not Found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.be.notFound;\r",
									"});\r",
									"\r",
									"tests[\"Body is correct\"] = responseBody === \"Produto não encontrado\";\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{servidor}}usuario/:id",
							"host": [
								"{{servidor}}usuario"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "10"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "/auth",
			"item": [
				{
					"name": "Autenticar usuário ADMIN nara",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response =  pm.response.json();\r",
									"pm.globals.set(\"tokenAdmin\", response.token)\r",
									"\r",
									"pm.test(\"Código de status 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Solicitação POST bem-sucedida\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followOriginalHttpMethod": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"emailUsuario\" : \"narayana.16@hotmail.com\",\r\n    \"senhaUsuario\" : \"123456789\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{servidor}}auth",
							"host": [
								"{{servidor}}auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Autenticar usuário ADMIN nara dados inavalidos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response =  pm.response.json();\r",
									"pm.globals.set(\"tokenAdmin\", response.token)\r",
									"\r",
									"pm.test(\"Código de status 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Solicitação POST bem-sucedida\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followOriginalHttpMethod": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"emailUsuario\" : \"nara@email.com\",\r\n    \"senhaUsuario\" : \"123456abc\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{servidor}}auth",
							"host": [
								"{{servidor}}auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Autenticar usuário ADMIN padraoadmin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response =  pm.response.json();\r",
									"pm.environment.set(\"tokenAdmin\", response.token)\r",
									"\r",
									"pm.test(\"Código de status 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Solicitação POST bem-sucedida\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followOriginalHttpMethod": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"emailUsuario\" : \"padraoadmin@CTD.com.br\",\r\n    \"senhaUsuario\" : \"12345678\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{servidor}}auth",
							"host": [
								"{{servidor}}auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Autenticar usuário Padrão",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response =  pm.response.json();\r",
									"pm.environment.set(\"tokenUser\", response.token)\r",
									"\r",
									"pm.test(\"Código de status 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Solicitação POST bem-sucedida\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followOriginalHttpMethod": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"emailUsuario\" : \"brahmajyoti@email.com\",\r\n    \"senhaUsuario\" : \"123456abc\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{servidor}}auth",
							"host": [
								"{{servidor}}auth"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "/caracteristica",
			"item": [
				{
					"name": "Obter todas as caracteristicas quando não existe nada salvo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.be.notFound;\r",
									"});\r",
									"\r",
									"pm.test(\"O tempo de resposta é inferior a 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validando se ha resposta \", function(){\r",
									"    pm.response.to.be.status(404);\r",
									"    pm.response.to.be.withBody;\r",
									"});\r",
									"\r",
									"tests[\"Body is correct\"] = responseBody === \"Nenhuma caracteristica cadastrada\";\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{servidor}}caracteristica",
							"host": [
								"{{servidor}}caracteristica"
							]
						}
					},
					"response": [
						{
							"name": "Obter todas as caracteristicas quando não existe nada salvo",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{servidor}}caracteristica",
									"host": [
										"{{servidor}}caracteristica"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 23 Mar 2023 15:09:17 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"headers\": {},\n    \"body\": [],\n    \"statusCodeValue\": 200,\n    \"statusCode\": \"OK\"\n}"
						}
					]
				},
				{
					"name": "Salvar caracteristica 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Solicitação POST bem-sucedida\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Location no header está presente\", function () {\r",
									"    pm.response.to.have.header(\"Location\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"nomeCaracteristica\": \"Caracteristica 1\",\r\n    \"iconeCaracteristica\": \"https://images.unsplash.com/photo-1536667842290-7602f6a43a2b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{servidor}}caracteristica",
							"host": [
								"{{servidor}}caracteristica"
							]
						}
					},
					"response": [
						{
							"name": "Salvar caracteristica 1",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{   \r\n    \"nomeCaracteristica\": \"Hatchs\",\r\n    \"iconeCaracteristica\": \"https://images.unsplash.com/photo-1536667842290-7602f6a43a2b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{servidor}}caracteristicas",
									"host": [
										"{{servidor}}caracteristicas"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/hal+json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sun, 12 Mar 2023 18:49:37 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"idCaracteristica\": 1,\n    \"nomeCaracteristica\": \"Hatchs\",\n    \"iconeCaracteristica\": \"https://images.unsplash.com/photo-1536667842290-7602f6a43a2b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\"\n}"
						}
					]
				},
				{
					"name": "Salvar caracteristica 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Solicitação POST bem-sucedida\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Location no header está presente\", function () {\r",
									"    pm.response.to.have.header(\"Location\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"nomeCaracteristica\": \"Caracteristica 2\",\r\n    \"iconeCaracteristica\": \"https://images.unsplash.com/photo-1536667842290-7602f6a43a2b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{servidor}}caracteristica",
							"host": [
								"{{servidor}}caracteristica"
							]
						}
					},
					"response": [
						{
							"name": "Salvar caracteristica 1",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{   \r\n    \"nomeCaracteristica\": \"Hatchs\",\r\n    \"iconeCaracteristica\": \"https://images.unsplash.com/photo-1536667842290-7602f6a43a2b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{servidor}}caracteristicas",
									"host": [
										"{{servidor}}caracteristicas"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/hal+json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sun, 12 Mar 2023 18:49:37 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"idCaracteristica\": 1,\n    \"nomeCaracteristica\": \"Hatchs\",\n    \"iconeCaracteristica\": \"https://images.unsplash.com/photo-1536667842290-7602f6a43a2b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\"\n}"
						}
					]
				},
				{
					"name": "Salvar característica 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Solicitação POST bem-sucedida\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Location no header está presente\", function () {\r",
									"    pm.response.to.have.header(\"Location\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"nomeCaracteristica\": \"Caracteristica 3\",\r\n    \"iconeCaracteristica\": \"https://images.unsplash.com/photo-1615063029891-497bebd4f03c?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1100&q=80\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{servidor}}caracteristica",
							"host": [
								"{{servidor}}caracteristica"
							]
						}
					},
					"response": [
						{
							"name": "Salvar categoria 3",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{   \r\n    \"nomeCaracteristica\": \"SUVs\",\r\n    \"iconeCaracteristica\": \"https://images.unsplash.com/photo-1615063029891-497bebd4f03c?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1100&q=80\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{servidor}}caracteristicas",
									"host": [
										"{{servidor}}caracteristicas"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/hal+json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sun, 12 Mar 2023 18:49:55 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"idCaracteristica\": 3,\n    \"nomeCaracteristica\": \"SUVs\",\n    \"iconeCaracteristica\": \"https://images.unsplash.com/photo-1615063029891-497bebd4f03c?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1100&q=80\"\n}"
						}
					]
				},
				{
					"name": "Salvar caracteristica 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Solicitação POST bem-sucedida\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Location no header está presente\", function () {\r",
									"    pm.response.to.have.header(\"Location\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"nomeCaracteristica\": \"Caracteristica 4\",\r\n    \"iconeCaracteristica\": \"https://images.unsplash.com/photo-1620071628712-379d473f2e0c?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=387&q=80\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{servidor}}caracteristica",
							"host": [
								"{{servidor}}caracteristica"
							]
						}
					},
					"response": [
						{
							"name": "Salvar caracteristica 4",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{   \r\n    \"nomeCaracteristica\": \"Picapes\",\r\n    \"iconeCaracteristica\": \"https://images.unsplash.com/photo-1620071628712-379d473f2e0c?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=387&q=80\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{servidor}}caracteristicas",
									"host": [
										"{{servidor}}caracteristicas"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/hal+json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sun, 12 Mar 2023 18:50:03 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"idCaracteristica\": 4,\n    \"nomeCaracteristica\": \"Picapes\",\n    \"iconeCaracteristica\": \"https://images.unsplash.com/photo-1620071628712-379d473f2e0c?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=387&q=80\"\n}"
						}
					]
				},
				{
					"name": "Salvar caracteristica 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Solicitação POST bem-sucedida\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Location no header está presente\", function () {\r",
									"    pm.response.to.have.header(\"Location\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"nomeCaracteristica\": \"Caracteristica 5\",\r\n    \"iconeCaracteristica\": \"https://images.unsplash.com/photo-1559416523-140ddc3d238c?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1151&q=80\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{servidor}}caracteristica",
							"host": [
								"{{servidor}}caracteristica"
							]
						}
					},
					"response": [
						{
							"name": "Salvar caracteristica 5",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{   \r\n    \"nomeCaracteristica\": \"Utilitário\",\r\n    \"iconeCaracteristica\": \"https://images.unsplash.com/photo-1559416523-140ddc3d238c?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1151&q=80\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{servidor}}caracteristicas",
									"host": [
										"{{servidor}}caracteristicas"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/hal+json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sun, 12 Mar 2023 18:50:10 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"idCaracteristica\": 5,\n    \"nomeCaracteristica\": \"Utilitário\",\n    \"iconeCaracteristica\": \"https://images.unsplash.com/photo-1559416523-140ddc3d238c?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1151&q=80\"\n}"
						}
					]
				},
				{
					"name": "Salvar caracteristica  ja existente case sensitive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status 409\", function () {\r",
									"pm.collectionVariables.get(\"variable_key\");\r",
									"    pm.response.to.have.status(409);\r",
									"    pm.response.to.be.clientError\r",
									"});\r",
									"\r",
									"tests[\"Body is correct\"] = responseBody === \"Caracteristica já cadastrada\";\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"nomeCaracteristica\": \"caracteristica 1\",\r\n    \"iconeCaracteristica\": \"https://images.unsplash.com/photo-1536667842290-7602f6a43a2b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{servidor}}caracteristica",
							"host": [
								"{{servidor}}caracteristica"
							]
						}
					},
					"response": [
						{
							"name": "Salvar caracteristica  ja existente case sensitive",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{   \r\n    \"nomeCaracteristica\": \"hatchs\",\r\n    \"iconeCaracteristica\": \"https://images.unsplash.com/photo-1536667842290-7602f6a43a2b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{servidor}}caracteristica",
									"host": [
										"{{servidor}}caracteristica"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 25 Mar 2023 18:41:25 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2023-03-25T18:41:25.620+00:00\",\n    \"status\": 500,\n    \"error\": \"Internal Server Error\",\n    \"trace\": \"org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [caracteristica.UK_9pegvbkl7148pywbe5o8p9won]\\r\\n\\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:270)\\r\\n\\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\\r\\n\\tat org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:550)\\r\\n\\tat org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61)\\r\\n\\tat org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:242)\\r\\n\\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:152)\\r\\n\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)\\r\\n\\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:163)\\r\\n\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)\\r\\n\\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\\r\\n\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)\\r\\n\\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:218)\\r\\n\\tat jdk.proxy4/jdk.proxy4.$Proxy134.save(Unknown Source)\\r\\n\\tat com.DH.PI.service.CaracteristicaService.save(CaracteristicaService.java:16)\\r\\n\\tat com.DH.PI.controller.CaracteristicaController.save(CaracteristicaController.java:26)\\r\\n\\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\\r\\n\\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\\r\\n\\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\\r\\n\\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\\r\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:207)\\r\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:152)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:884)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)\\r\\n\\tat org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\\r\\n\\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1080)\\r\\n\\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:973)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1011)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)\\r\\n\\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:731)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)\\r\\n\\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:814)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:223)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:177)\\r\\n\\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)\\r\\n\\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)\\r\\n\\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:119)\\r\\n\\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\\r\\n\\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)\\r\\n\\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)\\r\\n\\tat org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:400)\\r\\n\\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)\\r\\n\\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:859)\\r\\n\\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1734)\\r\\n\\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)\\r\\n\\tat org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)\\r\\n\\tat org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)\\r\\n\\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\\r\\n\\tat java.base/java.lang.Thread.run(Thread.java:833)\\r\\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\\r\\n\\tat org.hibernate.exception.internal.SQLExceptionTypeDelegate.convert(SQLExceptionTypeDelegate.java:60)\\r\\n\\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:56)\\r\\n\\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:109)\\r\\n\\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:95)\\r\\n\\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\\r\\n\\tat org.hibernate.dialect.identity.GetGeneratedKeysDelegate.executeAndExtract(GetGeneratedKeysDelegate.java:57)\\r\\n\\tat org.hibernate.id.insert.AbstractReturningDelegate.performInsert(AbstractReturningDelegate.java:42)\\r\\n\\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3327)\\r\\n\\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3965)\\r\\n\\tat org.hibernate.action.internal.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:80)\\r\\n\\tat org.hibernate.engine.spi.ActionQueue.execute(ActionQueue.java:653)\\r\\n\\tat org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:283)\\r\\n\\tat org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:264)\\r\\n\\tat org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:322)\\r\\n\\tat org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:340)\\r\\n\\tat org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:286)\\r\\n\\tat org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:192)\\r\\n\\tat org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:122)\\r\\n\\tat org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:184)\\r\\n\\tat org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:129)\\r\\n\\tat org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:53)\\r\\n\\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\\r\\n\\tat org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:737)\\r\\n\\tat org.hibernate.internal.SessionImpl.persist(SessionImpl.java:721)\\r\\n\\tat jdk.internal.reflect.GeneratedMethodAccessor62.invoke(Unknown Source)\\r\\n\\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\\r\\n\\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\\r\\n\\tat org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:360)\\r\\n\\tat jdk.proxy4/jdk.proxy4.$Proxy130.persist(Unknown Source)\\r\\n\\tat jdk.internal.reflect.GeneratedMethodAccessor62.invoke(Unknown Source)\\r\\n\\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\\r\\n\\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\\r\\n\\tat org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:307)\\r\\n\\tat jdk.proxy4/jdk.proxy4.$Proxy130.persist(Unknown Source)\\r\\n\\tat org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:610)\\r\\n\\tat jdk.internal.reflect.GeneratedMethodAccessor101.invoke(Unknown Source)\\r\\n\\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\\r\\n\\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\\r\\n\\tat org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:288)\\r\\n\\tat org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:136)\\r\\n\\tat org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:120)\\r\\n\\tat org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:516)\\r\\n\\tat org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:285)\\r\\n\\tat org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:628)\\r\\n\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)\\r\\n\\tat org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:168)\\r\\n\\tat org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)\\r\\n\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)\\r\\n\\tat org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:77)\\r\\n\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)\\r\\n\\tat org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)\\r\\n\\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)\\r\\n\\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\\r\\n\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)\\r\\n\\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\\r\\n\\t... 59 more\\r\\nCaused by: java.sql.SQLIntegrityConstraintViolationException: Duplicate entry 'hatchs' for key 'caracteristica.UK_9pegvbkl7148pywbe5o8p9won'\\r\\n\\tat com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:117)\\r\\n\\tat com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)\\r\\n\\tat com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)\\r\\n\\tat com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1061)\\r\\n\\tat com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1009)\\r\\n\\tat com.mysql.cj.jdbc.ClientPreparedStatement.executeLargeUpdate(ClientPreparedStatement.java:1320)\\r\\n\\tat com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdate(ClientPreparedStatement.java:994)\\r\\n\\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\\r\\n\\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\\r\\n\\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\\r\\n\\t... 109 more\\r\\n\",\n    \"message\": \"could not execute statement; SQL [n/a]; constraint [caracteristica.UK_9pegvbkl7148pywbe5o8p9won]\",\n    \"path\": \"/caracteristica\"\n}"
						}
					]
				},
				{
					"name": "Salvar caracteristica ja existente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status 409\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"    pm.response.to.be.clientError\r",
									"});\r",
									"\r",
									"\r",
									"tests[\"Body is correct\"] = responseBody === \"Caracteristica já cadastrada\";\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"nomeCaracteristica\": \"Caracteristica 1\",\r\n    \"iconeCaracteristica\": \"https://images.unsplash.com/photo-1536667842290-7602f6a43a2b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{servidor}}caracteristica",
							"host": [
								"{{servidor}}caracteristica"
							]
						}
					},
					"response": [
						{
							"name": "Salvar caracteristica ja existente",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{   \r\n    \"nomeCaracteristica\": \"Hatchs\",\r\n    \"iconeCaracteristica\": \"https://images.unsplash.com/photo-1536667842290-7602f6a43a2b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{servidor}}caracteristicas",
									"host": [
										"{{servidor}}caracteristicas"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sun, 12 Mar 2023 18:54:50 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2023-03-12T18:54:50.277+00:00\",\n    \"status\": 500,\n    \"error\": \"Internal Server Error\",\n    \"trace\": \"org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [\\\"PUBLIC.UK_DEVPR2XDPXJO6N2RNIIWMXKR8_INDEX_4 ON PUBLIC.CARACTERISTICA_MODEL(NOME_CARACTERISTICA NULLS FIRST) VALUES ( /* 1 */ 'Hatchs' )\\\"; SQL statement:\\ninsert into caracteristica_model (id_caracteristica, icone_caracteristica, nome_caracteristica) values (default, ?, ?) [23505-214]]\\r\\n\\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:270)\\r\\n\\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\\r\\n\\tat org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:550)\\r\\n\\tat org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61)\\r\\n\\tat org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:242)\\r\\n\\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:152)\\r\\n\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)\\r\\n\\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:163)\\r\\n\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)\\r\\n\\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\\r\\n\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)\\r\\n\\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:218)\\r\\n\\tat jdk.proxy4/jdk.proxy4.$Proxy126.save(Unknown Source)\\r\\n\\tat com.DH.PI.service.CaracteristicaService.save(CaracteristicaService.java:16)\\r\\n\\tat com.DH.PI.controller.CaracteristicaController.save(CaracteristicaController.java:21)\\r\\n\\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\\r\\n\\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\\r\\n\\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\\r\\n\\tat java.base/java.lang.reflect.Method.invoke(Unknown Source)\\r\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:207)\\r\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:152)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:884)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)\\r\\n\\tat org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\\r\\n\\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1080)\\r\\n\\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:973)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1011)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)\\r\\n\\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:731)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)\\r\\n\\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:814)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:223)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:177)\\r\\n\\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)\\r\\n\\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)\\r\\n\\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:119)\\r\\n\\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\\r\\n\\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)\\r\\n\\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)\\r\\n\\tat org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:400)\\r\\n\\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)\\r\\n\\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:859)\\r\\n\\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1734)\\r\\n\\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)\\r\\n\\tat org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)\\r\\n\\tat org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)\\r\\n\\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\\r\\n\\tat java.base/java.lang.Thread.run(Unknown Source)\\r\\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\\r\\n\\tat org.hibernate.exception.internal.SQLExceptionTypeDelegate.convert(SQLExceptionTypeDelegate.java:60)\\r\\n\\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:56)\\r\\n\\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:109)\\r\\n\\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:95)\\r\\n\\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\\r\\n\\tat org.hibernate.dialect.identity.GetGeneratedKeysDelegate.executeAndExtract(GetGeneratedKeysDelegate.java:57)\\r\\n\\tat org.hibernate.id.insert.AbstractReturningDelegate.performInsert(AbstractReturningDelegate.java:42)\\r\\n\\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3327)\\r\\n\\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3965)\\r\\n\\tat org.hibernate.action.internal.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:80)\\r\\n\\tat org.hibernate.engine.spi.ActionQueue.execute(ActionQueue.java:653)\\r\\n\\tat org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:283)\\r\\n\\tat org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:264)\\r\\n\\tat org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:322)\\r\\n\\tat org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:340)\\r\\n\\tat org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:286)\\r\\n\\tat org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:192)\\r\\n\\tat org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:122)\\r\\n\\tat org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:184)\\r\\n\\tat org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:129)\\r\\n\\tat org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:53)\\r\\n\\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\\r\\n\\tat org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:737)\\r\\n\\tat org.hibernate.internal.SessionImpl.persist(SessionImpl.java:721)\\r\\n\\tat jdk.internal.reflect.GeneratedMethodAccessor37.invoke(Unknown Source)\\r\\n\\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\\r\\n\\tat java.base/java.lang.reflect.Method.invoke(Unknown Source)\\r\\n\\tat org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:360)\\r\\n\\tat jdk.proxy4/jdk.proxy4.$Proxy122.persist(Unknown Source)\\r\\n\\tat jdk.internal.reflect.GeneratedMethodAccessor37.invoke(Unknown Source)\\r\\n\\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\\r\\n\\tat java.base/java.lang.reflect.Method.invoke(Unknown Source)\\r\\n\\tat org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:307)\\r\\n\\tat jdk.proxy4/jdk.proxy4.$Proxy122.persist(Unknown Source)\\r\\n\\tat org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:610)\\r\\n\\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\\r\\n\\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\\r\\n\\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\\r\\n\\tat java.base/java.lang.reflect.Method.invoke(Unknown Source)\\r\\n\\tat org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:288)\\r\\n\\tat org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:136)\\r\\n\\tat org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:120)\\r\\n\\tat org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:516)\\r\\n\\tat org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:285)\\r\\n\\tat org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:628)\\r\\n\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)\\r\\n\\tat org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:168)\\r\\n\\tat org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)\\r\\n\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)\\r\\n\\tat org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:77)\\r\\n\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)\\r\\n\\tat org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)\\r\\n\\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)\\r\\n\\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\\r\\n\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)\\r\\n\\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\\r\\n\\t... 59 more\\r\\nCaused by: org.h2.jdbc.JdbcSQLIntegrityConstraintViolationException: Unique index or primary key violation: \\\"PUBLIC.UK_DEVPR2XDPXJO6N2RNIIWMXKR8_INDEX_4 ON PUBLIC.CARACTERISTICA_MODEL(NOME_CARACTERISTICA NULLS FIRST) VALUES ( /* 1 */ 'Hatchs' )\\\"; SQL statement:\\ninsert into caracteristica_model (id_caracteristica, icone_caracteristica, nome_caracteristica) values (default, ?, ?) [23505-214]\\r\\n\\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:508)\\r\\n\\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:477)\\r\\n\\tat org.h2.message.DbException.get(DbException.java:223)\\r\\n\\tat org.h2.message.DbException.get(DbException.java:199)\\r\\n\\tat org.h2.index.Index.getDuplicateKeyException(Index.java:525)\\r\\n\\tat org.h2.mvstore.db.MVSecondaryIndex.checkUnique(MVSecondaryIndex.java:223)\\r\\n\\tat org.h2.mvstore.db.MVSecondaryIndex.add(MVSecondaryIndex.java:184)\\r\\n\\tat org.h2.mvstore.db.MVTable.addRow(MVTable.java:519)\\r\\n\\tat org.h2.command.dml.Insert.insertRows(Insert.java:174)\\r\\n\\tat org.h2.command.dml.Insert.update(Insert.java:135)\\r\\n\\tat org.h2.command.CommandContainer.executeUpdateWithGeneratedKeys(CommandContainer.java:242)\\r\\n\\tat org.h2.command.CommandContainer.update(CommandContainer.java:163)\\r\\n\\tat org.h2.command.Command.executeUpdate(Command.java:252)\\r\\n\\tat org.h2.jdbc.JdbcPreparedStatement.executeUpdateInternal(JdbcPreparedStatement.java:209)\\r\\n\\tat org.h2.jdbc.JdbcPreparedStatement.executeUpdate(JdbcPreparedStatement.java:169)\\r\\n\\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\\r\\n\\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\\r\\n\\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\\r\\n\\t... 110 more\\r\\n\",\n    \"message\": \"could not execute statement; SQL [n/a]; constraint [\\\"PUBLIC.UK_DEVPR2XDPXJO6N2RNIIWMXKR8_INDEX_4 ON PUBLIC.CARACTERISTICA_MODEL(NOME_CARACTERISTICA NULLS FIRST) VALUES ( /* 1 */ 'Hatchs' )\\\"; SQL statement:\\ninsert into caracteristica_model (id_caracteristica, icone_caracteristica, nome_caracteristica) values (default, ?, ?) [23505-214]]\",\n    \"path\": \"/caracteristicas\"\n}"
						},
						{
							"name": "Salvar caracteristica ja existente- erro servidor - sem msg de erro tratada",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{   \r\n    \"nomeCaracteristica\": \"Hatchs\",\r\n    \"iconeCaracteristica\": \"https://images.unsplash.com/photo-1536667842290-7602f6a43a2b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{servidor}}caracteristica",
									"host": [
										"{{servidor}}caracteristica"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 22 Mar 2023 02:19:32 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2023-03-22T02:19:32.951+00:00\",\n    \"status\": 500,\n    \"error\": \"Internal Server Error\",\n    \"trace\": \"org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [caracteristica.UK_9pegvbkl7148pywbe5o8p9won]\\r\\n\\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:270)\\r\\n\\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\\r\\n\\tat org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:550)\\r\\n\\tat org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61)\\r\\n\\tat org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:242)\\r\\n\\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:152)\\r\\n\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)\\r\\n\\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:163)\\r\\n\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)\\r\\n\\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\\r\\n\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)\\r\\n\\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:218)\\r\\n\\tat jdk.proxy4/jdk.proxy4.$Proxy134.save(Unknown Source)\\r\\n\\tat com.DH.PI.service.CaracteristicaService.save(CaracteristicaService.java:16)\\r\\n\\tat com.DH.PI.controller.CaracteristicaController.save(CaracteristicaController.java:26)\\r\\n\\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\\r\\n\\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\\r\\n\\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\\r\\n\\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\\r\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:207)\\r\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:152)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:884)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)\\r\\n\\tat org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\\r\\n\\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1080)\\r\\n\\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:973)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1011)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)\\r\\n\\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:731)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)\\r\\n\\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:814)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:223)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:177)\\r\\n\\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)\\r\\n\\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)\\r\\n\\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:119)\\r\\n\\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\\r\\n\\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)\\r\\n\\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)\\r\\n\\tat org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:400)\\r\\n\\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)\\r\\n\\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:859)\\r\\n\\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1734)\\r\\n\\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)\\r\\n\\tat org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)\\r\\n\\tat org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)\\r\\n\\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\\r\\n\\tat java.base/java.lang.Thread.run(Thread.java:833)\\r\\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\\r\\n\\tat org.hibernate.exception.internal.SQLExceptionTypeDelegate.convert(SQLExceptionTypeDelegate.java:60)\\r\\n\\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:56)\\r\\n\\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:109)\\r\\n\\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:95)\\r\\n\\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\\r\\n\\tat org.hibernate.dialect.identity.GetGeneratedKeysDelegate.executeAndExtract(GetGeneratedKeysDelegate.java:57)\\r\\n\\tat org.hibernate.id.insert.AbstractReturningDelegate.performInsert(AbstractReturningDelegate.java:42)\\r\\n\\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3327)\\r\\n\\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3965)\\r\\n\\tat org.hibernate.action.internal.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:80)\\r\\n\\tat org.hibernate.engine.spi.ActionQueue.execute(ActionQueue.java:653)\\r\\n\\tat org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:283)\\r\\n\\tat org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:264)\\r\\n\\tat org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:322)\\r\\n\\tat org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:340)\\r\\n\\tat org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:286)\\r\\n\\tat org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:192)\\r\\n\\tat org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:122)\\r\\n\\tat org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:184)\\r\\n\\tat org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:129)\\r\\n\\tat org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:53)\\r\\n\\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\\r\\n\\tat org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:737)\\r\\n\\tat org.hibernate.internal.SessionImpl.persist(SessionImpl.java:721)\\r\\n\\tat jdk.internal.reflect.GeneratedMethodAccessor65.invoke(Unknown Source)\\r\\n\\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\\r\\n\\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\\r\\n\\tat org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:360)\\r\\n\\tat jdk.proxy4/jdk.proxy4.$Proxy130.persist(Unknown Source)\\r\\n\\tat jdk.internal.reflect.GeneratedMethodAccessor65.invoke(Unknown Source)\\r\\n\\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\\r\\n\\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\\r\\n\\tat org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:307)\\r\\n\\tat jdk.proxy4/jdk.proxy4.$Proxy130.persist(Unknown Source)\\r\\n\\tat org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:610)\\r\\n\\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\\r\\n\\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\\r\\n\\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\\r\\n\\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\\r\\n\\tat org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:288)\\r\\n\\tat org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:136)\\r\\n\\tat org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:120)\\r\\n\\tat org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:516)\\r\\n\\tat org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:285)\\r\\n\\tat org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:628)\\r\\n\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)\\r\\n\\tat org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:168)\\r\\n\\tat org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)\\r\\n\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)\\r\\n\\tat org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:77)\\r\\n\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)\\r\\n\\tat org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)\\r\\n\\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)\\r\\n\\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\\r\\n\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)\\r\\n\\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\\r\\n\\t... 59 more\\r\\nCaused by: java.sql.SQLIntegrityConstraintViolationException: Duplicate entry 'Hatchs' for key 'caracteristica.UK_9pegvbkl7148pywbe5o8p9won'\\r\\n\\tat com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:117)\\r\\n\\tat com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)\\r\\n\\tat com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916)\\r\\n\\tat com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1061)\\r\\n\\tat com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1009)\\r\\n\\tat com.mysql.cj.jdbc.ClientPreparedStatement.executeLargeUpdate(ClientPreparedStatement.java:1320)\\r\\n\\tat com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdate(ClientPreparedStatement.java:994)\\r\\n\\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\\r\\n\\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\\r\\n\\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\\r\\n\\t... 110 more\\r\\n\",\n    \"message\": \"could not execute statement; SQL [n/a]; constraint [caracteristica.UK_9pegvbkl7148pywbe5o8p9won]\",\n    \"path\": \"/caracteristica\"\n}"
						}
					]
				},
				{
					"name": "Salvar caracteristica com campos em branco",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.be.badRequest\r",
									"});\r",
									"\r",
									"tests[\"Body is correct\"] = responseBody === \"Obrigatório uma descrição válida.\";\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"nomeCaracteristica\": \" \",\r\n    \"iconeCaracteristica\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{servidor}}caracteristica",
							"host": [
								"{{servidor}}caracteristica"
							]
						}
					},
					"response": [
						{
							"name": "Salvar caracteristica com campos em branco - exemplo erro servidor - msg sem tratamento",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{   \r\n    \"nomeCaracteristica\": \"\",\r\n    \"iconeCaracteristica\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{servidor}}caracteristica",
									"host": [
										"{{servidor}}caracteristica"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 22 Mar 2023 02:23:04 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2023-03-22T02:23:04.459+00:00\",\n    \"status\": 500,\n    \"error\": \"Internal Server Error\",\n    \"trace\": \"jakarta.validation.ConstraintViolationException: Validation failed for classes [com.DH.PI.model.CaracteristicaModel] during persist time for groups [jakarta.validation.groups.Default, ]\\nList of constraint violations:[\\n\\tConstraintViolationImpl{interpolatedMessage='Obrigatorio uma descrição valida.', propertyPath=iconeCaracteristica, rootBeanClass=class com.DH.PI.model.CaracteristicaModel, messageTemplate='Obrigatorio uma descrição valida.'}\\n\\tConstraintViolationImpl{interpolatedMessage='não deve estar vazio', propertyPath=iconeCaracteristica, rootBeanClass=class com.DH.PI.model.CaracteristicaModel, messageTemplate='{jakarta.validation.constraints.NotEmpty.message}'}\\n\\tConstraintViolationImpl{interpolatedMessage='Obrigatorio uma descrição valida.', propertyPath=nomeCaracteristica, rootBeanClass=class com.DH.PI.model.CaracteristicaModel, messageTemplate='Obrigatorio uma descrição valida.'}\\n\\tConstraintViolationImpl{interpolatedMessage='não deve estar vazio', propertyPath=nomeCaracteristica, rootBeanClass=class com.DH.PI.model.CaracteristicaModel, messageTemplate='{jakarta.validation.constraints.NotEmpty.message}'}\\n]\\r\\n\\tat org.hibernate.cfg.beanvalidation.BeanValidationEventListener.validate(BeanValidationEventListener.java:148)\\r\\n\\tat org.hibernate.cfg.beanvalidation.BeanValidationEventListener.onPreInsert(BeanValidationEventListener.java:80)\\r\\n\\tat org.hibernate.action.internal.EntityIdentityInsertAction.preInsert(EntityIdentityInsertAction.java:184)\\r\\n\\tat org.hibernate.action.internal.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:74)\\r\\n\\tat org.hibernate.engine.spi.ActionQueue.execute(ActionQueue.java:653)\\r\\n\\tat org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:283)\\r\\n\\tat org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:264)\\r\\n\\tat org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:322)\\r\\n\\tat org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:340)\\r\\n\\tat org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:286)\\r\\n\\tat org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:192)\\r\\n\\tat org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:122)\\r\\n\\tat org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:184)\\r\\n\\tat org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:129)\\r\\n\\tat org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:53)\\r\\n\\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\\r\\n\\tat org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:737)\\r\\n\\tat org.hibernate.internal.SessionImpl.persist(SessionImpl.java:721)\\r\\n\\tat jdk.internal.reflect.GeneratedMethodAccessor65.invoke(Unknown Source)\\r\\n\\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\\r\\n\\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\\r\\n\\tat org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:360)\\r\\n\\tat jdk.proxy4/jdk.proxy4.$Proxy130.persist(Unknown Source)\\r\\n\\tat jdk.internal.reflect.GeneratedMethodAccessor65.invoke(Unknown Source)\\r\\n\\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\\r\\n\\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\\r\\n\\tat org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:307)\\r\\n\\tat jdk.proxy4/jdk.proxy4.$Proxy130.persist(Unknown Source)\\r\\n\\tat org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:610)\\r\\n\\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\\r\\n\\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\\r\\n\\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\\r\\n\\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\\r\\n\\tat org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:288)\\r\\n\\tat org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:136)\\r\\n\\tat org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:120)\\r\\n\\tat org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:516)\\r\\n\\tat org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:285)\\r\\n\\tat org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:628)\\r\\n\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)\\r\\n\\tat org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:168)\\r\\n\\tat org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)\\r\\n\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)\\r\\n\\tat org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:77)\\r\\n\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)\\r\\n\\tat org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)\\r\\n\\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)\\r\\n\\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\\r\\n\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)\\r\\n\\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\\r\\n\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)\\r\\n\\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:163)\\r\\n\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)\\r\\n\\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\\r\\n\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)\\r\\n\\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:218)\\r\\n\\tat jdk.proxy4/jdk.proxy4.$Proxy134.save(Unknown Source)\\r\\n\\tat com.DH.PI.service.CaracteristicaService.save(CaracteristicaService.java:16)\\r\\n\\tat com.DH.PI.controller.CaracteristicaController.save(CaracteristicaController.java:26)\\r\\n\\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\\r\\n\\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\\r\\n\\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\\r\\n\\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\\r\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:207)\\r\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:152)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:884)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)\\r\\n\\tat org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\\r\\n\\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1080)\\r\\n\\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:973)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1011)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)\\r\\n\\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:731)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)\\r\\n\\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:814)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:223)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:177)\\r\\n\\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)\\r\\n\\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)\\r\\n\\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:119)\\r\\n\\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\\r\\n\\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)\\r\\n\\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)\\r\\n\\tat org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:400)\\r\\n\\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)\\r\\n\\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:859)\\r\\n\\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1734)\\r\\n\\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)\\r\\n\\tat org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)\\r\\n\\tat org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)\\r\\n\\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\\r\\n\\tat java.base/java.lang.Thread.run(Thread.java:833)\\r\\n\",\n    \"message\": \"Validation failed for classes [com.DH.PI.model.CaracteristicaModel] during persist time for groups [jakarta.validation.groups.Default, ]\\nList of constraint violations:[\\n\\tConstraintViolationImpl{interpolatedMessage='Obrigatorio uma descrição valida.', propertyPath=iconeCaracteristica, rootBeanClass=class com.DH.PI.model.CaracteristicaModel, messageTemplate='Obrigatorio uma descrição valida.'}\\n\\tConstraintViolationImpl{interpolatedMessage='não deve estar vazio', propertyPath=iconeCaracteristica, rootBeanClass=class com.DH.PI.model.CaracteristicaModel, messageTemplate='{jakarta.validation.constraints.NotEmpty.message}'}\\n\\tConstraintViolationImpl{interpolatedMessage='Obrigatorio uma descrição valida.', propertyPath=nomeCaracteristica, rootBeanClass=class com.DH.PI.model.CaracteristicaModel, messageTemplate='Obrigatorio uma descrição valida.'}\\n\\tConstraintViolationImpl{interpolatedMessage='não deve estar vazio', propertyPath=nomeCaracteristica, rootBeanClass=class com.DH.PI.model.CaracteristicaModel, messageTemplate='{jakarta.validation.constraints.NotEmpty.message}'}\\n]\",\n    \"path\": \"/caracteristica\"\n}"
						},
						{
							"name": "Salvar caracteristica com campos em branco",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{   \r\n    \"nomeCaracteristica\": \" \",\r\n    \"iconeCaracteristica\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{servidor}}caracteristica",
									"host": [
										"{{servidor}}caracteristica"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sun, 26 Mar 2023 15:08:07 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2023-03-26T15:08:07.986+00:00\",\n    \"status\": 500,\n    \"error\": \"Internal Server Error\",\n    \"trace\": \"jakarta.validation.ConstraintViolationException: Validation failed for classes [com.DH.PI.model.CaracteristicaModel] during persist time for groups [jakarta.validation.groups.Default, ]\\nList of constraint violations:[\\n\\tConstraintViolationImpl{interpolatedMessage='Obrigatorio uma descrição valida.', propertyPath=iconeCaracteristica, rootBeanClass=class com.DH.PI.model.CaracteristicaModel, messageTemplate='Obrigatorio uma descrição valida.'}\\n\\tConstraintViolationImpl{interpolatedMessage='não deve estar vazio', propertyPath=iconeCaracteristica, rootBeanClass=class com.DH.PI.model.CaracteristicaModel, messageTemplate='{jakarta.validation.constraints.NotEmpty.message}'}\\n\\tConstraintViolationImpl{interpolatedMessage='Obrigatorio uma descrição valida.', propertyPath=nomeCaracteristica, rootBeanClass=class com.DH.PI.model.CaracteristicaModel, messageTemplate='Obrigatorio uma descrição valida.'}\\n]\\r\\n\\tat org.hibernate.cfg.beanvalidation.BeanValidationEventListener.validate(BeanValidationEventListener.java:148)\\r\\n\\tat org.hibernate.cfg.beanvalidation.BeanValidationEventListener.onPreInsert(BeanValidationEventListener.java:80)\\r\\n\\tat org.hibernate.action.internal.EntityIdentityInsertAction.preInsert(EntityIdentityInsertAction.java:184)\\r\\n\\tat org.hibernate.action.internal.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:74)\\r\\n\\tat org.hibernate.engine.spi.ActionQueue.execute(ActionQueue.java:653)\\r\\n\\tat org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:283)\\r\\n\\tat org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:264)\\r\\n\\tat org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:322)\\r\\n\\tat org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:340)\\r\\n\\tat org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:286)\\r\\n\\tat org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:192)\\r\\n\\tat org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:122)\\r\\n\\tat org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:184)\\r\\n\\tat org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:129)\\r\\n\\tat org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:53)\\r\\n\\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\\r\\n\\tat org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:737)\\r\\n\\tat org.hibernate.internal.SessionImpl.persist(SessionImpl.java:721)\\r\\n\\tat java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)\\r\\n\\tat java.base/java.lang.reflect.Method.invoke(Method.java:577)\\r\\n\\tat org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:360)\\r\\n\\tat jdk.proxy4/jdk.proxy4.$Proxy130.persist(Unknown Source)\\r\\n\\tat java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)\\r\\n\\tat java.base/java.lang.reflect.Method.invoke(Method.java:577)\\r\\n\\tat org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:307)\\r\\n\\tat jdk.proxy4/jdk.proxy4.$Proxy130.persist(Unknown Source)\\r\\n\\tat org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:610)\\r\\n\\tat java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)\\r\\n\\tat java.base/java.lang.reflect.Method.invoke(Method.java:577)\\r\\n\\tat org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:288)\\r\\n\\tat org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:136)\\r\\n\\tat org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:120)\\r\\n\\tat org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:516)\\r\\n\\tat org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:285)\\r\\n\\tat org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:628)\\r\\n\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)\\r\\n\\tat org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:168)\\r\\n\\tat org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)\\r\\n\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)\\r\\n\\tat org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:77)\\r\\n\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)\\r\\n\\tat org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)\\r\\n\\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)\\r\\n\\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\\r\\n\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)\\r\\n\\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\\r\\n\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)\\r\\n\\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:163)\\r\\n\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)\\r\\n\\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\\r\\n\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)\\r\\n\\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:218)\\r\\n\\tat jdk.proxy4/jdk.proxy4.$Proxy134.save(Unknown Source)\\r\\n\\tat com.DH.PI.service.CaracteristicaService.save(CaracteristicaService.java:16)\\r\\n\\tat com.DH.PI.controller.CaracteristicaController.save(CaracteristicaController.java:26)\\r\\n\\tat java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)\\r\\n\\tat java.base/java.lang.reflect.Method.invoke(Method.java:577)\\r\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:207)\\r\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:152)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:884)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)\\r\\n\\tat org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\\r\\n\\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1080)\\r\\n\\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:973)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1011)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)\\r\\n\\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:731)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)\\r\\n\\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:814)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:223)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:177)\\r\\n\\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)\\r\\n\\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)\\r\\n\\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:119)\\r\\n\\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\\r\\n\\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)\\r\\n\\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)\\r\\n\\tat org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:400)\\r\\n\\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)\\r\\n\\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:859)\\r\\n\\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1734)\\r\\n\\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)\\r\\n\\tat org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)\\r\\n\\tat org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)\\r\\n\\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\\r\\n\\tat java.base/java.lang.Thread.run(Thread.java:833)\\r\\n\",\n    \"message\": \"Validation failed for classes [com.DH.PI.model.CaracteristicaModel] during persist time for groups [jakarta.validation.groups.Default, ]\\nList of constraint violations:[\\n\\tConstraintViolationImpl{interpolatedMessage='Obrigatorio uma descrição valida.', propertyPath=iconeCaracteristica, rootBeanClass=class com.DH.PI.model.CaracteristicaModel, messageTemplate='Obrigatorio uma descrição valida.'}\\n\\tConstraintViolationImpl{interpolatedMessage='não deve estar vazio', propertyPath=iconeCaracteristica, rootBeanClass=class com.DH.PI.model.CaracteristicaModel, messageTemplate='{jakarta.validation.constraints.NotEmpty.message}'}\\n\\tConstraintViolationImpl{interpolatedMessage='Obrigatorio uma descrição valida.', propertyPath=nomeCaracteristica, rootBeanClass=class com.DH.PI.model.CaracteristicaModel, messageTemplate='Obrigatorio uma descrição valida.'}\\n]\",\n    \"path\": \"/caracteristica\"\n}"
						}
					]
				},
				{
					"name": "Salvar caracteristica com campos acima de 255 caracteres",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status Bad Request\", function () {\r",
									"    pm.response.to.be.badRequest;\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type está presente\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"tests[\"validando mensagem de erro recebida\"] = responseBody === \"Excedido numero maximo de caracteres\";\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"nomeCaracteristica\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea comodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\",\r\n    \"iconeCaracteristica\": \"https://images.unsplash.com/photo-1536667842290-7602f6a43a2b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{servidor}}caracteristica",
							"host": [
								"{{servidor}}caracteristica"
							]
						}
					},
					"response": [
						{
							"name": "Salvar caracteristica com campos acima de 255 caracteres",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{   \r\n    \"nomeCaracteristica\": \"Os hatchs são bons carros para motoristas iniciantes, já que seu menor tamanho ajuda na hora de fazer vagas e de andar pela cidade. Também costumam ter motores menos potentes, com a grande maioria tendo versões 1.0 como padrão. A economia de combustível é outro diferencial.\",\r\n    \"iconeCaracteristica\": \"https://images.unsplash.com/photo-1536667842290-7602f6a43a2b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{servidor}}caracteristica",
									"host": [
										"{{servidor}}caracteristica"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 22 Mar 2023 02:39:18 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2023-03-22T02:39:18.579+00:00\",\n    \"status\": 500,\n    \"error\": \"Internal Server Error\",\n    \"trace\": \"jakarta.validation.ConstraintViolationException: Validation failed for classes [com.DH.PI.model.CaracteristicaModel] during persist time for groups [jakarta.validation.groups.Default, ]\\nList of constraint violations:[\\n\\tConstraintViolationImpl{interpolatedMessage='Excedido numero maximo de caracteres', propertyPath=nomeCaracteristica, rootBeanClass=class com.DH.PI.model.CaracteristicaModel, messageTemplate='Excedido numero maximo de caracteres'}\\n]\\r\\n\\tat org.hibernate.cfg.beanvalidation.BeanValidationEventListener.validate(BeanValidationEventListener.java:148)\\r\\n\\tat org.hibernate.cfg.beanvalidation.BeanValidationEventListener.onPreInsert(BeanValidationEventListener.java:80)\\r\\n\\tat org.hibernate.action.internal.EntityIdentityInsertAction.preInsert(EntityIdentityInsertAction.java:184)\\r\\n\\tat org.hibernate.action.internal.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:74)\\r\\n\\tat org.hibernate.engine.spi.ActionQueue.execute(ActionQueue.java:653)\\r\\n\\tat org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:283)\\r\\n\\tat org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:264)\\r\\n\\tat org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:322)\\r\\n\\tat org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:340)\\r\\n\\tat org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:286)\\r\\n\\tat org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:192)\\r\\n\\tat org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:122)\\r\\n\\tat org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:184)\\r\\n\\tat org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:129)\\r\\n\\tat org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:53)\\r\\n\\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\\r\\n\\tat org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:737)\\r\\n\\tat org.hibernate.internal.SessionImpl.persist(SessionImpl.java:721)\\r\\n\\tat jdk.internal.reflect.GeneratedMethodAccessor65.invoke(Unknown Source)\\r\\n\\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\\r\\n\\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\\r\\n\\tat org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:360)\\r\\n\\tat jdk.proxy4/jdk.proxy4.$Proxy130.persist(Unknown Source)\\r\\n\\tat jdk.internal.reflect.GeneratedMethodAccessor65.invoke(Unknown Source)\\r\\n\\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\\r\\n\\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\\r\\n\\tat org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:307)\\r\\n\\tat jdk.proxy4/jdk.proxy4.$Proxy130.persist(Unknown Source)\\r\\n\\tat org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:610)\\r\\n\\tat jdk.internal.reflect.GeneratedMethodAccessor67.invoke(Unknown Source)\\r\\n\\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\\r\\n\\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\\r\\n\\tat org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:288)\\r\\n\\tat org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:136)\\r\\n\\tat org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:120)\\r\\n\\tat org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:516)\\r\\n\\tat org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:285)\\r\\n\\tat org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:628)\\r\\n\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)\\r\\n\\tat org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:168)\\r\\n\\tat org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)\\r\\n\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)\\r\\n\\tat org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:77)\\r\\n\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)\\r\\n\\tat org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)\\r\\n\\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)\\r\\n\\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\\r\\n\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)\\r\\n\\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\\r\\n\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)\\r\\n\\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:163)\\r\\n\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)\\r\\n\\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\\r\\n\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)\\r\\n\\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:218)\\r\\n\\tat jdk.proxy4/jdk.proxy4.$Proxy134.save(Unknown Source)\\r\\n\\tat com.DH.PI.service.CaracteristicaService.save(CaracteristicaService.java:16)\\r\\n\\tat com.DH.PI.controller.CaracteristicaController.save(CaracteristicaController.java:26)\\r\\n\\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\\r\\n\\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\\r\\n\\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\\r\\n\\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\\r\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:207)\\r\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:152)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:884)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)\\r\\n\\tat org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\\r\\n\\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1080)\\r\\n\\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:973)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1011)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)\\r\\n\\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:731)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)\\r\\n\\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:814)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:223)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:177)\\r\\n\\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)\\r\\n\\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)\\r\\n\\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:119)\\r\\n\\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\\r\\n\\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)\\r\\n\\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)\\r\\n\\tat org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:400)\\r\\n\\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)\\r\\n\\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:859)\\r\\n\\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1734)\\r\\n\\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)\\r\\n\\tat org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)\\r\\n\\tat org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)\\r\\n\\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\\r\\n\\tat java.base/java.lang.Thread.run(Thread.java:833)\\r\\n\",\n    \"message\": \"Validation failed for classes [com.DH.PI.model.CaracteristicaModel] during persist time for groups [jakarta.validation.groups.Default, ]\\nList of constraint violations:[\\n\\tConstraintViolationImpl{interpolatedMessage='Excedido numero maximo de caracteres', propertyPath=nomeCaracteristica, rootBeanClass=class com.DH.PI.model.CaracteristicaModel, messageTemplate='Excedido numero maximo de caracteres'}\\n]\",\n    \"path\": \"/caracteristica\"\n}"
						}
					]
				},
				{
					"name": "Obter todas as caracteristicas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"O tempo de resposta é inferior a 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validando se há uma resposta\", function(){\r",
									"    pm.response.to.be.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{servidor}}caracteristica",
							"host": [
								"{{servidor}}caracteristica"
							]
						}
					},
					"response": [
						{
							"name": "Obter todas as caracteristicas",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{servidor}}caracteristica",
									"host": [
										"{{servidor}}caracteristica"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 25 Mar 2023 18:42:48 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"headers\": {},\n    \"body\": [\n        {\n            \"idCaracteristica\": 1,\n            \"nomeCaracteristica\": \"Hatchs\",\n            \"iconeCaracteristica\": \"https://images.unsplash.com/photo-1536667842290-7602f6a43a2b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\",\n            \"links\": []\n        },\n        {\n            \"idCaracteristica\": 3,\n            \"nomeCaracteristica\": \"Sedans\",\n            \"iconeCaracteristica\": \"https://images.unsplash.com/photo-1494976388531-d1058494cdd8?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\",\n            \"links\": []\n        },\n        {\n            \"idCaracteristica\": 4,\n            \"nomeCaracteristica\": \"SUVs\",\n            \"iconeCaracteristica\": \"https://images.unsplash.com/photo-1615063029891-497bebd4f03c?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1100&q=80\",\n            \"links\": []\n        }\n    ],\n    \"statusCode\": \"OK\",\n    \"statusCodeValue\": 200\n}"
						}
					]
				},
				{
					"name": "Obter caracteristica por id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var response_body = pm.response.json();\r",
									"pm.test(\"Validating if the answer is json\", function(){\r",
									"    pm.response.to.be.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Validando se a caracteristica é a mesma cadastrada\", function(){\r",
									"    pm.expect(\"Caracteristica 1\").to.eql(response_body.nomeCaracteristica)\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{servidor}}caracteristica/:id",
							"host": [
								"{{servidor}}caracteristica"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Obter caracteristica com id inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status Not Found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.be.notFound;\r",
									"});\r",
									"\r",
									"tests[\"Body is correct\"] = responseBody === \"Nenhum produto encontrado\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{servidor}}caracteristica/:id",
							"host": [
								"{{servidor}}caracteristica"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "10"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "/categoria",
			"item": [
				{
					"name": "Obter todas as categorias quando não existe nada salvo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.be.notFound;\r",
									"});\r",
									"\r",
									"pm.test(\"O tempo de resposta é inferior a 400ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Validando se tem resposta \", function(){\r",
									"    pm.response.to.be.withBody;\r",
									"    // pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"tests[\"Validando se a mensagem de erro é correta\"] = responseBody === \"Nenhuma categoria cadastrada\";\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{servidor}}categoria",
							"host": [
								"{{servidor}}categoria"
							]
						}
					},
					"response": [
						{
							"name": "Obter todas as categorias quando não existe nada salvo",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{servidor}}categoria",
									"host": [
										"{{servidor}}categoria"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "text/plain;charset=UTF-8"
								},
								{
									"key": "Content-Length",
									"value": "28"
								},
								{
									"key": "Date",
									"value": "Sun, 26 Mar 2023 13:44:12 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Nenhuma categoria cadastrada"
						}
					]
				},
				{
					"name": "Salvar categoria 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Solicitação POST bem-sucedida\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Location no header está presente\", function () {\r",
									"    pm.response.to.have.header(\"Location\");\r",
									"});\r",
									"\r",
									"// pm.test(\"Validando se a resposta do location é a esperada\", function () {\r",
									"//     pm.response.to.have.header.response_headers(\"http://localhost:8080/categoria/categoriaId/1\");\r",
									"// });\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"categoria\": \"Categoria 1\",\r\n    \"descricao\": \"Os hatchs são bons carros para motoristas iniciantes, já que seu menor tamanho ajuda na hora de fazer vagas e de andar pela cidade. Também costumam ter motores menos potentes, com a grande maioria tendo versões 1.0 como padrão.\",\r\n    \"urlImagem\": \"https://images.unsplash.com/photo-1536667842290-7602f6a43a2b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{servidor}}categoria",
							"host": [
								"{{servidor}}categoria"
							]
						},
						"description": "Está requisição deve receber \"categoria\", \"descrição\" e \"URL de uma imagem\", para retornar a categoria salva com ID"
					},
					"response": [
						{
							"name": "Salvar categoria 1",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{   \r\n    \"categoria\": \"Hatchs\",\r\n    \"descricao\": \"Os hatchs são bons carros para motoristas iniciantes, já que seu menor tamanho ajuda na hora de fazer vagas e de andar pela cidade. Também costumam ter motores menos potentes, com a grande maioria tendo versões 1.0 como padrão.\",\r\n    \"urlImagem\": \"https://images.unsplash.com/photo-1536667842290-7602f6a43a2b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{servidor}}categoria",
									"host": [
										"{{servidor}}categoria"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Location",
									"value": "http://localhost:8080/categoria/categoriaId/1"
								},
								{
									"key": "Content-Length",
									"value": "0"
								},
								{
									"key": "Date",
									"value": "Sun, 26 Mar 2023 13:44:32 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Salvar categoria 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Solicitação POST bem-sucedida\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Location no header está presente\", function () {\r",
									"    pm.response.to.have.header(\"Location\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"categoria\": \"Categoria 2\",\r\n    \"descricao\": \"São úteis para famílias que precisam de mais espaço nos bancos de trás para as crianças, pessoas que viajam regularmente e para quem quer mais conforto sem precisar investir muito.\",\r\n    \"urlImagem\": \"https://images.unsplash.com/photo-1494976388531-d1058494cdd8?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{servidor}}categoria",
							"host": [
								"{{servidor}}categoria"
							]
						}
					},
					"response": [
						{
							"name": "Salvar categoria 2",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{   \r\n    \"categoria\": \"Sedans\",\r\n    \"descricao\": \"São úteis para famílias que precisam de mais espaço nos bancos de trás para as crianças, pessoas que viajam regularmente e para quem quer mais conforto sem precisar investir muito.\",\r\n    \"urlImagem\": \"https://images.unsplash.com/photo-1494976388531-d1058494cdd8?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{servidor}}categoria",
									"host": [
										"{{servidor}}categoria"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Location",
									"value": "http://localhost:8080/categoria/categoriaId/2"
								},
								{
									"key": "Content-Length",
									"value": "0"
								},
								{
									"key": "Date",
									"value": "Sun, 26 Mar 2023 13:44:40 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Salvar categoria 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Solicitação POST bem-sucedida\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Location no header está presente\", function () {\r",
									"    pm.response.to.have.header(\"Location\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"categoria\": \"Categoria 3\",\r\n    \"descricao\": \"As SUVs costumam ter porte avantajado, além de interior espaçoso e possibilidade de trafegar dentro e fora da cidade.\",\r\n    \"urlImagem\": \"https://images.unsplash.com/photo-1615063029891-497bebd4f03c?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1100&q=80\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{servidor}}categoria",
							"host": [
								"{{servidor}}categoria"
							]
						}
					},
					"response": [
						{
							"name": "Salvar categoria 3",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{   \r\n    \"categoria\": \"SUVs\",\r\n    \"descricao\": \"As SUVs costumam ter porte avantajado, além de interior espaçoso e possibilidade de trafegar dentro e fora da cidade.\",\r\n    \"urlImagem\": \"https://images.unsplash.com/photo-1615063029891-497bebd4f03c?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1100&q=80\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{servidor}}categoria",
									"host": [
										"{{servidor}}categoria"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Location",
									"value": "http://localhost:8080/categoria/categoriaId/3"
								},
								{
									"key": "Content-Length",
									"value": "0"
								},
								{
									"key": "Date",
									"value": "Sun, 26 Mar 2023 13:44:46 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Salvar categoria 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Solicitação POST bem-sucedida\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Location no header está presente\", function () {\r",
									"    pm.response.to.have.header(\"Location\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"categoria\": \"Categoria 4\",\r\n    \"descricao\": \"Esse tipo de carro é ideal para carregar grandes cargas, bons para quem viaja com grande bagagem, gosta de se aventurar no off-road ou precisa de um veículo mais robusto que um utilitário para dividir entre trabalho e lazer.\",\r\n    \"urlImagem\": \"https://images.unsplash.com/photo-1620071628712-379d473f2e0c?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=387&q=80\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{servidor}}categoria",
							"host": [
								"{{servidor}}categoria"
							]
						}
					},
					"response": [
						{
							"name": "Salvar categoria 4",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{   \r\n    \"categoria\": \"Picapes\",\r\n    \"descricao\": \"Esse tipo de carro é ideal para carregar grandes cargas, bons para quem viaja com grande bagagem, gosta de se aventurar no off-road ou precisa de um veículo mais robusto que um utilitário para dividir entre trabalho e lazer.\",\r\n    \"urlImagem\": \"https://images.unsplash.com/photo-1620071628712-379d473f2e0c?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=387&q=80\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{servidor}}categoria",
									"host": [
										"{{servidor}}categoria"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Location",
									"value": "http://localhost:8080/categoria/categoriaId/4"
								},
								{
									"key": "Content-Length",
									"value": "0"
								},
								{
									"key": "Date",
									"value": "Sun, 26 Mar 2023 13:44:55 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Salvar categoria 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Solicitação POST bem-sucedida\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Location no header está presente\", function () {\r",
									"    pm.response.to.have.header(\"Location\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"categoria\": \"Categoria 5\",\r\n    \"descricao\": \"Os utilitários são carros normalmente usados para trabalho, que possuem maior capacidade de carga e, consequentemente, mais potência para realizar os serviços necessários.\",\r\n    \"urlImagem\": \"https://images.unsplash.com/photo-1559416523-140ddc3d238c?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1151&q=80\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{servidor}}categoria",
							"host": [
								"{{servidor}}categoria"
							]
						}
					},
					"response": [
						{
							"name": "Salvar categoria 5",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{   \r\n    \"categoria\": \"Utilitário\",\r\n    \"descricao\": \"Os utilitários são carros normalmente usados para trabalho, que possuem maior capacidade de carga e, consequentemente, mais potência para realizar os serviços necessários.\",\r\n    \"urlImagem\": \"https://images.unsplash.com/photo-1559416523-140ddc3d238c?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1151&q=80\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{servidor}}categoria",
									"host": [
										"{{servidor}}categoria"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Location",
									"value": "http://localhost:8080/categoria/categoriaId/5"
								},
								{
									"key": "Content-Length",
									"value": "0"
								},
								{
									"key": "Date",
									"value": "Sun, 26 Mar 2023 13:45:05 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Salvar categoria ja existente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status 409\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"    pm.response.to.be.clientError\r",
									"});\r",
									"\r",
									"\r",
									"tests[\"Validando se a mensagem de erro é correta\"] = responseBody === \"Categoria já cadastrada\";\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"categoria\": \"Categoria 1\",\r\n    \"descricao\": \"Os hatchs são bons carros para motoristas iniciantes, já que seu menor tamanho ajuda na hora de fazer vagas e de andar pela cidade. Também costumam ter motores menos potentes, com a grande maioria tendo versões 1.0 como padrão.\",\r\n    \"urlImagem\": \"https://images.unsplash.com/photo-1536667842290-7602f6a43a2b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{servidor}}categoria",
							"host": [
								"{{servidor}}categoria"
							]
						}
					},
					"response": [
						{
							"name": "Salvar categoria ja existente",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{   \r\n    \"categoria\": \"Hatchs\",\r\n    \"descricao\": \"Os hatchs são bons carros para motoristas iniciantes, já que seu menor tamanho ajuda na hora de fazer vagas e de andar pela cidade. Também costumam ter motores menos potentes, com a grande maioria tendo versões 1.0 como padrão.\",\r\n    \"urlImagem\": \"https://images.unsplash.com/photo-1536667842290-7602f6a43a2b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{servidor}}categoria",
									"host": [
										"{{servidor}}categoria"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "text/plain;charset=UTF-8"
								},
								{
									"key": "Content-Length",
									"value": "24"
								},
								{
									"key": "Date",
									"value": "Sun, 26 Mar 2023 13:48:17 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Categoria já cadastrada"
						}
					]
				},
				{
					"name": "Salvar categoria ja existente case sensitive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status 409\", function () {\r",
									"pm.collectionVariables.get(\"variable_key\");\r",
									"    pm.response.to.have.status(409);\r",
									"    pm.response.to.be.clientError\r",
									"});\r",
									"\r",
									"tests[\"Validando se a mensagem de erro é correta\"] = responseBody === \"Categoria já cadastrada\";\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"categoria\": \"categoria 1\",\r\n    \"descricao\": \"Os hatchs são bons carros para motoristas iniciantes, já que seu menor tamanho ajuda na hora de fazer vagas e de andar pela cidade. Também costumam ter motores menos potentes, com a grande maioria tendo versões 1.0 como padrão.\",\r\n    \"urlImagem\": \"https://images.unsplash.com/photo-1536667842290-7602f6a43a2b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{servidor}}categoria",
							"host": [
								"{{servidor}}categoria"
							]
						}
					},
					"response": [
						{
							"name": "Salvar categoria ja existente case sensitive",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{   \r\n    \"categoria\": \"hatchs\",\r\n    \"descricao\": \"Os hatchs são bons carros para motoristas iniciantes, já que seu menor tamanho ajuda na hora de fazer vagas e de andar pela cidade. Também costumam ter motores menos potentes, com a grande maioria tendo versões 1.0 como padrão.\",\r\n    \"urlImagem\": \"https://images.unsplash.com/photo-1536667842290-7602f6a43a2b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{servidor}}categoria",
									"host": [
										"{{servidor}}categoria"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "text/plain;charset=UTF-8"
								},
								{
									"key": "Content-Length",
									"value": "24"
								},
								{
									"key": "Date",
									"value": "Sun, 26 Mar 2023 13:48:05 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Categoria já cadastrada"
						}
					]
				},
				{
					"name": "Salvar categoria com campos em branco",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.be.badRequest\r",
									"});\r",
									"\r",
									"tests[\"Validando se a mensagem de erro é correta\"] = responseBody === \"Verifique se alguns dos atributos do objeto estão vazios\";\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"categoria\": \"Hatchs\",\r\n    \"descricao\": \"\",\r\n    \"urlImagem\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{servidor}}categoria",
							"host": [
								"{{servidor}}categoria"
							]
						}
					},
					"response": [
						{
							"name": "Salvar categoria com campos em branco",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{   \r\n    \"categoria\": \"Hatchs\",\r\n    \"descricao\": \"\",\r\n    \"urlImagem\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{servidor}}categorias",
									"host": [
										"{{servidor}}categorias"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain;charset=UTF-8"
								},
								{
									"key": "Content-Length",
									"value": "57"
								},
								{
									"key": "Date",
									"value": "Sun, 12 Mar 2023 19:36:11 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "Verifique se alguns dos atributos do objeto estão vazios"
						},
						{
							"name": "Salvar categoria com campos em branco",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{   \r\n    \"categoria\": \"Hatchs\",\r\n    \"descricao\": \"\",\r\n    \"urlImagem\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{servidor}}categoria",
									"host": [
										"{{servidor}}categoria"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sun, 26 Mar 2023 13:48:24 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2023-03-26T13:48:24.767+00:00\",\n    \"status\": 400,\n    \"error\": \"Bad Request\",\n    \"trace\": \"org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public org.springframework.http.ResponseEntity com.DH.PI.controller.CategoriaController.save(com.DH.PI.model.CategoriaModel) throws java.sql.SQLException with 4 errors: [Field error in object 'categoriaModel' on field 'urlImagem': rejected value []; codes [NotEmpty.categoriaModel.urlImagem,NotEmpty.urlImagem,NotEmpty.java.lang.String,NotEmpty]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [categoriaModel.urlImagem,urlImagem]; arguments []; default message [urlImagem]]; default message [não deve estar vazio]] [Field error in object 'categoriaModel' on field 'descricao': rejected value []; codes [NotBlank.categoriaModel.descricao,NotBlank.descricao,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [categoriaModel.descricao,descricao]; arguments []; default message [descricao]]; default message [Obrigatorio uma descrição valida.]] [Field error in object 'categoriaModel' on field 'descricao': rejected value []; codes [NotEmpty.categoriaModel.descricao,NotEmpty.descricao,NotEmpty.java.lang.String,NotEmpty]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [categoriaModel.descricao,descricao]; arguments []; default message [descricao]]; default message [não deve estar vazio]] [Field error in object 'categoriaModel' on field 'urlImagem': rejected value []; codes [NotBlank.categoriaModel.urlImagem,NotBlank.urlImagem,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [categoriaModel.urlImagem,urlImagem]; arguments []; default message [urlImagem]]; default message [Obrigatorio uma descrição valida.]] \\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.resolveArgument(RequestResponseBodyMethodProcessor.java:144)\\r\\n\\tat org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:122)\\r\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:181)\\r\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:148)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:884)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)\\r\\n\\tat org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\\r\\n\\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1080)\\r\\n\\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:973)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1011)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)\\r\\n\\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:731)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)\\r\\n\\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:814)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:223)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:177)\\r\\n\\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)\\r\\n\\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)\\r\\n\\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:119)\\r\\n\\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\\r\\n\\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)\\r\\n\\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)\\r\\n\\tat org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:400)\\r\\n\\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)\\r\\n\\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:859)\\r\\n\\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1734)\\r\\n\\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)\\r\\n\\tat org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)\\r\\n\\tat org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)\\r\\n\\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\\r\\n\\tat java.base/java.lang.Thread.run(Thread.java:833)\\r\\n\",\n    \"message\": \"Validation failed for object='categoriaModel'. Error count: 4\",\n    \"errors\": [\n        {\n            \"codes\": [\n                \"NotEmpty.categoriaModel.urlImagem\",\n                \"NotEmpty.urlImagem\",\n                \"NotEmpty.java.lang.String\",\n                \"NotEmpty\"\n            ],\n            \"arguments\": [\n                {\n                    \"codes\": [\n                        \"categoriaModel.urlImagem\",\n                        \"urlImagem\"\n                    ],\n                    \"arguments\": null,\n                    \"defaultMessage\": \"urlImagem\",\n                    \"code\": \"urlImagem\"\n                }\n            ],\n            \"defaultMessage\": \"não deve estar vazio\",\n            \"objectName\": \"categoriaModel\",\n            \"field\": \"urlImagem\",\n            \"rejectedValue\": \"\",\n            \"bindingFailure\": false,\n            \"code\": \"NotEmpty\"\n        },\n        {\n            \"codes\": [\n                \"NotBlank.categoriaModel.descricao\",\n                \"NotBlank.descricao\",\n                \"NotBlank.java.lang.String\",\n                \"NotBlank\"\n            ],\n            \"arguments\": [\n                {\n                    \"codes\": [\n                        \"categoriaModel.descricao\",\n                        \"descricao\"\n                    ],\n                    \"arguments\": null,\n                    \"defaultMessage\": \"descricao\",\n                    \"code\": \"descricao\"\n                }\n            ],\n            \"defaultMessage\": \"Obrigatorio uma descrição valida.\",\n            \"objectName\": \"categoriaModel\",\n            \"field\": \"descricao\",\n            \"rejectedValue\": \"\",\n            \"bindingFailure\": false,\n            \"code\": \"NotBlank\"\n        },\n        {\n            \"codes\": [\n                \"NotEmpty.categoriaModel.descricao\",\n                \"NotEmpty.descricao\",\n                \"NotEmpty.java.lang.String\",\n                \"NotEmpty\"\n            ],\n            \"arguments\": [\n                {\n                    \"codes\": [\n                        \"categoriaModel.descricao\",\n                        \"descricao\"\n                    ],\n                    \"arguments\": null,\n                    \"defaultMessage\": \"descricao\",\n                    \"code\": \"descricao\"\n                }\n            ],\n            \"defaultMessage\": \"não deve estar vazio\",\n            \"objectName\": \"categoriaModel\",\n            \"field\": \"descricao\",\n            \"rejectedValue\": \"\",\n            \"bindingFailure\": false,\n            \"code\": \"NotEmpty\"\n        },\n        {\n            \"codes\": [\n                \"NotBlank.categoriaModel.urlImagem\",\n                \"NotBlank.urlImagem\",\n                \"NotBlank.java.lang.String\",\n                \"NotBlank\"\n            ],\n            \"arguments\": [\n                {\n                    \"codes\": [\n                        \"categoriaModel.urlImagem\",\n                        \"urlImagem\"\n                    ],\n                    \"arguments\": null,\n                    \"defaultMessage\": \"urlImagem\",\n                    \"code\": \"urlImagem\"\n                }\n            ],\n            \"defaultMessage\": \"Obrigatorio uma descrição valida.\",\n            \"objectName\": \"categoriaModel\",\n            \"field\": \"urlImagem\",\n            \"rejectedValue\": \"\",\n            \"bindingFailure\": false,\n            \"code\": \"NotBlank\"\n        }\n    ],\n    \"path\": \"/categoria\"\n}"
						}
					]
				},
				{
					"name": "Salvar categoria descrição acima de 255 caracteres",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status Bad Request\", function () {\r",
									"    pm.response.to.be.badRequest;\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type está presente\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"tests[\"Validando se a mensagem de erro é correta\"] = responseBody === \"Alguns dos atributos excedeu o limites de 255 caracteres permitidos\";\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n    \"categoria\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea comodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\",\n    \"descricao\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea comodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\",\n    \"urlImagem\": \"https://images.unsplash.com/photo-1536667842290-7602f6a43a2b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\"\n}"
						},
						"url": {
							"raw": "{{servidor}}categoria",
							"host": [
								"{{servidor}}categoria"
							]
						}
					},
					"response": [
						{
							"name": "Salvar categoria descrição acima de 255 caracteres",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{   \n    \"categoria\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea comodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\",\n    \"descricao\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea comodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\",\n    \"urlImagem\": \"https://images.unsplash.com/photo-1536667842290-7602f6a43a2b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\"\n}"
								},
								"url": {
									"raw": "{{servidor}}categoria",
									"host": [
										"{{servidor}}categoria"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sun, 26 Mar 2023 13:53:34 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2023-03-26T13:53:34.126+00:00\",\n    \"status\": 400,\n    \"error\": \"Bad Request\",\n    \"trace\": \"org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public org.springframework.http.ResponseEntity com.DH.PI.controller.CategoriaController.save(com.DH.PI.model.CategoriaModel) throws java.sql.SQLException: [Field error in object 'categoriaModel' on field 'descricao': rejected value [Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea comodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.]; codes [Size.categoriaModel.descricao,Size.descricao,Size.java.lang.String,Size]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [categoriaModel.descricao,descricao]; arguments []; default message [descricao],254,0]; default message [Excedido numero maximo de caracteres]] \\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.resolveArgument(RequestResponseBodyMethodProcessor.java:144)\\r\\n\\tat org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:122)\\r\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:181)\\r\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:148)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:884)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)\\r\\n\\tat org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\\r\\n\\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1080)\\r\\n\\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:973)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1011)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)\\r\\n\\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:731)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)\\r\\n\\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:814)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:223)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:177)\\r\\n\\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)\\r\\n\\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)\\r\\n\\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:119)\\r\\n\\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\\r\\n\\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)\\r\\n\\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)\\r\\n\\tat org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:400)\\r\\n\\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)\\r\\n\\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:859)\\r\\n\\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1734)\\r\\n\\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)\\r\\n\\tat org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)\\r\\n\\tat org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)\\r\\n\\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\\r\\n\\tat java.base/java.lang.Thread.run(Thread.java:833)\\r\\n\",\n    \"message\": \"Validation failed for object='categoriaModel'. Error count: 1\",\n    \"errors\": [\n        {\n            \"codes\": [\n                \"Size.categoriaModel.descricao\",\n                \"Size.descricao\",\n                \"Size.java.lang.String\",\n                \"Size\"\n            ],\n            \"arguments\": [\n                {\n                    \"codes\": [\n                        \"categoriaModel.descricao\",\n                        \"descricao\"\n                    ],\n                    \"arguments\": null,\n                    \"defaultMessage\": \"descricao\",\n                    \"code\": \"descricao\"\n                },\n                254,\n                0\n            ],\n            \"defaultMessage\": \"Excedido numero maximo de caracteres\",\n            \"objectName\": \"categoriaModel\",\n            \"field\": \"descricao\",\n            \"rejectedValue\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea comodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\",\n            \"bindingFailure\": false,\n            \"code\": \"Size\"\n        }\n    ],\n    \"path\": \"/categoria\"\n}"
						}
					]
				},
				{
					"name": "Obter todas as categorias",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"O tempo de resposta é inferior a 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validando se a resposta é json\", function(){\r",
									"    pm.response.to.be.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{servidor}}categoria",
							"host": [
								"{{servidor}}categoria"
							]
						}
					},
					"response": [
						{
							"name": "Obter todas as categorias",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{servidor}}categoria",
									"host": [
										"{{servidor}}categoria"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sun, 26 Mar 2023 13:50:10 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 1,\n        \"categoria\": \"Hatchs\",\n        \"descricao\": \"Os hatchs são bons carros para motoristas iniciantes, já que seu menor tamanho ajuda na hora de fazer vagas e de andar pela cidade. Também costumam ter motores menos potentes, com a grande maioria tendo versões 1.0 como padrão.\",\n        \"urlImagem\": \"https://images.unsplash.com/photo-1536667842290-7602f6a43a2b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\",\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:8080/categoria/1\"\n            }\n        ]\n    },\n    {\n        \"id\": 2,\n        \"categoria\": \"Sedans\",\n        \"descricao\": \"São úteis para famílias que precisam de mais espaço nos bancos de trás para as crianças, pessoas que viajam regularmente e para quem quer mais conforto sem precisar investir muito.\",\n        \"urlImagem\": \"https://images.unsplash.com/photo-1494976388531-d1058494cdd8?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\",\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:8080/categoria/2\"\n            }\n        ]\n    },\n    {\n        \"id\": 3,\n        \"categoria\": \"SUVs\",\n        \"descricao\": \"As SUVs costumam ter porte avantajado, além de interior espaçoso e possibilidade de trafegar dentro e fora da cidade.\",\n        \"urlImagem\": \"https://images.unsplash.com/photo-1615063029891-497bebd4f03c?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1100&q=80\",\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:8080/categoria/3\"\n            }\n        ]\n    },\n    {\n        \"id\": 4,\n        \"categoria\": \"Picapes\",\n        \"descricao\": \"Esse tipo de carro é ideal para carregar grandes cargas, bons para quem viaja com grande bagagem, gosta de se aventurar no off-road ou precisa de um veículo mais robusto que um utilitário para dividir entre trabalho e lazer.\",\n        \"urlImagem\": \"https://images.unsplash.com/photo-1620071628712-379d473f2e0c?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=387&q=80\",\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:8080/categoria/4\"\n            }\n        ]\n    },\n    {\n        \"id\": 5,\n        \"categoria\": \"Utilitário\",\n        \"descricao\": \"Os utilitários são carros normalmente usados para trabalho, que possuem maior capacidade de carga e, consequentemente, mais potência para realizar os serviços necessários.\",\n        \"urlImagem\": \"https://images.unsplash.com/photo-1559416523-140ddc3d238c?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1151&q=80\",\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:8080/categoria/5\"\n            }\n        ]\n    }\n]"
						}
					]
				},
				{
					"name": "Obter categoria por id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var response_body = pm.response.json();\r",
									"pm.test(\"Validating if the answer is json\", function(){\r",
									"    pm.response.to.be.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Validando se a categoria é a mesma cadastrada\", function(){\r",
									"    pm.expect(\"Hatchs\").to.eql(response_body.categoria)\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{servidor}}categoria/:id",
							"host": [
								"{{servidor}}categoria"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						}
					},
					"response": [
						{
							"name": "Obter categoria por id",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{servidor}}categoria/:id",
									"host": [
										"{{servidor}}categoria"
									],
									"path": [
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "1"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/hal+json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sun, 26 Mar 2023 13:50:17 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1,\n    \"categoria\": \"Hatchs\",\n    \"descricao\": \"Os hatchs são bons carros para motoristas iniciantes, já que seu menor tamanho ajuda na hora de fazer vagas e de andar pela cidade. Também costumam ter motores menos potentes, com a grande maioria tendo versões 1.0 como padrão.\",\n    \"urlImagem\": \"https://images.unsplash.com/photo-1536667842290-7602f6a43a2b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\",\n    \"_links\": {\n        \"lista de categorias\": {\n            \"href\": \"http://localhost:8080/categoria\"\n        }\n    }\n}"
						}
					]
				},
				{
					"name": "Obter categoria com id inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status Not Found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.be.notFound;\r",
									"});\r",
									"\r",
									"tests[\"Body is correct\"] = responseBody === \"Id não encontrado\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{servidor}}categoria/:id",
							"host": [
								"{{servidor}}categoria"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "10"
								}
							]
						}
					},
					"response": [
						{
							"name": "Obter categoria com id inexistente",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{servidor}}categoria/:id",
									"host": [
										"{{servidor}}categoria"
									],
									"path": [
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "10"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "text/plain;charset=UTF-8"
								},
								{
									"key": "Content-Length",
									"value": "18"
								},
								{
									"key": "Date",
									"value": "Sun, 26 Mar 2023 13:54:08 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Id não encontrado"
						}
					]
				},
				{
					"name": "Editar categoria",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful Patch request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type está presente\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"var response_body = pm.response.json();\r",
									"pm.test(\"Validando se a categoria é a mesma cadastrada\", function(){\r",
									"    pm.expect(\"Teste editar categoria\").to.eql(response_body.categoria)\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n\t\"id\": \"3\",\n    \"categoria\": \"Teste editar categoria\",\n    \"descricao\": \"Os hatchs são bons carros para motoristas iniciantes, já que seu menor tamanho ajuda na hora de fazer vagas e de andar pela cidade. Também costumam ter motores menos potentes, com a grande maioria tendo versões 1.0 como padrão.\",\n    \"urlImagem\": \"https://images.unsplash.com/photo-1536667842290-7602f6a43a2b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\"\n}"
						},
						"url": {
							"raw": "{{servidor}}categoria",
							"host": [
								"{{servidor}}categoria"
							]
						}
					},
					"response": [
						{
							"name": "Editar categoria",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{   \n\t\"id\": \"3\",\n    \"categoria\": \"Teste editar categoria\",\n    \"descricao\": \"Os hatchs são bons carros para motoristas iniciantes, já que seu menor tamanho ajuda na hora de fazer vagas e de andar pela cidade. Também costumam ter motores menos potentes, com a grande maioria tendo versões 1.0 como padrão.\",\n    \"urlImagem\": \"https://images.unsplash.com/photo-1536667842290-7602f6a43a2b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\"\n}"
								},
								"url": {
									"raw": "{{servidor}}categoria",
									"host": [
										"{{servidor}}categoria"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/hal+json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sun, 26 Mar 2023 13:54:18 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 3,\n    \"categoria\": \"Teste editar categoria\",\n    \"descricao\": \"Os hatchs são bons carros para motoristas iniciantes, já que seu menor tamanho ajuda na hora de fazer vagas e de andar pela cidade. Também costumam ter motores menos potentes, com a grande maioria tendo versões 1.0 como padrão.\",\n    \"urlImagem\": \"https://images.unsplash.com/photo-1536667842290-7602f6a43a2b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\"\n}"
						}
					]
				},
				{
					"name": "Editar categoria com id inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status Not found\", function () {\r",
									"    pm.response.to.be.notFound;   \r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type é presente\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"tests[\"Validando se a mensagem de erro é correta\"] = responseBody === \"Categoria não encontrada\";\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\n{   \n\t\"id\": \"10\",\n    \"categoria\": \"Hatchs\",\n    \"descricao\": \"Os hatchs são bons carros para motoristas iniciantes, já que seu menor tamanho ajuda na hora de fazer vagas e de andar pela cidade. Também costumam ter motores menos potentes, com a grande maioria tendo versões 1.0 como padrão.\",\n    \"urlImagem\": \"https://images.unsplash.com/photo-1536667842290-7602f6a43a2b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\"\n}"
						},
						"url": {
							"raw": "{{servidor}}categoria",
							"host": [
								"{{servidor}}categoria"
							]
						}
					},
					"response": [
						{
							"name": "Editar categoria com id inexistente",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\n{   \n\t\"id\": \"10\",\n    \"categoria\": \"Hatchs\",\n    \"descricao\": \"Os hatchs são bons carros para motoristas iniciantes, já que seu menor tamanho ajuda na hora de fazer vagas e de andar pela cidade. Também costumam ter motores menos potentes, com a grande maioria tendo versões 1.0 como padrão.\",\n    \"urlImagem\": \"https://images.unsplash.com/photo-1536667842290-7602f6a43a2b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\"\n}"
								},
								"url": {
									"raw": "{{servidor}}categoria",
									"host": [
										"{{servidor}}categoria"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "text/plain;charset=UTF-8"
								},
								{
									"key": "Content-Length",
									"value": "25"
								},
								{
									"key": "Date",
									"value": "Sun, 26 Mar 2023 13:54:36 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Categoria não encontrada"
						}
					]
				},
				{
					"name": "Editar categoria para um categoria já existente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content-Type está presente\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Código de status 409\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"    \r",
									"});\r",
									"\r",
									"tests[\"Validando se a mensagem de erro é correta\"] = responseBody === \"Categoria já cadastrada\";\r",
									"\r",
									"// pm.test(\"Validando se a resposta é json\", function(){\r",
									"//     pm.response.to.be.withBody;\r",
									"//     pm.response.to.be.json;\r",
									"// });\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\n{   \n\t\"id\": \"2\",\n    \"categoria\": \"Hatchs\",\n    \"descricao\": \"Os hatchs são bons carros para motoristas iniciantes, já que seu menor tamanho ajuda na hora de fazer vagas e de andar pela cidade. Também costumam ter motores menos potentes, com a grande maioria tendo versões 1.0 como padrão.\",\n    \"urlImagem\": \"https://images.unsplash.com/photo-1536667842290-7602f6a43a2b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\"\n}"
						},
						"url": {
							"raw": "{{servidor}}categoria",
							"host": [
								"{{servidor}}categoria"
							]
						}
					},
					"response": [
						{
							"name": "Editar categoria para um categoria já existente",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\n{   \n\t\"id\": \"2\",\n    \"categoria\": \"Hatchs\",\n    \"descricao\": \"Os hatchs são bons carros para motoristas iniciantes, já que seu menor tamanho ajuda na hora de fazer vagas e de andar pela cidade. Também costumam ter motores menos potentes, com a grande maioria tendo versões 1.0 como padrão.\",\n    \"urlImagem\": \"https://images.unsplash.com/photo-1536667842290-7602f6a43a2b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\"\n}"
								},
								"url": {
									"raw": "{{servidor}}categoria",
									"host": [
										"{{servidor}}categoria"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "text/plain;charset=UTF-8"
								},
								{
									"key": "Content-Length",
									"value": "24"
								},
								{
									"key": "Date",
									"value": "Sun, 26 Mar 2023 13:54:43 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Categoria já cadastrada"
						}
					]
				},
				{
					"name": "Editar categoria para um categoria já existente Case Sensitive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status conflict\", function () {\r",
									"    pm.response.to.be.clientError;   \r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type está presente\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"tests[\"Body is correct\"] = responseBody === \"Categoria já cadastrada\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\n{   \n\t\"id\": \"2\",\n    \"categoria\": \"hatchs\",\n    \"descricao\": \"Os hatchs são bons carros para motoristas iniciantes, já que seu menor tamanho ajuda na hora de fazer vagas e de andar pela cidade. Também costumam ter motores menos potentes, com a grande maioria tendo versões 1.0 como padrão.\",\n    \"urlImagem\": \"https://images.unsplash.com/photo-1536667842290-7602f6a43a2b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\"\n}"
						},
						"url": {
							"raw": "{{servidor}}categoria",
							"host": [
								"{{servidor}}categoria"
							]
						}
					},
					"response": [
						{
							"name": "Editar categoria para um categoria já existente Case Sensitive",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\n{   \n\t\"id\": \"2\",\n    \"categoria\": \"hatchs\",\n    \"descricao\": \"Os hatchs são bons carros para motoristas iniciantes, já que seu menor tamanho ajuda na hora de fazer vagas e de andar pela cidade. Também costumam ter motores menos potentes, com a grande maioria tendo versões 1.0 como padrão.\",\n    \"urlImagem\": \"https://images.unsplash.com/photo-1536667842290-7602f6a43a2b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\"\n}"
								},
								"url": {
									"raw": "{{servidor}}categoria",
									"host": [
										"{{servidor}}categoria"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "text/plain;charset=UTF-8"
								},
								{
									"key": "Content-Length",
									"value": "24"
								},
								{
									"key": "Date",
									"value": "Sun, 26 Mar 2023 13:54:53 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Categoria já cadastrada"
						}
					]
				},
				{
					"name": "Editar categoria descrição acima de 255 caracteres",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status Bad Request\", function () {\r",
									"    pm.response.to.be.badRequest;\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type está presente\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"tests[\"Validando se a mensagem de erro é correta\"] = responseBody === \"Alguns dos atributos excedeu o limites de 255 caracteres permitidos\";\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\n{   \n\t\"id\": \"2\",\n    \"categoria\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea comodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\",\n    \"descricao\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea comodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\",\n    \"urlImagem\": \"https://images.unsplash.com/photo-1536667842290-7602f6a43a2b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\"\n}"
						},
						"url": {
							"raw": "{{servidor}}categoria",
							"host": [
								"{{servidor}}categoria"
							]
						}
					},
					"response": [
						{
							"name": "Editar categoria descrição acima de 255 caracteres",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\n{   \n\t\"id\": \"2\",\n    \"categoria\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea comodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\",\n    \"descricao\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea comodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\",\n    \"urlImagem\": \"https://images.unsplash.com/photo-1536667842290-7602f6a43a2b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\"\n}"
								},
								"url": {
									"raw": "{{servidor}}categoria",
									"host": [
										"{{servidor}}categoria"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "text/plain;charset=UTF-8"
								},
								{
									"key": "Content-Length",
									"value": "67"
								},
								{
									"key": "Date",
									"value": "Sun, 26 Mar 2023 13:55:03 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "Alguns dos atributos excedeu o limites de 255 caracteres permitidos"
						}
					]
				},
				{
					"name": "Apagar categoria",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// pathVariableId = pm.variables.get(\"$endpointDeletarId\");\r",
									"// tests[\"Validando se a mensagem de erro é correta\"] = responseBody === (`Excluido categoria de ID: {$pathVariableId}`);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{servidor}}categoria?id=2",
							"host": [
								"{{servidor}}categoria"
							],
							"query": [
								{
									"key": "id",
									"value": "2"
								}
							]
						}
					},
					"response": [
						{
							"name": "Apagar categoria",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{servidor}}categoria?id=1",
									"host": [
										"{{servidor}}categoria"
									],
									"query": [
										{
											"key": "id",
											"value": "1"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "text/plain;charset=UTF-8"
								},
								{
									"key": "Content-Length",
									"value": "27"
								},
								{
									"key": "Date",
									"value": "Sun, 26 Mar 2023 13:56:15 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Excluido categoria de ID: 1"
						}
					]
				},
				{
					"name": "Apagar categoria com ID inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status Not Found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.be.notFound;\r",
									"});\r",
									"\r",
									"tests[\"Validando se a mensagem de erro é correta\"] = responseBody === \"Categoria não encontrada\";\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{servidor}}categoria?id=10",
							"host": [
								"{{servidor}}categoria"
							],
							"query": [
								{
									"key": "id",
									"value": "10"
								}
							]
						}
					},
					"response": [
						{
							"name": "Apagar categoria com ID inexistente",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{servidor}}categoria?id=10",
									"host": [
										"{{servidor}}categoria"
									],
									"query": [
										{
											"key": "id",
											"value": "10"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "text/plain;charset=UTF-8"
								},
								{
									"key": "Content-Length",
									"value": "25"
								},
								{
									"key": "Date",
									"value": "Sun, 26 Mar 2023 13:55:54 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Categoria não encontrada"
						}
					]
				}
			]
		},
		{
			"name": "/cidade",
			"item": [
				{
					"name": "Obter todas as cidades quando não existe nada salvo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.be.notFound;\r",
									"});\r",
									"\r",
									"pm.test(\"O tempo de resposta é inferior a 400ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Validando se tem retorno a solicitação\", function(){\r",
									"    pm.response.to.be.withBody;   \r",
									"});\r",
									"\r",
									"tests[\"Body is correct\"] = responseBody === \"Nenhuma cidade cadastrada\";\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{servidor}}cidade",
							"host": [
								"{{servidor}}cidade"
							]
						}
					},
					"response": [
						{
							"name": "Obter todas as cidades quando não existe nada salvo",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{servidor}}cidade",
									"host": [
										"{{servidor}}cidade"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "text/plain;charset=UTF-8"
								},
								{
									"key": "Content-Length",
									"value": "25"
								},
								{
									"key": "Date",
									"value": "Fri, 24 Mar 2023 02:08:06 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Nenhuma cidade cadastrada"
						}
					]
				},
				{
					"name": "Salvar cidade 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// pm.test(\"Código de status 201\", function () {\r",
									"//     pm.response.to.have.status(201);\r",
									"// });\r",
									"\r",
									"// pm.test(\"Solicitação POST bem-sucedida\", function () {\r",
									"//     pm.expect(pm.response.code).to.be.oneOf([201]);\r",
									"// });\r",
									"\r",
									"// var response_body = pm.response.json();\r",
									"// pm.test(\"Validando se a resposta é json\", function(){\r",
									"//     pm.response.to.be.status(201);\r",
									"//     pm.response.to.be.withBody;\r",
									"//     pm.response.to.be.json;\r",
									"// });\r",
									"\r",
									"// pm.test(\"Validando se o nome da cidade é a mesma cadastrada\", function(){\r",
									"//     pm.expect(\"Belo Horizonte\").to.eql(response_body.nomeCidade)\r",
									"// })\r",
									"\r",
									"// pm.test(\"Validando se o pais é o mesmo cadastrado\", function(){\r",
									"//     pm.expect(\"Brasil\").to.eql(response_body.paisCidade)\r",
									"// })\r",
									"\r",
									"pm.test(\"Código de status 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Solicitação POST bem-sucedida\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Location no header está presente\", function () {\r",
									"    pm.response.to.have.header(\"Location\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"nomeCidade\": \"Belo Horizonte\",\r\n    \"paisCidade\": \"Brasil\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{servidor}}cidade",
							"host": [
								"{{servidor}}cidade"
							]
						},
						"description": "Está requisição deve receber \"categoria\", \"descrição\" e \"URL de uma imagem\", para retornar a categoria salva com ID"
					},
					"response": [
						{
							"name": "Salvar cidade 1",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{   \r\n    \"nomeCidade\": \"Belo Horizonte\",\r\n    \"paisCidade\": \"Brasil\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{servidor}}cidade",
									"host": [
										"{{servidor}}cidade"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "location",
									"value": "http://localhost:8080/categorias"
								},
								{
									"key": "Content-Type",
									"value": "application/hal+json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 24 Mar 2023 02:08:29 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"idCidade\": 1,\n    \"nomeCidade\": \"Belo Horizonte\",\n    \"paisCidade\": \"Brasil\"\n}"
						}
					]
				},
				{
					"name": "Salvar cidade 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// pm.test(\"Código de status 201\", function () {\r",
									"//     pm.response.to.have.status(201);\r",
									"// });\r",
									"\r",
									"// pm.test(\"Solicitação POST bem-sucedida\", function () {\r",
									"//     pm.expect(pm.response.code).to.be.oneOf([201]);\r",
									"// });\r",
									"\r",
									"// var response_body = pm.response.json();\r",
									"// pm.test(\"Validando se a resposta é json\", function(){\r",
									"//     pm.response.to.be.status(201);\r",
									"//     pm.response.to.be.withBody;\r",
									"//     pm.response.to.be.json;\r",
									"// });\r",
									"\r",
									"// pm.test(\"Validando se o nome da cidade é a mesma cadastrada\", function(){\r",
									"//     pm.expect(\"Rio de Janeiro\").to.eql(response_body.nomeCidade)\r",
									"// })\r",
									"\r",
									"// pm.test(\"Validando se o pais é o mesmo cadastrado\", function(){\r",
									"//     pm.expect(\"Brasil\").to.eql(response_body.paisCidade)\r",
									"// })\r",
									"\r",
									"pm.test(\"Código de status 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Solicitação POST bem-sucedida\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Location no header está presente\", function () {\r",
									"    pm.response.to.have.header(\"Location\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"nomeCidade\": \"Rio de Janeiro\",\r\n    \"paisCidade\": \"Brasil\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{servidor}}cidade",
							"host": [
								"{{servidor}}cidade"
							]
						},
						"description": "Está requisição deve receber \"categoria\", \"descrição\" e \"URL de uma imagem\", para retornar a categoria salva com ID"
					},
					"response": [
						{
							"name": "Salvar cidade 2",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{   \r\n    \"nomeCidade\": \"Rio de Janeiro\",\r\n    \"paisCidade\": \"Brasil\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{servidor}}cidade",
									"host": [
										"{{servidor}}cidade"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "location",
									"value": "http://localhost:8080/categorias"
								},
								{
									"key": "Content-Type",
									"value": "application/hal+json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 24 Mar 2023 02:09:39 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"idCidade\": 2,\n    \"nomeCidade\": \"Rio de Janeiro\",\n    \"paisCidade\": \"Brasil\"\n}"
						}
					]
				},
				{
					"name": "Salvar cidade 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Solicitação POST bem-sucedida\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Location no header está presente\", function () {\r",
									"    pm.response.to.have.header(\"Location\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"nomeCidade\": \"São Paulo\",\r\n    \"paisCidade\": \"Brasil\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{servidor}}cidade",
							"host": [
								"{{servidor}}cidade"
							]
						},
						"description": "Está requisição deve receber \"categoria\", \"descrição\" e \"URL de uma imagem\", para retornar a categoria salva com ID"
					},
					"response": [
						{
							"name": "Salvar cidade 3",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{   \r\n    \"nomeCidade\": \"São Paulo\",\r\n    \"paisCidade\": \"Brasil\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{servidor}}cidade",
									"host": [
										"{{servidor}}cidade"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "location",
									"value": "http://localhost:8080/categorias"
								},
								{
									"key": "Content-Type",
									"value": "application/hal+json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 25 Mar 2023 16:24:34 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"idCidade\": 3,\n    \"nomeCidade\": \"São Paulo\",\n    \"paisCidade\": \"Brasil\"\n}"
						}
					]
				},
				{
					"name": "Salvar cidade ja cadastrada",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status 409\", function () {\r",
									"pm.collectionVariables.get(\"variable_key\");\r",
									"    pm.response.to.have.status(409);\r",
									"    pm.response.to.be.clientError\r",
									"});\r",
									"\r",
									"tests[\"Body is correct\"] = responseBody === \"Cidade já cadastrada\";\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"nomeCidade\": \"Belo Horizonte\",\r\n    \"paisCidade\": \"Brasil\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{servidor}}cidade",
							"host": [
								"{{servidor}}cidade"
							]
						},
						"description": "Está requisição deve receber \"categoria\", \"descrição\" e \"URL de uma imagem\", para retornar a categoria salva com ID"
					},
					"response": [
						{
							"name": "Salvar cidade ja cadastrada",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{   \r\n    \"nomeCidade\": \"Belo Horizonte\",\r\n    \"paisCidade\": \"Brasil\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{servidor}}cidade",
									"host": [
										"{{servidor}}cidade"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "text/plain;charset=UTF-8"
								},
								{
									"key": "Content-Length",
									"value": "21"
								},
								{
									"key": "Date",
									"value": "Fri, 24 Mar 2023 02:19:10 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Cidade já cadastrada"
						}
					]
				},
				{
					"name": "Salvar cidade ja cadastrada case sensitive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status 409\", function () {\r",
									"pm.collectionVariables.get(\"variable_key\");\r",
									"    pm.response.to.have.status(409);\r",
									"    pm.response.to.be.clientError\r",
									"});\r",
									"\r",
									"tests[\"Body is correct\"] = responseBody === \"Cidade já cadastrada\";\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"nomeCidade\": \"belo horizonte\",\r\n    \"paisCidade\": \"brasil\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{servidor}}cidade",
							"host": [
								"{{servidor}}cidade"
							]
						},
						"description": "Está requisição deve receber \"categoria\", \"descrição\" e \"URL de uma imagem\", para retornar a categoria salva com ID"
					},
					"response": [
						{
							"name": "Salvar cidade ja cadastrada",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{   \r\n    \"nomeCidade\": \"Belo Horizonte\",\r\n    \"paisCidade\": \"Brasil\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{servidor}}cidade",
									"host": [
										"{{servidor}}cidade"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "text/plain;charset=UTF-8"
								},
								{
									"key": "Content-Length",
									"value": "21"
								},
								{
									"key": "Date",
									"value": "Fri, 24 Mar 2023 02:19:10 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Cidade já cadastrada"
						}
					]
				},
				{
					"name": "Salvar cidade com campos em branco",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.be.badRequest\r",
									"});\r",
									"\r",
									"tests[\"Body is correct\"] = responseBody === \"Verifique se alguns dos atributos do objeto estão vazios\";\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"nomeCidade\": \"\",\r\n    \"paisCidade\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{servidor}}cidade",
							"host": [
								"{{servidor}}cidade"
							]
						}
					},
					"response": [
						{
							"name": "Salvar cidade com campos em branco",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{   \r\n    \"nomeCidade\": \"\",\r\n    \"paisCidade\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{servidor}}cidade",
									"host": [
										"{{servidor}}cidade"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 24 Mar 2023 02:15:05 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2023-03-24T02:15:05.304+00:00\",\n    \"status\": 400,\n    \"error\": \"Bad Request\",\n    \"trace\": \"org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public org.springframework.http.ResponseEntity com.DH.PI.controller.CidadeController.save(com.DH.PI.model.CidadeModel) with 4 errors: [Field error in object 'cidadeModel' on field 'paisCidade': rejected value []; codes [NotBlank.cidadeModel.paisCidade,NotBlank.paisCidade,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [cidadeModel.paisCidade,paisCidade]; arguments []; default message [paisCidade]]; default message [Obrigatorio uma descrição valida.]] [Field error in object 'cidadeModel' on field 'nomeCidade': rejected value []; codes [NotBlank.cidadeModel.nomeCidade,NotBlank.nomeCidade,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [cidadeModel.nomeCidade,nomeCidade]; arguments []; default message [nomeCidade]]; default message [Obrigatorio uma descrição valida.]] [Field error in object 'cidadeModel' on field 'nomeCidade': rejected value []; codes [NotEmpty.cidadeModel.nomeCidade,NotEmpty.nomeCidade,NotEmpty.java.lang.String,NotEmpty]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [cidadeModel.nomeCidade,nomeCidade]; arguments []; default message [nomeCidade]]; default message [não deve estar vazio]] [Field error in object 'cidadeModel' on field 'paisCidade': rejected value []; codes [NotEmpty.cidadeModel.paisCidade,NotEmpty.paisCidade,NotEmpty.java.lang.String,NotEmpty]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [cidadeModel.paisCidade,paisCidade]; arguments []; default message [paisCidade]]; default message [não deve estar vazio]] \\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.resolveArgument(RequestResponseBodyMethodProcessor.java:144)\\r\\n\\tat org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:122)\\r\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:181)\\r\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:148)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:884)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)\\r\\n\\tat org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\\r\\n\\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1080)\\r\\n\\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:973)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1011)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)\\r\\n\\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:731)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)\\r\\n\\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:814)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:223)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:177)\\r\\n\\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)\\r\\n\\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)\\r\\n\\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:119)\\r\\n\\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\\r\\n\\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)\\r\\n\\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)\\r\\n\\tat org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:400)\\r\\n\\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)\\r\\n\\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:859)\\r\\n\\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1734)\\r\\n\\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)\\r\\n\\tat org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)\\r\\n\\tat org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)\\r\\n\\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\\r\\n\\tat java.base/java.lang.Thread.run(Thread.java:833)\\r\\n\",\n    \"message\": \"Validation failed for object='cidadeModel'. Error count: 4\",\n    \"errors\": [\n        {\n            \"codes\": [\n                \"NotBlank.cidadeModel.paisCidade\",\n                \"NotBlank.paisCidade\",\n                \"NotBlank.java.lang.String\",\n                \"NotBlank\"\n            ],\n            \"arguments\": [\n                {\n                    \"codes\": [\n                        \"cidadeModel.paisCidade\",\n                        \"paisCidade\"\n                    ],\n                    \"arguments\": null,\n                    \"defaultMessage\": \"paisCidade\",\n                    \"code\": \"paisCidade\"\n                }\n            ],\n            \"defaultMessage\": \"Obrigatorio uma descrição valida.\",\n            \"objectName\": \"cidadeModel\",\n            \"field\": \"paisCidade\",\n            \"rejectedValue\": \"\",\n            \"bindingFailure\": false,\n            \"code\": \"NotBlank\"\n        },\n        {\n            \"codes\": [\n                \"NotBlank.cidadeModel.nomeCidade\",\n                \"NotBlank.nomeCidade\",\n                \"NotBlank.java.lang.String\",\n                \"NotBlank\"\n            ],\n            \"arguments\": [\n                {\n                    \"codes\": [\n                        \"cidadeModel.nomeCidade\",\n                        \"nomeCidade\"\n                    ],\n                    \"arguments\": null,\n                    \"defaultMessage\": \"nomeCidade\",\n                    \"code\": \"nomeCidade\"\n                }\n            ],\n            \"defaultMessage\": \"Obrigatorio uma descrição valida.\",\n            \"objectName\": \"cidadeModel\",\n            \"field\": \"nomeCidade\",\n            \"rejectedValue\": \"\",\n            \"bindingFailure\": false,\n            \"code\": \"NotBlank\"\n        },\n        {\n            \"codes\": [\n                \"NotEmpty.cidadeModel.nomeCidade\",\n                \"NotEmpty.nomeCidade\",\n                \"NotEmpty.java.lang.String\",\n                \"NotEmpty\"\n            ],\n            \"arguments\": [\n                {\n                    \"codes\": [\n                        \"cidadeModel.nomeCidade\",\n                        \"nomeCidade\"\n                    ],\n                    \"arguments\": null,\n                    \"defaultMessage\": \"nomeCidade\",\n                    \"code\": \"nomeCidade\"\n                }\n            ],\n            \"defaultMessage\": \"não deve estar vazio\",\n            \"objectName\": \"cidadeModel\",\n            \"field\": \"nomeCidade\",\n            \"rejectedValue\": \"\",\n            \"bindingFailure\": false,\n            \"code\": \"NotEmpty\"\n        },\n        {\n            \"codes\": [\n                \"NotEmpty.cidadeModel.paisCidade\",\n                \"NotEmpty.paisCidade\",\n                \"NotEmpty.java.lang.String\",\n                \"NotEmpty\"\n            ],\n            \"arguments\": [\n                {\n                    \"codes\": [\n                        \"cidadeModel.paisCidade\",\n                        \"paisCidade\"\n                    ],\n                    \"arguments\": null,\n                    \"defaultMessage\": \"paisCidade\",\n                    \"code\": \"paisCidade\"\n                }\n            ],\n            \"defaultMessage\": \"não deve estar vazio\",\n            \"objectName\": \"cidadeModel\",\n            \"field\": \"paisCidade\",\n            \"rejectedValue\": \"\",\n            \"bindingFailure\": false,\n            \"code\": \"NotEmpty\"\n        }\n    ],\n    \"path\": \"/cidade\"\n}"
						}
					]
				},
				{
					"name": "Salvar cidade  com campos acima de 255 caracteres",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status Bad Request\", function () {\r",
									"    pm.response.to.be.badRequest;\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type está presente\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"tests[\"Body is correct\"] = responseBody === \"Alguns dos atributos excedeu o limites de 255 caracteres permitidos\";\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n\t\"nomeCidade\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea comodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\",\n    \"paisCidade\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea comodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"\n}"
						},
						"url": {
							"raw": "{{servidor}}cidade",
							"host": [
								"{{servidor}}cidade"
							]
						}
					},
					"response": [
						{
							"name": "Salvar cidade  com campos acima de 255 caracteres",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{   \n\t\"nomeCidade\": \"Os hatchs são bons carros para motoristas iniciantes, já que seu menor tamanho ajuda na hora de fazer vagas e de andar pela cidade. Também costumam ter motores menos potentes, com a grande maioria tendo versões 1.0 como padrão. A economia de combustível é outro diferencial.\",\n    \"paisCidade\": \"Os hatchs são bons carros para motoristas iniciantes, já que seu menor tamanho ajuda na hora de fazer vagas e de andar pela cidade. Também costumam ter motores menos potentes, com a grande maioria tendo versões 1.0 como padrão. A economia de combustível é outro diferencial.\"\n}"
								},
								"url": {
									"raw": "{{servidor}}cidade",
									"host": [
										"{{servidor}}cidade"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 25 Mar 2023 12:36:15 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2023-03-25T12:36:15.512+00:00\",\n    \"status\": 400,\n    \"error\": \"Bad Request\",\n    \"trace\": \"org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public org.springframework.http.ResponseEntity com.DH.PI.controller.CidadeController.save(com.DH.PI.model.CidadeModel) with 2 errors: [Field error in object 'cidadeModel' on field 'nomeCidade': rejected value [Os hatchs são bons carros para motoristas iniciantes, já que seu menor tamanho ajuda na hora de fazer vagas e de andar pela cidade. Também costumam ter motores menos potentes, com a grande maioria tendo versões 1.0 como padrão. A economia de combustível é outro diferencial.]; codes [Size.cidadeModel.nomeCidade,Size.nomeCidade,Size.java.lang.String,Size]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [cidadeModel.nomeCidade,nomeCidade]; arguments []; default message [nomeCidade],254,0]; default message [Excedido numero maximo de caracteres]] [Field error in object 'cidadeModel' on field 'paisCidade': rejected value [Os hatchs são bons carros para motoristas iniciantes, já que seu menor tamanho ajuda na hora de fazer vagas e de andar pela cidade. Também costumam ter motores menos potentes, com a grande maioria tendo versões 1.0 como padrão. A economia de combustível é outro diferencial.]; codes [Size.cidadeModel.paisCidade,Size.paisCidade,Size.java.lang.String,Size]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [cidadeModel.paisCidade,paisCidade]; arguments []; default message [paisCidade],254,0]; default message [Excedido numero maximo de caracteres]] \\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.resolveArgument(RequestResponseBodyMethodProcessor.java:144)\\r\\n\\tat org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:122)\\r\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:181)\\r\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:148)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:884)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)\\r\\n\\tat org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\\r\\n\\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1080)\\r\\n\\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:973)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1011)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)\\r\\n\\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:731)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)\\r\\n\\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:814)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:223)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:177)\\r\\n\\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)\\r\\n\\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)\\r\\n\\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:119)\\r\\n\\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\\r\\n\\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)\\r\\n\\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)\\r\\n\\tat org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:400)\\r\\n\\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)\\r\\n\\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:859)\\r\\n\\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1734)\\r\\n\\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)\\r\\n\\tat org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)\\r\\n\\tat org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)\\r\\n\\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\\r\\n\\tat java.base/java.lang.Thread.run(Thread.java:833)\\r\\n\",\n    \"message\": \"Validation failed for object='cidadeModel'. Error count: 2\",\n    \"errors\": [\n        {\n            \"codes\": [\n                \"Size.cidadeModel.nomeCidade\",\n                \"Size.nomeCidade\",\n                \"Size.java.lang.String\",\n                \"Size\"\n            ],\n            \"arguments\": [\n                {\n                    \"codes\": [\n                        \"cidadeModel.nomeCidade\",\n                        \"nomeCidade\"\n                    ],\n                    \"arguments\": null,\n                    \"defaultMessage\": \"nomeCidade\",\n                    \"code\": \"nomeCidade\"\n                },\n                254,\n                0\n            ],\n            \"defaultMessage\": \"Excedido numero maximo de caracteres\",\n            \"objectName\": \"cidadeModel\",\n            \"field\": \"nomeCidade\",\n            \"rejectedValue\": \"Os hatchs são bons carros para motoristas iniciantes, já que seu menor tamanho ajuda na hora de fazer vagas e de andar pela cidade. Também costumam ter motores menos potentes, com a grande maioria tendo versões 1.0 como padrão. A economia de combustível é outro diferencial.\",\n            \"bindingFailure\": false,\n            \"code\": \"Size\"\n        },\n        {\n            \"codes\": [\n                \"Size.cidadeModel.paisCidade\",\n                \"Size.paisCidade\",\n                \"Size.java.lang.String\",\n                \"Size\"\n            ],\n            \"arguments\": [\n                {\n                    \"codes\": [\n                        \"cidadeModel.paisCidade\",\n                        \"paisCidade\"\n                    ],\n                    \"arguments\": null,\n                    \"defaultMessage\": \"paisCidade\",\n                    \"code\": \"paisCidade\"\n                },\n                254,\n                0\n            ],\n            \"defaultMessage\": \"Excedido numero maximo de caracteres\",\n            \"objectName\": \"cidadeModel\",\n            \"field\": \"paisCidade\",\n            \"rejectedValue\": \"Os hatchs são bons carros para motoristas iniciantes, já que seu menor tamanho ajuda na hora de fazer vagas e de andar pela cidade. Também costumam ter motores menos potentes, com a grande maioria tendo versões 1.0 como padrão. A economia de combustível é outro diferencial.\",\n            \"bindingFailure\": false,\n            \"code\": \"Size\"\n        }\n    ],\n    \"path\": \"/cidade\"\n}"
						}
					]
				},
				{
					"name": "Obter todas as cidades",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"O tempo de resposta é inferior a 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validando se a resposta é json\", function(){\r",
									"    pm.response.to.be.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{servidor}}cidade",
							"host": [
								"{{servidor}}cidade"
							]
						}
					},
					"response": [
						{
							"name": "Obter todas as cidades",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{servidor}}cidade",
									"host": [
										"{{servidor}}cidade"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 25 Mar 2023 14:37:23 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"idCidade\": 1,\n        \"nomeCidade\": \"Belo Horizonte\",\n        \"paisCidade\": \"Brasil\",\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:8080/categoria/1\"\n            }\n        ]\n    },\n    {\n        \"idCidade\": 2,\n        \"nomeCidade\": \"Rio de Janeiro\",\n        \"paisCidade\": \"Brasil\",\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:8080/categoria/2\"\n            }\n        ]\n    }\n]"
						}
					]
				},
				{
					"name": "Obter cidade por id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var response_body = pm.response.json();\r",
									"pm.test(\"Validating if the answer is json\", function(){\r",
									"    pm.response.to.be.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Validando se a categoria é a mesma cadastrada\", function(){\r",
									"    pm.expect(\"Belo Horizonte\").to.eql(response_body.nomeCidade)\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{servidor}}cidade/:id",
							"host": [
								"{{servidor}}cidade"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						}
					},
					"response": [
						{
							"name": "Obter cidade por id",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{servidor}}cidade/:id",
									"host": [
										"{{servidor}}cidade"
									],
									"path": [
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "1"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 25 Mar 2023 14:37:41 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"idCidade\": 1,\n    \"nomeCidade\": \"Belo Horizonte\",\n    \"paisCidade\": \"Brasil\",\n    \"links\": [\n        {\n            \"rel\": \"lista de cidades\",\n            \"href\": \"http://localhost:8080/produto\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Obter cidade com id inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status Not Found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.be.notFound;\r",
									"});\r",
									"\r",
									"tests[\"Body is correct\"] = responseBody === \"cidade não encontrada\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{servidor}}cidade/:id",
							"host": [
								"{{servidor}}cidade"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "10"
								}
							]
						}
					},
					"response": [
						{
							"name": "Obter cidade com id inexistente",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{servidor}}cidade/:id",
									"host": [
										"{{servidor}}cidade"
									],
									"path": [
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "10"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "text/plain;charset=UTF-8"
								},
								{
									"key": "Content-Length",
									"value": "22"
								},
								{
									"key": "Date",
									"value": "Sat, 25 Mar 2023 14:37:51 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "cidade não encontrada"
						}
					]
				},
				{
					"name": "Editar cidade",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful Patch request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type está presente\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"var response_body = pm.response.json();\r",
									"pm.test(\"Validando se a cidade é a mesma cadastrada\", function(){\r",
									"    pm.expect(\"Teste editar cidade\").to.eql(response_body.nomeCidade)\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n    \"idCidade\": 1, \n    \"nomeCidade\": \"Teste editar cidade\",\n    \"paisCidade\": \"País editado\"\n}"
						},
						"url": {
							"raw": "{{servidor}}cidade",
							"host": [
								"{{servidor}}cidade"
							]
						}
					},
					"response": [
						{
							"name": "Editar cidade",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{   \n    \"idCidade\": 1, \n    \"nomeCidade\": \"Teste editar cidade\",\n    \"paisCidade\": \"País editado\"\n}"
								},
								"url": {
									"raw": "{{servidor}}cidade",
									"host": [
										"{{servidor}}cidade"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/hal+json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 25 Mar 2023 14:42:22 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"idCidade\": 1,\n    \"nomeCidade\": \"Teste editar cidade\",\n    \"paisCidade\": \"País editado\"\n}"
						}
					]
				},
				{
					"name": "Editar cidade com id inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status Not found\", function () {\r",
									"    pm.response.to.be.notFound;   \r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type é presente\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"tests[\"Validando se a mensagem de erro é correta\"] = responseBody === \"Cidade não encontrada\";\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n    \"idCidade\": 10, \n    \"nomeCidade\": \"Teste editar cidade\",\n    \"paisCidade\": \"País editado\"\n}"
						},
						"url": {
							"raw": "{{servidor}}cidade",
							"host": [
								"{{servidor}}cidade"
							]
						}
					},
					"response": [
						{
							"name": "Editar cidade com id inexistente",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{   \n    \"idCidade\": 10, \n    \"nomeCidade\": \"Teste editar cidade\",\n    \"paisCidade\": \"País editado\"\n}"
								},
								"url": {
									"raw": "{{servidor}}cidade",
									"host": [
										"{{servidor}}cidade"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "text/plain;charset=UTF-8"
								},
								{
									"key": "Content-Length",
									"value": "22"
								},
								{
									"key": "Date",
									"value": "Sat, 25 Mar 2023 14:43:48 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Cidade não encontrada"
						}
					]
				},
				{
					"name": "Editar cidade já existente Case Sensitive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status conflict\", function () {\r",
									"    pm.response.to.be.clientError;   \r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type está presente\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"tests[\"Body is correct\"] = responseBody === \"Cidade já cadastrada\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{     \n    \"idCidade\": 1, \n    \"nomeCidade\": \"rio de janeiro\",\n    \"paisCidade\": \"País editado\"\n}\n"
						},
						"url": {
							"raw": "{{servidor}}cidade",
							"host": [
								"{{servidor}}cidade"
							]
						}
					},
					"response": [
						{
							"name": "Editar cidade já existente Case Sensitive",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{     \n    \"idCidade\": 1, \n    \"nomeCidade\": \"rio de janeiro\",\n    \"paisCidade\": \"País editado\"\n}\n"
								},
								"url": {
									"raw": "{{servidor}}cidade",
									"host": [
										"{{servidor}}cidade"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "text/plain;charset=UTF-8"
								},
								{
									"key": "Content-Length",
									"value": "21"
								},
								{
									"key": "Date",
									"value": "Sat, 25 Mar 2023 14:46:22 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Cidade já cadastrada"
						}
					]
				},
				{
					"name": "Editar cidade para uma já existente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content-Type está presente\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Código de status 409\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"    \r",
									"});\r",
									"\r",
									"tests[\"Validando se a mensagem de erro é correta\"] = responseBody === \"Cidade já cadastrada\";\r",
									"\r",
									"// pm.test(\"Validando se a resposta é json\", function(){\r",
									"//     pm.response.to.be.withBody;\r",
									"//     pm.response.to.be.json;\r",
									"// });\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n    \"idCidade\": 1, \n    \"nomeCidade\": \"rio de janeiro\",\n    \"paisCidade\": \"País editado\"\n}"
						},
						"url": {
							"raw": "{{servidor}}cidade",
							"host": [
								"{{servidor}}cidade"
							]
						}
					},
					"response": [
						{
							"name": "Editar cidade para uma já existente",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{   \n    \"idCidade\": 1, \n    \"nomeCidade\": \"rio de janeiro\",\n    \"paisCidade\": \"País editado\"\n}"
								},
								"url": {
									"raw": "{{servidor}}cidade",
									"host": [
										"{{servidor}}cidade"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "text/plain;charset=UTF-8"
								},
								{
									"key": "Content-Length",
									"value": "21"
								},
								{
									"key": "Date",
									"value": "Sat, 25 Mar 2023 14:48:13 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Cidade já cadastrada"
						}
					]
				},
				{
					"name": "Editar cidade descrição acima de 255 caracteres",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status Bad Request\", function () {\r",
									"    pm.response.to.be.badRequest;\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type está presente\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"tests[\"Validando se a mensagem de erro é correta\"] = responseBody === \"Alguns dos atributos excedeu o limites de 255 caracteres permitidos\";\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\n{   \n\t\"idCidade\": 1, \n    \"nomeCidade\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea comodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\",\n    \"paisCidade\": \"País editado\"\n}"
						},
						"url": {
							"raw": "{{servidor}}cidade",
							"host": [
								"{{servidor}}cidade"
							]
						}
					},
					"response": [
						{
							"name": "Editar cidade descrição acima de 255 caracteres",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\n{   \n\t\"idCidade\": 1, \n    \"nomeCidade\": \"rio de janeiro Os hatchs são bons carros para motoristas iniciantes, já que seu menor tamanho ajuda na hora de fazer vagas e de andar pela cidade. Também costumam ter motores menos potentes, com a grande maioria tendo versões 1.0 como padrão. A economia de combustível é outro diferencial.\",\n    \"paisCidade\": \"País editado\"\n}"
								},
								"url": {
									"raw": "{{servidor}}cidade",
									"host": [
										"{{servidor}}cidade"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 25 Mar 2023 14:49:24 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2023-03-25T14:49:24.427+00:00\",\n    \"status\": 500,\n    \"error\": \"Internal Server Error\",\n    \"trace\": \"org.springframework.transaction.TransactionSystemException: Could not commit JPA transaction\\r\\n\\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:571)\\r\\n\\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\\r\\n\\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\\r\\n\\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\\r\\n\\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\\r\\n\\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\\r\\n\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)\\r\\n\\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\\r\\n\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)\\r\\n\\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:163)\\r\\n\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)\\r\\n\\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\\r\\n\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)\\r\\n\\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:218)\\r\\n\\tat jdk.proxy4/jdk.proxy4.$Proxy141.save(Unknown Source)\\r\\n\\tat com.DH.PI.service.CidadeService.change(CidadeService.java:90)\\r\\n\\tat com.DH.PI.controller.CidadeController.change(CidadeController.java:35)\\r\\n\\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\\r\\n\\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\\r\\n\\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\\r\\n\\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\\r\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:207)\\r\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:152)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:884)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)\\r\\n\\tat org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\\r\\n\\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1080)\\r\\n\\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:973)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1011)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:888)\\r\\n\\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:814)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:223)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:177)\\r\\n\\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)\\r\\n\\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)\\r\\n\\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:119)\\r\\n\\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\\r\\n\\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)\\r\\n\\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)\\r\\n\\tat org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:400)\\r\\n\\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)\\r\\n\\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:859)\\r\\n\\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1734)\\r\\n\\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)\\r\\n\\tat org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)\\r\\n\\tat org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)\\r\\n\\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\\r\\n\\tat java.base/java.lang.Thread.run(Thread.java:833)\\r\\nCaused by: jakarta.persistence.RollbackException: Error while committing the transaction\\r\\n\\tat org.hibernate.internal.ExceptionConverterImpl.convertCommitException(ExceptionConverterImpl.java:83)\\r\\n\\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:104)\\r\\n\\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\\r\\n\\t... 64 more\\r\\nCaused by: jakarta.validation.ConstraintViolationException: Validation failed for classes [com.DH.PI.model.CidadeModel] during update time for groups [jakarta.validation.groups.Default, ]\\nList of constraint violations:[\\n\\tConstraintViolationImpl{interpolatedMessage='Excedido numero maximo de caracteres', propertyPath=nomeCidade, rootBeanClass=class com.DH.PI.model.CidadeModel, messageTemplate='Excedido numero maximo de caracteres'}\\n]\\r\\n\\tat org.hibernate.cfg.beanvalidation.BeanValidationEventListener.validate(BeanValidationEventListener.java:148)\\r\\n\\tat org.hibernate.cfg.beanvalidation.BeanValidationEventListener.onPreUpdate(BeanValidationEventListener.java:91)\\r\\n\\tat org.hibernate.action.internal.EntityUpdateAction.preUpdate(EntityUpdateAction.java:281)\\r\\n\\tat org.hibernate.action.internal.EntityUpdateAction.execute(EntityUpdateAction.java:137)\\r\\n\\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:612)\\r\\n\\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:483)\\r\\n\\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:721)\\r\\n\\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:480)\\r\\n\\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:329)\\r\\n\\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:39)\\r\\n\\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\\r\\n\\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1425)\\r\\n\\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:477)\\r\\n\\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:2234)\\r\\n\\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:1930)\\r\\n\\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:439)\\r\\n\\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\\r\\n\\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\\r\\n\\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\\r\\n\\t... 65 more\\r\\n\",\n    \"message\": \"Could not commit JPA transaction\",\n    \"path\": \"/cidade\"\n}"
						}
					]
				},
				{
					"name": "Apagar cidade",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// pathVariableId = pm.variables.get(\"$endpointDeletarId\");\r",
									"// tests[\"Validando se a mensagem de erro é correta\"] = responseBody === (`Excluido categoria de ID: {$pathVariableId}`);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{servidor}}cidade/:id",
							"host": [
								"{{servidor}}cidade"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "2"
								}
							]
						}
					},
					"response": [
						{
							"name": "Apagar cidade",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{servidor}}cidade/:id",
									"host": [
										"{{servidor}}cidade"
									],
									"path": [
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{endpointDeletarId}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "text/plain;charset=UTF-8"
								},
								{
									"key": "Content-Length",
									"value": "24"
								},
								{
									"key": "Date",
									"value": "Sat, 25 Mar 2023 14:55:55 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Excluido cidade de ID: 2"
						}
					]
				},
				{
					"name": "Apagar cidade com ID inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status Not Found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.be.notFound;\r",
									"});\r",
									"\r",
									"tests[\"Validando se a mensagem de erro é correta\"] = responseBody === \"Cidade não encontrada\";\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{servidor}}cidade/:id",
							"host": [
								"{{servidor}}cidade"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "10"
								}
							]
						}
					},
					"response": [
						{
							"name": "Apagar cidade com ID inexistente",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{servidor}}cidade/:id",
									"host": [
										"{{servidor}}cidade"
									],
									"path": [
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "10"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "text/plain;charset=UTF-8"
								},
								{
									"key": "Content-Length",
									"value": "22"
								},
								{
									"key": "Date",
									"value": "Sat, 25 Mar 2023 14:57:55 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Cidade não encontrada"
						}
					]
				}
			]
		},
		{
			"name": "/imagem",
			"item": [
				{
					"name": "Obter todas as imagens quando não existe nada salvo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.be.notFound;\r",
									"});\r",
									"\r",
									"pm.test(\"O tempo de resposta é inferior a 400ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Validando se tem resposta \", function(){\r",
									"    pm.response.to.be.withBody;\r",
									"    // pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"tests[\"Validando se a mensagem de erro é correta\"] = responseBody === \"nenhuma imagem cadastrada\";\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{servidor}}imagem",
							"host": [
								"{{servidor}}imagem"
							]
						}
					},
					"response": [
						{
							"name": "Obter todas as imagens quando não existe nada salvo",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{servidor}}Imagem",
									"host": [
										"{{servidor}}Imagem"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "text/plain;charset=UTF-8"
								},
								{
									"key": "Content-Length",
									"value": "25"
								},
								{
									"key": "Date",
									"value": "Sun, 26 Mar 2023 17:35:43 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "nenhuma imagem cadastrada"
						}
					]
				},
				{
					"name": "Salvar imagem 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Solicitação POST bem-sucedida\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Location no header está presente\", function () {\r",
									"    pm.response.to.have.header(\"Location\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"tituloImagem\": \"Imagem 1100\",\r\n    \"urlImagem\": \"https://images.unsplash.com/photo-1536667842290-7602f6a43a2b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{servidor}}imagem",
							"host": [
								"{{servidor}}imagem"
							]
						},
						"description": "Está requisição deve receber \"categoria\", \"descrição\" e \"URL de uma imagem\", para retornar a categoria salva com ID"
					},
					"response": [
						{
							"name": "Salvar imagem 1",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{   \r\n    \"tituloImagem\": \"Imagem 1\",\r\n    \"urlImagem\": \"https://images.unsplash.com/photo-1536667842290-7602f6a43a2b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{servidor}}Imagem",
									"host": [
										"{{servidor}}Imagem"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Location",
									"value": "http://localhost:8080/Imagem/1"
								},
								{
									"key": "Content-Length",
									"value": "0"
								},
								{
									"key": "Date",
									"value": "Thu, 23 Mar 2023 15:52:39 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Salvar imagem 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Solicitação POST bem-sucedida\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Location no header está presente\", function () {\r",
									"    pm.response.to.have.header(\"Location\");\r",
									"});\r",
									"\r",
									"\r",
									"// var response_body = pm.response.json();\r",
									"// pm.test(\"Validando se ha resposta\", function(){\r",
									"//     pm.response.to.be.status(201);\r",
									"//     pm.response.to.be.withBody;\r",
									"// });\r",
									"\r",
									"// pm.test(\"Validando se a imagem é a mesma cadastrada\", function(){\r",
									"//     pm.expect(\"Imagem 2\").to.eql(response_body.tituloImagem)\r",
									"// })"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"tituloImagem\": \"Imagem 2\",\r\n    \"urlImagem\": \"https://images.unsplash.com/photo-1536667842290-7602f6a43a2b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{servidor}}imagem",
							"host": [
								"{{servidor}}imagem"
							]
						},
						"description": "Está requisição deve receber \"categoria\", \"descrição\" e \"URL de uma imagem\", para retornar a categoria salva com ID"
					},
					"response": [
						{
							"name": "Salvar imagem 2",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{   \r\n    \"tituloImagem\": \"Imagem 2\",\r\n    \"urlImagem\": \"https://images.unsplash.com/photo-1536667842290-7602f6a43a2b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{servidor}}Imagem",
									"host": [
										"{{servidor}}Imagem"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Location",
									"value": "http://localhost:8080/Imagem/2"
								},
								{
									"key": "Content-Length",
									"value": "0"
								},
								{
									"key": "Date",
									"value": "Sun, 26 Mar 2023 17:41:24 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Salvar imagem 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Solicitação POST bem-sucedida\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Location no header está presente\", function () {\r",
									"    pm.response.to.have.header(\"Location\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"tituloImagem\": \"Imagem 3\",\r\n    \"urlImagem\": \"https://images.unsplash.com/photo-1536667842290-7602f6a43a2b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{servidor}}imagem",
							"host": [
								"{{servidor}}imagem"
							]
						},
						"description": "Está requisição deve receber \"categoria\", \"descrição\" e \"URL de uma imagem\", para retornar a categoria salva com ID"
					},
					"response": [
						{
							"name": "Salvar imagem 3",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{   \r\n    \"tituloImagem\": \"Imagem 3\",\r\n    \"urlImagem\": \"https://images.unsplash.com/photo-1536667842290-7602f6a43a2b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{servidor}}Imagem",
									"host": [
										"{{servidor}}Imagem"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Location",
									"value": "http://localhost:8080/Imagem/3"
								},
								{
									"key": "Content-Length",
									"value": "0"
								},
								{
									"key": "Date",
									"value": "Sun, 26 Mar 2023 17:42:55 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Salvar imagem 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Solicitação POST bem-sucedida\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Location no header está presente\", function () {\r",
									"    pm.response.to.have.header(\"Location\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"tituloImagem\": \"Imagem 4\",\r\n    \"urlImagem\": \"https://images.unsplash.com/photo-1536667842290-7602f6a43a2b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{servidor}}imagem",
							"host": [
								"{{servidor}}imagem"
							]
						},
						"description": "Está requisição deve receber \"categoria\", \"descrição\" e \"URL de uma imagem\", para retornar a categoria salva com ID"
					},
					"response": []
				},
				{
					"name": "Salvar imagem 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Solicitação POST bem-sucedida\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Location no header está presente\", function () {\r",
									"    pm.response.to.have.header(\"Location\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"tituloImagem\": \"Imagem 5\",\r\n    \"urlImagem\": \"https://images.unsplash.com/photo-1536667842290-7602f6a43a2b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{servidor}}imagem",
							"host": [
								"{{servidor}}imagem"
							]
						},
						"description": "Está requisição deve receber \"categoria\", \"descrição\" e \"URL de uma imagem\", para retornar a categoria salva com ID"
					},
					"response": []
				},
				{
					"name": "Salvar imagem ja existente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status 409\", function () {\r",
									"pm.collectionVariables.get(\"variable_key\");\r",
									"    pm.response.to.have.status(409);\r",
									"    pm.response.to.be.clientError\r",
									"});\r",
									"\r",
									"tests[\"Validando se a mensagem de erro é correta\"] = responseBody === \"Imagem já cadastrada\";\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"tituloImagem\": \"Imagem 2\",\r\n    \"urlImagem\": \"https://images.unsplash.com/photo-1536667842290-7602f6a43a2b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{servidor}}imagem",
							"host": [
								"{{servidor}}imagem"
							]
						}
					},
					"response": [
						{
							"name": "Salvar imagem ja existente",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{   \r\n    \"tituloImagem\": \"Imagem 2\",\r\n    \"urlImagem\": \"https://images.unsplash.com/photo-1536667842290-7602f6a43a2b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{servidor}}Imagem",
									"host": [
										"{{servidor}}Imagem"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "text/plain;charset=UTF-8"
								},
								{
									"key": "Content-Length",
									"value": "21"
								},
								{
									"key": "Date",
									"value": "Fri, 24 Mar 2023 01:03:55 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Imagem já cadastrada"
						}
					]
				},
				{
					"name": "Salvar imagem ja existente case sensitive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status 409\", function () {\r",
									"pm.collectionVariables.get(\"variable_key\");\r",
									"    pm.response.to.have.status(409);\r",
									"    pm.response.to.be.clientError\r",
									"});\r",
									"\r",
									"tests[\"Validando se a mensagem de erro é correta\"] = responseBody === \"Imagem já cadastrada\";\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \r\n    \"tituloImagem\": \"imagem 4\",\r\n    \"urlImagem\": \"https://images.unsplash.com/photo-1536667842290-7602f6a43a2b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{servidor}}imagem",
							"host": [
								"{{servidor}}imagem"
							]
						}
					},
					"response": [
						{
							"name": "Salvar imagem ja existente case sensitive",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \r\n    \"tituloImagem\": \"imagem 4\",\r\n    \"urlImagem\": \"https://images.unsplash.com/photo-1536667842290-7602f6a43a2b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{servidor}}Imagem",
									"host": [
										"{{servidor}}Imagem"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "text/plain;charset=UTF-8"
								},
								{
									"key": "Content-Length",
									"value": "21"
								},
								{
									"key": "Date",
									"value": "Fri, 24 Mar 2023 01:04:55 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Imagem já cadastrada"
						}
					]
				},
				{
					"name": "Salvar imagem com campos em branco",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// pm.test(\"Código de status 400\", function () {\r",
									"//     pm.response.to.have.status(400);\r",
									"//     pm.response.to.be.badRequest\r",
									"// });\r",
									"\r",
									"// tests[\"Validando se a mensagem de erro é correta\"] = responseBody === \"Verifique se alguns dos atributos do objeto estão vazios\";\r",
									"\r",
									"pm.test(\"Código de status 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    pm.response.to.be.forbidden\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"tituloImagem\": \"\",\r\n    \"urlImagem\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{servidor}}imagem",
							"host": [
								"{{servidor}}imagem"
							]
						}
					},
					"response": [
						{
							"name": "Salvar imagem com campos em branco",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{   \r\n    \"tituloImagem\": \"\",\r\n    \"urlImagem\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{servidor}}Imagem",
									"host": [
										"{{servidor}}Imagem"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 24 Mar 2023 01:05:05 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2023-03-24T01:05:05.776+00:00\",\n    \"status\": 400,\n    \"error\": \"Bad Request\",\n    \"trace\": \"org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public org.springframework.http.ResponseEntity com.DH.PI.controller.ImagemController.save(com.DH.PI.model.ImageModel) with 4 errors: [Field error in object 'imageModel' on field 'tituloImagem': rejected value []; codes [NotEmpty.imageModel.tituloImagem,NotEmpty.tituloImagem,NotEmpty.java.lang.String,NotEmpty]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [imageModel.tituloImagem,tituloImagem]; arguments []; default message [tituloImagem]]; default message [não deve estar vazio]] [Field error in object 'imageModel' on field 'urlImagem': rejected value []; codes [NotBlank.imageModel.urlImagem,NotBlank.urlImagem,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [imageModel.urlImagem,urlImagem]; arguments []; default message [urlImagem]]; default message [Obrigatorio uma descrição valida.]] [Field error in object 'imageModel' on field 'urlImagem': rejected value []; codes [NotEmpty.imageModel.urlImagem,NotEmpty.urlImagem,NotEmpty.java.lang.String,NotEmpty]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [imageModel.urlImagem,urlImagem]; arguments []; default message [urlImagem]]; default message [não deve estar vazio]] [Field error in object 'imageModel' on field 'tituloImagem': rejected value []; codes [NotBlank.imageModel.tituloImagem,NotBlank.tituloImagem,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [imageModel.tituloImagem,tituloImagem]; arguments []; default message [tituloImagem]]; default message [Obrigatorio uma descrição valida.]] \\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.resolveArgument(RequestResponseBodyMethodProcessor.java:144)\\r\\n\\tat org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:122)\\r\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:181)\\r\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:148)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:884)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)\\r\\n\\tat org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\\r\\n\\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1080)\\r\\n\\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:973)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1011)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)\\r\\n\\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:731)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)\\r\\n\\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:814)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:223)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:177)\\r\\n\\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)\\r\\n\\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)\\r\\n\\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:119)\\r\\n\\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\\r\\n\\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)\\r\\n\\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)\\r\\n\\tat org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:400)\\r\\n\\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)\\r\\n\\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:859)\\r\\n\\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1734)\\r\\n\\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)\\r\\n\\tat org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)\\r\\n\\tat org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)\\r\\n\\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\\r\\n\\tat java.base/java.lang.Thread.run(Thread.java:833)\\r\\n\",\n    \"message\": \"Validation failed for object='imageModel'. Error count: 4\",\n    \"errors\": [\n        {\n            \"codes\": [\n                \"NotEmpty.imageModel.tituloImagem\",\n                \"NotEmpty.tituloImagem\",\n                \"NotEmpty.java.lang.String\",\n                \"NotEmpty\"\n            ],\n            \"arguments\": [\n                {\n                    \"codes\": [\n                        \"imageModel.tituloImagem\",\n                        \"tituloImagem\"\n                    ],\n                    \"arguments\": null,\n                    \"defaultMessage\": \"tituloImagem\",\n                    \"code\": \"tituloImagem\"\n                }\n            ],\n            \"defaultMessage\": \"não deve estar vazio\",\n            \"objectName\": \"imageModel\",\n            \"field\": \"tituloImagem\",\n            \"rejectedValue\": \"\",\n            \"bindingFailure\": false,\n            \"code\": \"NotEmpty\"\n        },\n        {\n            \"codes\": [\n                \"NotBlank.imageModel.urlImagem\",\n                \"NotBlank.urlImagem\",\n                \"NotBlank.java.lang.String\",\n                \"NotBlank\"\n            ],\n            \"arguments\": [\n                {\n                    \"codes\": [\n                        \"imageModel.urlImagem\",\n                        \"urlImagem\"\n                    ],\n                    \"arguments\": null,\n                    \"defaultMessage\": \"urlImagem\",\n                    \"code\": \"urlImagem\"\n                }\n            ],\n            \"defaultMessage\": \"Obrigatorio uma descrição valida.\",\n            \"objectName\": \"imageModel\",\n            \"field\": \"urlImagem\",\n            \"rejectedValue\": \"\",\n            \"bindingFailure\": false,\n            \"code\": \"NotBlank\"\n        },\n        {\n            \"codes\": [\n                \"NotEmpty.imageModel.urlImagem\",\n                \"NotEmpty.urlImagem\",\n                \"NotEmpty.java.lang.String\",\n                \"NotEmpty\"\n            ],\n            \"arguments\": [\n                {\n                    \"codes\": [\n                        \"imageModel.urlImagem\",\n                        \"urlImagem\"\n                    ],\n                    \"arguments\": null,\n                    \"defaultMessage\": \"urlImagem\",\n                    \"code\": \"urlImagem\"\n                }\n            ],\n            \"defaultMessage\": \"não deve estar vazio\",\n            \"objectName\": \"imageModel\",\n            \"field\": \"urlImagem\",\n            \"rejectedValue\": \"\",\n            \"bindingFailure\": false,\n            \"code\": \"NotEmpty\"\n        },\n        {\n            \"codes\": [\n                \"NotBlank.imageModel.tituloImagem\",\n                \"NotBlank.tituloImagem\",\n                \"NotBlank.java.lang.String\",\n                \"NotBlank\"\n            ],\n            \"arguments\": [\n                {\n                    \"codes\": [\n                        \"imageModel.tituloImagem\",\n                        \"tituloImagem\"\n                    ],\n                    \"arguments\": null,\n                    \"defaultMessage\": \"tituloImagem\",\n                    \"code\": \"tituloImagem\"\n                }\n            ],\n            \"defaultMessage\": \"Obrigatorio uma descrição valida.\",\n            \"objectName\": \"imageModel\",\n            \"field\": \"tituloImagem\",\n            \"rejectedValue\": \"\",\n            \"bindingFailure\": false,\n            \"code\": \"NotBlank\"\n        }\n    ],\n    \"path\": \"/Imagem\"\n}"
						}
					]
				},
				{
					"name": "Salvar imagem descrição acima de 255 caracteres Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// pm.test(\"Código de status Bad Request\", function () {\r",
									"//     pm.response.to.be.badRequest;\r",
									"//     pm.response.to.have.status(400);\r",
									"// });\r",
									"\r",
									"// pm.test(\"Content-Type está presente\", function () {\r",
									"//     pm.response.to.have.header(\"Content-Type\");\r",
									"// });\r",
									"\r",
									"// tests[\"Validando se a mensagem de erro é correta\"] = responseBody === \"Alguns dos atributos excedeu o limites de 255 caracteres permitidos\";\r",
									"\r",
									"pm.test(\"Código de status 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    pm.response.to.be.forbidden\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{     \n    \"tituloImagem\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea comodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\",\n    \"urlImagem\": \"https://revistacarro.com.br/wp-content/uploads/2021/06/Fiat-Pulse_1.jpg\"\n\n}"
						},
						"url": {
							"raw": "{{servidor}}imagem",
							"host": [
								"{{servidor}}imagem"
							]
						}
					},
					"response": [
						{
							"name": "Salvar imagem descrição acima de 255 caracteres Copy",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{     \n    \"tituloImagem\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea comodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\",\n    \"urlImagem\": \"https://revistacarro.com.br/wp-content/uploads/2021/06/Fiat-Pulse_1.jpg\"\n\n}"
								},
								"url": {
									"raw": "{{servidor}}Imagem",
									"host": [
										"{{servidor}}Imagem"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 25 Mar 2023 18:56:02 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2023-03-25T18:56:02.239+00:00\",\n    \"status\": 400,\n    \"error\": \"Bad Request\",\n    \"trace\": \"org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public org.springframework.http.ResponseEntity com.DH.PI.controller.ImagemController.save(com.DH.PI.model.ImageModel): [Field error in object 'imageModel' on field 'tituloImagem': rejected value [Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea comodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.]; codes [Size.imageModel.tituloImagem,Size.tituloImagem,Size.java.lang.String,Size]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [imageModel.tituloImagem,tituloImagem]; arguments []; default message [tituloImagem],254,0]; default message [Excedido numero maximo de caracteres]] \\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.resolveArgument(RequestResponseBodyMethodProcessor.java:144)\\r\\n\\tat org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:122)\\r\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:181)\\r\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:148)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:884)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)\\r\\n\\tat org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\\r\\n\\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1080)\\r\\n\\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:973)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1011)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)\\r\\n\\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:731)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)\\r\\n\\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:814)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:223)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:177)\\r\\n\\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)\\r\\n\\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)\\r\\n\\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:119)\\r\\n\\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\\r\\n\\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)\\r\\n\\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)\\r\\n\\tat org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:400)\\r\\n\\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)\\r\\n\\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:859)\\r\\n\\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1734)\\r\\n\\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)\\r\\n\\tat org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)\\r\\n\\tat org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)\\r\\n\\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\\r\\n\\tat java.base/java.lang.Thread.run(Thread.java:833)\\r\\n\",\n    \"message\": \"Validation failed for object='imageModel'. Error count: 1\",\n    \"errors\": [\n        {\n            \"codes\": [\n                \"Size.imageModel.tituloImagem\",\n                \"Size.tituloImagem\",\n                \"Size.java.lang.String\",\n                \"Size\"\n            ],\n            \"arguments\": [\n                {\n                    \"codes\": [\n                        \"imageModel.tituloImagem\",\n                        \"tituloImagem\"\n                    ],\n                    \"arguments\": null,\n                    \"defaultMessage\": \"tituloImagem\",\n                    \"code\": \"tituloImagem\"\n                },\n                254,\n                0\n            ],\n            \"defaultMessage\": \"Excedido numero maximo de caracteres\",\n            \"objectName\": \"imageModel\",\n            \"field\": \"tituloImagem\",\n            \"rejectedValue\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea comodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\",\n            \"bindingFailure\": false,\n            \"code\": \"Size\"\n        }\n    ],\n    \"path\": \"/Imagem\"\n}"
						}
					]
				},
				{
					"name": "Obter todas as imagens",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"O tempo de resposta é inferior a 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validando se a resposta é json\", function(){\r",
									"    pm.response.to.be.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{servidor}}imagem",
							"host": [
								"{{servidor}}imagem"
							]
						}
					},
					"response": [
						{
							"name": "Obter todas as imagens",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{servidor}}Imagem",
									"host": [
										"{{servidor}}Imagem"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 24 Mar 2023 01:05:36 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"idImagem\": 1,\n        \"tituloImagem\": \"Imagem 5\",\n        \"urlImagem\": \"https://images.unsplash.com/photo-1536667842290-7602f6a43a2b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\",\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:8080/produto/1\"\n            }\n        ]\n    },\n    {\n        \"idImagem\": 2,\n        \"tituloImagem\": \"Imagem 1\",\n        \"urlImagem\": \"https://images.unsplash.com/photo-1536667842290-7602f6a43a2b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\",\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:8080/produto/2\"\n            }\n        ]\n    },\n    {\n        \"idImagem\": 3,\n        \"tituloImagem\": \"Imagem 3\",\n        \"urlImagem\": \"https://images.unsplash.com/photo-1536667842290-7602f6a43a2b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\",\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:8080/produto/3\"\n            }\n        ]\n    },\n    {\n        \"idImagem\": 4,\n        \"tituloImagem\": \"Imagem 4\",\n        \"urlImagem\": \"https://images.unsplash.com/photo-1536667842290-7602f6a43a2b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\",\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:8080/produto/4\"\n            }\n        ]\n    },\n    {\n        \"idImagem\": 5,\n        \"tituloImagem\": \"Imagem 2\",\n        \"urlImagem\": \"https://images.unsplash.com/photo-1536667842290-7602f6a43a2b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\",\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:8080/produto/5\"\n            }\n        ]\n    }\n]"
						}
					]
				},
				{
					"name": "Obter imagem por id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var response_body = pm.response.json();\r",
									"pm.test(\"Validating if the answer is json\", function(){\r",
									"    pm.response.to.be.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Validando se a categoria é a mesma cadastrada\", function(){\r",
									"    pm.expect(\"Imagem 1\").to.eql(response_body.tituloImagem)\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{servidor}}imagem/:id",
							"host": [
								"{{servidor}}imagem"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "2"
								}
							]
						}
					},
					"response": [
						{
							"name": "Obter imagem por id",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{servidor}}Imagem/:id",
									"host": [
										"{{servidor}}Imagem"
									],
									"path": [
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "1"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 24 Mar 2023 01:09:04 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"idImagem\": 1,\n    \"tituloImagem\": \"Imagem 5\",\n    \"urlImagem\": \"https://images.unsplash.com/photo-1536667842290-7602f6a43a2b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\",\n    \"links\": [\n        {\n            \"rel\": \"listagem de Imagens\",\n            \"href\": \"http://localhost:8080/produto\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Obter imagem com id inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status Not Found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.be.notFound;\r",
									"});\r",
									"\r",
									"tests[\"Body is correct\"] = responseBody === \"Imagem não encontrada\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{servidor}}imagem/:id",
							"host": [
								"{{servidor}}imagem"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "10"
								}
							]
						}
					},
					"response": [
						{
							"name": "Obter imagem com id inexistente",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{servidor}}Imagem/:id",
									"host": [
										"{{servidor}}Imagem"
									],
									"path": [
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "10"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "text/plain;charset=UTF-8"
								},
								{
									"key": "Content-Length",
									"value": "22"
								},
								{
									"key": "Date",
									"value": "Fri, 24 Mar 2023 01:10:00 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "imagem não encontrada"
						}
					]
				},
				{
					"name": "Editar imagem",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful Patch request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type está presente\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"var response_body = pm.response.json();\r",
									"pm.test(\"Validando se a categoria é a mesma cadastrada\", function(){\r",
									"    pm.expect(\"Teste editar imagem\").to.eql(response_body.tituloImagem)\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n    \"idImagem\": 1,\n    \"tituloImagem\": \"Teste editar imagem\",\n    \"urlImagem\": \"https://revistacarro.com.br/wp-content/uploads/2021/06/Fiat-Pulse_1.jpg\"\n}"
						},
						"url": {
							"raw": "{{servidor}}imagem",
							"host": [
								"{{servidor}}imagem"
							]
						}
					},
					"response": [
						{
							"name": "Editar imagem",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{   \n    \"idImagem\": 1,\n    \"tituloImagem\": \"Teste editar imagem\",\n    \"urlImagem\": \"https://revistacarro.com.br/wp-content/uploads/2021/06/Fiat-Pulse_1.jpg\"\n}"
								},
								"url": {
									"raw": "{{servidor}}Imagem",
									"host": [
										"{{servidor}}Imagem"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/hal+json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 24 Mar 2023 01:14:35 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"idImagem\": 1,\n    \"tituloImagem\": \"Teste editar imagem 1\",\n    \"urlImagem\": \"https://revistacarro.com.br/wp-content/uploads/2021/06/Fiat-Pulse_1.jpgk\"\n}"
						}
					]
				},
				{
					"name": "Editar imagem com id inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status Not found\", function () {\r",
									"    pm.response.to.be.notFound;   \r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type é presente\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"tests[\"Validando se a mensagem de erro é correta\"] = responseBody === \"Imagem não encontrada\";\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n    \"idImagem\": 10,\n    \"tituloImagem\": \"Teste editar imagem\",\n    \"urlImagem\": \"https://revistacarro.com.br/wp-content/uploads/2021/06/Fiat-Pulse_1.jpg\"\n}"
						},
						"url": {
							"raw": "{{servidor}}imagem",
							"host": [
								"{{servidor}}imagem"
							]
						}
					},
					"response": [
						{
							"name": "Editar imagem com id inexistente",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{   \n    \"idImagem\": 10,\n    \"tituloImagem\": \"Teste editar imagem\",\n    \"urlImagem\": \"https://revistacarro.com.br/wp-content/uploads/2021/06/Fiat-Pulse_1.jpg\"\n}"
								},
								"url": {
									"raw": "{{servidor}}Imagem",
									"host": [
										"{{servidor}}Imagem"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "text/plain;charset=UTF-8"
								},
								{
									"key": "Content-Length",
									"value": "22"
								},
								{
									"key": "Date",
									"value": "Fri, 24 Mar 2023 01:16:34 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Imagem não encontrada"
						}
					]
				},
				{
					"name": "Editar imagem para uma já existente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content-Type está presente\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Código de status 409\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"    \r",
									"});\r",
									"\r",
									"tests[\"Validando se a mensagem de erro é correta\"] = responseBody === \"Imagem já cadastrada\";\r",
									"\r",
									"// pm.test(\"Validando se a resposta é json\", function(){\r",
									"//     pm.response.to.be.withBody;\r",
									"//     pm.response.to.be.json;\r",
									"// });\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n    \"idImagem\": 2,\n    \"tituloImagem\": \"Imagem 3\",\n    \"urlImagem\": \"https://images.unsplash.com/photo-1536667842290-7602f6a43a2b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\"\n}"
						},
						"url": {
							"raw": "{{servidor}}imagem",
							"host": [
								"{{servidor}}imagem"
							]
						}
					},
					"response": [
						{
							"name": "Editar imagem para uma já existente",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{   \n    \"idImagem\": 2,\n    \"tituloImagem\": \"Imagem 3\",\n    \"urlImagem\": \"https://images.unsplash.com/photo-1536667842290-7602f6a43a2b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\"\n}"
								},
								"url": {
									"raw": "{{servidor}}Imagem",
									"host": [
										"{{servidor}}Imagem"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "text/plain;charset=UTF-8"
								},
								{
									"key": "Content-Length",
									"value": "21"
								},
								{
									"key": "Date",
									"value": "Fri, 24 Mar 2023 01:24:53 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Imagem já cadastrada"
						}
					]
				},
				{
					"name": "Editar imagem já existente Case Sensitive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status conflict\", function () {\r",
									"    pm.response.to.be.clientError;   \r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type está presente\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"tests[\"Body is correct\"] = responseBody === \"Imagem já cadastrada\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n    \"idImagem\": 2,\n    \"tituloImagem\": \"teste editar imagem\",\n    \"urlImagem\": \"https://revistacarro.com.br/wp-content/uploads/2021/06/Fiat-Pulse_1.jpg\"\n}"
						},
						"url": {
							"raw": "{{servidor}}imagem",
							"host": [
								"{{servidor}}imagem"
							]
						}
					},
					"response": [
						{
							"name": "Editar imagem já existente Case Sensitive",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{   \n    \"idImagem\": 2,\n    \"tituloImagem\": \"teste editar imagem\",\n    \"urlImagem\": \"https://revistacarro.com.br/wp-content/uploads/2021/06/Fiat-Pulse_1.jpg\"\n}"
								},
								"url": {
									"raw": "{{servidor}}Imagem",
									"host": [
										"{{servidor}}Imagem"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "text/plain;charset=UTF-8"
								},
								{
									"key": "Content-Length",
									"value": "21"
								},
								{
									"key": "Date",
									"value": "Fri, 24 Mar 2023 01:28:14 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Imagem já cadastrada"
						}
					]
				},
				{
					"name": "Editar imagem descrição acima de 255 caracteres",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// pm.test(\"Código de status Bad Request\", function () {\r",
									"//     pm.response.to.be.badRequest;\r",
									"//     pm.response.to.have.status(400);\r",
									"// });\r",
									"\r",
									"// pm.test(\"Content-Type está presente\", function () {\r",
									"//     pm.response.to.have.header(\"Content-Type\");\r",
									"// });\r",
									"\r",
									"// tests[\"Validando se a mensagem de erro é correta\"] = responseBody === \"Alguns dos atributos excedeu o limites de 255 caracteres permitidos\";\r",
									"\r",
									"pm.test(\"Código de status 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    pm.response.to.be.forbidden\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{     \n    \"idImagem\": 2,\n    \"tituloImagem\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea comodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\",\n    \"urlImagem\": \"https://revistacarro.com.br/wp-content/uploads/2021/06/Fiat-Pulse_1.jpg\"\n\n}"
						},
						"url": {
							"raw": "{{servidor}}imagem",
							"host": [
								"{{servidor}}imagem"
							]
						}
					},
					"response": [
						{
							"name": "Editar imagem descrição acima de 255 caracteres",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{     \n    \"idImagem\": 2,\n    \"tituloImagem\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea comodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\",\n    \"urlImagem\": \"https://revistacarro.com.br/wp-content/uploads/2021/06/Fiat-Pulse_1.jpg\"\n\n}"
								},
								"url": {
									"raw": "{{servidor}}Imagem",
									"host": [
										"{{servidor}}Imagem"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 25 Mar 2023 18:53:18 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2023-03-25T18:53:18.522+00:00\",\n    \"status\": 500,\n    \"error\": \"Internal Server Error\",\n    \"trace\": \"org.springframework.transaction.TransactionSystemException: Could not commit JPA transaction\\r\\n\\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:571)\\r\\n\\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\\r\\n\\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\\r\\n\\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\\r\\n\\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\\r\\n\\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\\r\\n\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)\\r\\n\\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\\r\\n\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)\\r\\n\\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:163)\\r\\n\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)\\r\\n\\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\\r\\n\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)\\r\\n\\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:218)\\r\\n\\tat jdk.proxy4/jdk.proxy4.$Proxy142.save(Unknown Source)\\r\\n\\tat com.DH.PI.service.ImagemService.change(ImagemService.java:78)\\r\\n\\tat com.DH.PI.controller.ImagemController.change(ImagemController.java:35)\\r\\n\\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\\r\\n\\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\\r\\n\\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\\r\\n\\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\\r\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:207)\\r\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:152)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:884)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)\\r\\n\\tat org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\\r\\n\\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1080)\\r\\n\\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:973)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1011)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:888)\\r\\n\\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:814)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:223)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:177)\\r\\n\\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)\\r\\n\\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)\\r\\n\\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:119)\\r\\n\\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\\r\\n\\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)\\r\\n\\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)\\r\\n\\tat org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:400)\\r\\n\\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)\\r\\n\\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:859)\\r\\n\\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1734)\\r\\n\\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)\\r\\n\\tat org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)\\r\\n\\tat org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)\\r\\n\\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\\r\\n\\tat java.base/java.lang.Thread.run(Thread.java:833)\\r\\nCaused by: jakarta.persistence.RollbackException: Error while committing the transaction\\r\\n\\tat org.hibernate.internal.ExceptionConverterImpl.convertCommitException(ExceptionConverterImpl.java:83)\\r\\n\\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:104)\\r\\n\\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\\r\\n\\t... 64 more\\r\\nCaused by: jakarta.validation.ConstraintViolationException: Validation failed for classes [com.DH.PI.model.ImageModel] during update time for groups [jakarta.validation.groups.Default, ]\\nList of constraint violations:[\\n\\tConstraintViolationImpl{interpolatedMessage='Excedido numero maximo de caracteres', propertyPath=tituloImagem, rootBeanClass=class com.DH.PI.model.ImageModel, messageTemplate='Excedido numero maximo de caracteres'}\\n]\\r\\n\\tat org.hibernate.cfg.beanvalidation.BeanValidationEventListener.validate(BeanValidationEventListener.java:148)\\r\\n\\tat org.hibernate.cfg.beanvalidation.BeanValidationEventListener.onPreUpdate(BeanValidationEventListener.java:91)\\r\\n\\tat org.hibernate.action.internal.EntityUpdateAction.preUpdate(EntityUpdateAction.java:281)\\r\\n\\tat org.hibernate.action.internal.EntityUpdateAction.execute(EntityUpdateAction.java:137)\\r\\n\\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:612)\\r\\n\\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:483)\\r\\n\\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:721)\\r\\n\\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:480)\\r\\n\\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:329)\\r\\n\\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:39)\\r\\n\\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\\r\\n\\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1425)\\r\\n\\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:477)\\r\\n\\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:2234)\\r\\n\\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:1930)\\r\\n\\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:439)\\r\\n\\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\\r\\n\\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\\r\\n\\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\\r\\n\\t... 65 more\\r\\n\",\n    \"message\": \"Could not commit JPA transaction\",\n    \"path\": \"/Imagem\"\n}"
						}
					]
				},
				{
					"name": "Apagar imagem",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// pathVariableId = pm.variables.get(\"$endpointDeletarId\");\r",
									"// tests[\"Validando se a mensagem de erro é correta\"] = responseBody === (`Excluido categoria de ID: {$pathVariableId}`);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{servidor}}imagem/:id",
							"host": [
								"{{servidor}}imagem"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						}
					},
					"response": [
						{
							"name": "Apagar imagem",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{servidor}}Imagem/:id",
									"host": [
										"{{servidor}}Imagem"
									],
									"path": [
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{endpointDeletarId}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "text/plain;charset=UTF-8"
								},
								{
									"key": "Content-Length",
									"value": "24"
								},
								{
									"key": "Date",
									"value": "Fri, 24 Mar 2023 01:34:24 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Excluido imagem de ID: 2"
						}
					]
				},
				{
					"name": "Apagar imagemcom ID inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status Not Found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.be.notFound;\r",
									"});\r",
									"\r",
									"tests[\"Validando se a mensagem de erro é correta\"] = responseBody === \"Imagem não encontrada\";\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{servidor}}imagem/:id",
							"host": [
								"{{servidor}}imagem"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "10"
								}
							]
						}
					},
					"response": [
						{
							"name": "Apagar categoria com ID inexistente",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{servidor}}categoria?id=10",
									"host": [
										"{{servidor}}categoria"
									],
									"query": [
										{
											"key": "id",
											"value": "10"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "text/plain;charset=UTF-8"
								},
								{
									"key": "Content-Length",
									"value": "25"
								},
								{
									"key": "Date",
									"value": "Fri, 24 Mar 2023 02:27:13 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Categoria não encontrada"
						}
					]
				}
			]
		},
		{
			"name": "/produto",
			"item": [
				{
					"name": "Obter todas as produto quando não existe nada salvo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.be.notFound;\r",
									"});\r",
									"\r",
									"pm.test(\"O tempo de resposta é inferior a 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validando há resposta\", function(){\r",
									"    pm.response.to.be.status(404);\r",
									"    pm.response.to.be.withBody; \r",
									"});\r",
									"\r",
									"tests[\"Body is correct\"] = responseBody === \"nenhum produto cadastrado\";\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{servidor}}produto",
							"host": [
								"{{servidor}}produto"
							]
						}
					},
					"response": []
				},
				{
					"name": "Salvar produto 1 dados que BD pede",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Solicitação POST bem-sucedida\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Location no header está presente\", function () {\r",
									"    pm.response.to.have.header(\"Location\");\r",
									"});\r",
									"\r",
									"// var response_body = pm.response.json();\r",
									"// pm.test(\"Validando se a resposta é json\", function(){\r",
									"//     pm.response.to.be.status(200);\r",
									"//     pm.response.to.be.withBody;\r",
									"//     pm.response.to.be.json;\r",
									"// });\r",
									"\r",
									"// pm.test(\"Validando se a nome produto é a mesma cadastrada\", function(){\r",
									"//     pm.expect(\"teste\").to.eql(response_body.nomeProduto)\r",
									"// })"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"nomeProduto\": \"Carro 1\",\r\n    \"descricaoProduto\": \"Descrição carro 1\",\r\n    \"caracteristicas\": [\r\n        {\r\n            \"idCaracteristica\": 1\r\n        }    \r\n    ],\r\n    \"imagem\": [\r\n        {\r\n            \"idImagem\": 1\r\n        }        \r\n    ],\r\n    \"categoria\": {\r\n        \"id\": 1\r\n    },\r\n    \"cidade\": {\r\n        \"idCidade\": 1\r\n    }    \r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{servidor}}produto",
							"host": [
								"{{servidor}}produto"
							]
						}
					},
					"response": [
						{
							"name": "Salvar produto 1 dados que BD pede",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{   \r\n    \"nomeProduto\": \"Carro 1 teste\",\r\n    \"descricaoProduto\": \"Descrição carro 1\",\r\n    \"categoria\": {\r\n        \"id\": 1\r\n    },\r\n    \"cidade\": {\r\n        \"idCidade\": 1\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{servidor}}produto",
									"host": [
										"{{servidor}}produto"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/hal+json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 25 Mar 2023 18:04:01 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"idProduto\": 7,\n    \"nomeProduto\": \"Carro 1 teste\",\n    \"descricaoProduto\": \"Descrição carro 1\",\n    \"caracteristicas\": null,\n    \"imagem\": null,\n    \"categoria\": {\n        \"id\": 1,\n        \"categoria\": null,\n        \"descricao\": null,\n        \"urlImagem\": null\n    },\n    \"cidade\": {\n        \"idCidade\": 1,\n        \"nomeCidade\": null,\n        \"paisCidade\": null\n    }\n}"
						}
					]
				},
				{
					"name": "Salvar produto 2 dados que BD pede",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Solicitação POST bem-sucedida\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Location no header está presente\", function () {\r",
									"    pm.response.to.have.header(\"Location\");\r",
									"});\r",
									"\r",
									"// var response_body = pm.response.json();\r",
									"// pm.test(\"Validando se a resposta é json\", function(){\r",
									"//     pm.response.to.be.status(200);\r",
									"//     pm.response.to.be.withBody;\r",
									"//     pm.response.to.be.json;\r",
									"// });\r",
									"\r",
									"// pm.test(\"Validando se a nome produto é a mesma cadastrada\", function(){\r",
									"//     pm.expect(\"teste\").to.eql(response_body.nomeProduto)\r",
									"// })"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"nomeProduto\": \"Carro 2 teste\",\r\n    \"descricaoProduto\": \"Descrição carro 2\",\r\n    \"categoria\": {\r\n        \"id\": 2\r\n    },\r\n    \"cidade\": {\r\n        \"idCidade\": 2\r\n    }\r\n}\r\n\r\n// {   \r\n//     \"nomeProduto\": \"Carro 2 teste\",\r\n//     \"descricaoProduto\": \"Descrição carro 2\",\r\n//     \"caracteristicas\": [\r\n//         {\r\n//             \"idCaracteristica\": 1\r\n//         }\r\n//     ],\r\n//     \"imagem\": [\r\n//         {\r\n//             \"idImagem\": 1\r\n//         }\r\n//     ],\r\n//     \"categoria\": {\r\n//         \"id\": 1\r\n//     },\r\n//     \"cidade\": {\r\n//         \"idCidade\": 1\r\n//     }\r\n// }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{servidor}}produto",
							"host": [
								"{{servidor}}produto"
							]
						}
					},
					"response": []
				},
				{
					"name": "Salvar produto 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Solicitação POST bem-sucedida\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Location no header está presente\", function () {\r",
									"    pm.response.to.have.header(\"Location\");\r",
									"});\r",
									"\r",
									"\r",
									"// {\r",
									"//     \"idProduto\": 3,\r",
									"//     \"nomeProduto\": \"teste\",\r",
									"//     \"dscricaoProduto\": \"teste\",\r",
									"//     \"caracteristicas\": null,\r",
									"//     \"imagem\": null,\r",
									"//     \"categoria\": null,\r",
									"//     \"cidade\": null\r",
									"// }\r",
									"// {\r",
									"//     \"idProduto\": 1,\r",
									"//     \"nomeProduto\": \"teste\",\r",
									"//     \"dscricaoProduto\": \"teste\",\r",
									"//     \"caracteristicas\": [],\r",
									"//     \"imagem\": [],\r",
									"//     \"categoria\": null,\r",
									"//     \"cidade\": null,\r",
									"//     \"links\": []\r",
									"// }"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"nomeProduto\": \"Carro 3\",\r\n    \"descricaoProduto\": \"Descrição carro 3\",\r\n    \"caracteristicas\": [\r\n        {\r\n            \"idCaracteristica\": 2\r\n        },\r\n        {\r\n            \"idCaracteristica\": 1\r\n        }    \r\n    ],\r\n    \"imagem\": [\r\n        {\r\n            \"idImagem\": 2\r\n        }        \r\n    ],\r\n    \"categoria\": {\r\n        \"id\": 1\r\n    },\r\n    \"cidade\": {\r\n        \"idCidade\": 1\r\n    }    \r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{servidor}}produto",
							"host": [
								"{{servidor}}produto"
							]
						}
					},
					"response": [
						{
							"name": "Salvar produto 1",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{   \r\n    \"nomeProduto\": \"teste\",\r\n    \"dscricaoProduto\": \"teste\"\r\n    \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{servidor}}produtos",
									"host": [
										"{{servidor}}produtos"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/hal+json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sun, 12 Mar 2023 20:14:05 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"idProduto\": 5,\n    \"nomeProduto\": \"teste\",\n    \"dscricaoProduto\": \"teste\",\n    \"caracteristicas\": null,\n    \"imagem\": null,\n    \"categoria\": null,\n    \"cidade\": null\n}"
						},
						{
							"name": "Salvar produto 1 status code 201",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{   \r\n    \"nomeProduto\": \"teste\",\r\n    \"descricaoProduto\": \"teste\"\r\n    \r\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{servidor}}produto",
									"host": [
										"{{servidor}}produto"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/hal+json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 25 Mar 2023 00:41:27 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"idProduto\": 1,\n    \"nomeProduto\": \"teste\",\n    \"descricaoProduto\": \"teste\",\n    \"caracteristicas\": null,\n    \"imagem\": null,\n    \"categoria\": null,\n    \"cidade\": null\n}"
						},
						{
							"name": "Salvar produto 1 com o basico do body",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{   \r\n    \"nomeProduto\": \"Carro 1\",\r\n    \"descricaoProduto\": \"Descrição carro 1\"\r\n    \r\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{servidor}}produto",
									"host": [
										"{{servidor}}produto"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/hal+json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 25 Mar 2023 16:14:07 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"idProduto\": 4,\n    \"nomeProduto\": \"Carro 1\",\n    \"descricaoProduto\": \"Descrição carro 1\",\n    \"caracteristicas\": null,\n    \"imagem\": null,\n    \"categoria\": null,\n    \"cidade\": null\n}"
						}
					]
				},
				{
					"name": "Salvar produto 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Solicitação POST bem-sucedida\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Location no header está presente\", function () {\r",
									"    pm.response.to.have.header(\"Location\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"nomeProduto\": \"Carro 4\",\r\n    \"descricaoProduto\": \"Descrição carro 4\",\r\n    \"caracteristicas\": [\r\n        {\r\n            \"idCaracteristica\": 2\r\n        },\r\n        {\r\n            \"idCaracteristica\": 1\r\n        }    \r\n    ],\r\n    \"imagem\": [\r\n        {\r\n            \"idImagem\": 2\r\n        }        \r\n    ],\r\n    \"categoria\": {\r\n        \"id\": 1\r\n    },\r\n    \"cidade\": {\r\n        \"idCidade\": 1\r\n    }    \r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{servidor}}produto",
							"host": [
								"{{servidor}}produto"
							]
						}
					},
					"response": []
				},
				{
					"name": "Salvar produto 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Solicitação POST bem-sucedida\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Location no header está presente\", function () {\r",
									"    pm.response.to.have.header(\"Location\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"nomeProduto\": \"Carro 5\",\r\n    \"descricaoProduto\": \"Descrição carro 5\",\r\n    \"caracteristicas\": [\r\n        {\r\n            \"idCaracteristica\": 2\r\n        },\r\n        {\r\n            \"idCaracteristica\": 1\r\n        }    \r\n    ],\r\n    \"imagem\": [\r\n        {\r\n            \"idImagem\": 1\r\n        }        \r\n    ],\r\n    \"categoria\": {\r\n        \"id\": 1\r\n    },\r\n    \"cidade\": {\r\n        \"idCidade\": 1\r\n    }    \r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{servidor}}produto",
							"host": [
								"{{servidor}}produto"
							]
						}
					},
					"response": [
						{
							"name": "Salvar produto 5 teste com idCategoria e id_cidade null",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{   \r\n    \"nomeProduto\": \"teste test\",\r\n    \"descricaoProduto\": \"teste test\",\r\n    \"caracteristicas\": null,\r\n    \"imagem\": null,\r\n    \"categoria\": null,\r\n    \"cidade\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{servidor}}produto",
									"host": [
										"{{servidor}}produto"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/hal+json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 25 Mar 2023 18:35:49 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"idProduto\": 9,\n    \"nomeProduto\": \"teste test\",\n    \"descricaoProduto\": \"teste test\",\n    \"caracteristicas\": null,\n    \"imagem\": null,\n    \"categoria\": null,\n    \"cidade\": null\n}"
						}
					]
				},
				{
					"name": "Salvar produto 6 dados que a API pede",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Solicitação POST bem-sucedida\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Location no header está presente\", function () {\r",
									"    pm.response.to.have.header(\"Location\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"nomeProduto\": \"Carro 6\",\r\n    \"descricaoProduto\": \"Descrição carro 6\",\r\n    \"caracteristicas\": [\r\n        {\r\n            \"idCaracteristica\": 1\r\n        }    \r\n    ],\r\n    \"imagem\": [\r\n        {\r\n            \"idImagem\": 1\r\n        }        \r\n    ],\r\n    \"categoria\": {\r\n        \"id\": 1\r\n    },\r\n    \"cidade\": {\r\n        \"idCidade\": 1\r\n    }    \r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{servidor}}produto",
							"host": [
								"{{servidor}}produto"
							]
						}
					},
					"response": []
				},
				{
					"name": "Salvar produto ja existente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status 409\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"    pm.response.to.be.clientError\r",
									"});\r",
									"\r",
									"\r",
									"tests[\"Body is correct\"] = responseBody === \"Produto já cadastrado\";\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"nomeProduto\": \"Carro 1\",\r\n    \"descricaoProduto\": \"Descrição carro 1\",\r\n    \"categoria\": {\r\n        \"id\": 1\r\n    },\r\n    \"cidade\": {\r\n        \"idCidade\": 1\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{servidor}}produto",
							"host": [
								"{{servidor}}produto"
							]
						}
					},
					"response": [
						{
							"name": "Salvar produto ja existente",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{   \r\n    \"nomeProduto\": \"Carro 1 teste\",\r\n    \"descricaoProduto\": \"Descrição carro 1\",\r\n    \"categoria\": {\r\n        \"id\": 1\r\n    },\r\n    \"cidade\": {\r\n        \"idCidade\": 1\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{servidor}}produto",
									"host": [
										"{{servidor}}produto"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "text/plain;charset=UTF-8"
								},
								{
									"key": "Content-Length",
									"value": "22"
								},
								{
									"key": "Date",
									"value": "Sat, 25 Mar 2023 18:06:07 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Produto já casdatrado"
						}
					]
				},
				{
					"name": "Salvar produtos ja existente case sensitive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status 409\", function () {\r",
									"pm.collectionVariables.get(\"variable_key\");\r",
									"    pm.response.to.have.status(409);\r",
									"    pm.response.to.be.clientError\r",
									"});\r",
									"\r",
									"tests[\"Body is correct\"] = responseBody === \"Produto já cadastrado\";\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"nomeProduto\": \"carro 1\",\r\n    \"descricaoProduto\": \"Descrição carro 1\",\r\n    \"categoria\": {\r\n        \"id\": 1\r\n    },\r\n    \"cidade\": {\r\n        \"idCidade\": 1\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{servidor}}produto",
							"host": [
								"{{servidor}}produto"
							]
						}
					},
					"response": [
						{
							"name": "Salvar produtos ja existente case sensitive",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{   \r\n    \"nomeProduto\": \"carro 1 teste\",\r\n    \"descricaoProduto\": \"Descrição carro 1\",\r\n    \"categoria\": {\r\n        \"id\": 1\r\n    },\r\n    \"cidade\": {\r\n        \"idCidade\": 1\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{servidor}}produto",
									"host": [
										"{{servidor}}produto"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "text/plain;charset=UTF-8"
								},
								{
									"key": "Content-Length",
									"value": "22"
								},
								{
									"key": "Date",
									"value": "Sat, 25 Mar 2023 18:05:28 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Produto já casdatrado"
						}
					]
				},
				{
					"name": "Salvar produto com campos em branco",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// pm.test(\"Código de status 400\", function () {\r",
									"//     pm.response.to.have.status(400);\r",
									"//     pm.response.to.be.badRequest\r",
									"// });\r",
									"\r",
									"// tests[\"Body is correct\"] = responseBody === \"Obrigatório uma descrição válida.\";\r",
									"\r",
									"pm.test(\"Código de status 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    pm.response.to.be.forbidden\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"nomeProduto\": \"\",\r\n    \"descricaoProduto\": \"\",\r\n    \"categoria\": {\r\n        \"id\": 1\r\n    },\r\n    \"cidade\": {\r\n        \"idCidade\": 1\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{servidor}}produto",
							"host": [
								"{{servidor}}produto"
							]
						}
					},
					"response": [
						{
							"name": "Salvar produto com campos em branco",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{   \r\n    \"nomeProduto\": \"\",\r\n    \"descricaoProduto\": \"\",\r\n    \"categoria\": {\r\n        \"id\": 1\r\n    },\r\n    \"cidade\": {\r\n        \"idCidade\": 1\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{servidor}}produto",
									"host": [
										"{{servidor}}produto"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 25 Mar 2023 18:07:09 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2023-03-25T18:07:09.888+00:00\",\n    \"status\": 400,\n    \"error\": \"Bad Request\",\n    \"trace\": \"org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public org.springframework.http.ResponseEntity com.DH.PI.controller.ProdutoController.save(com.DH.PI.model.ProdutoModel) throws java.sql.SQLException with 4 errors: [Field error in object 'produtoModel' on field 'descricaoProduto': rejected value []; codes [NotEmpty.produtoModel.descricaoProduto,NotEmpty.descricaoProduto,NotEmpty.java.lang.String,NotEmpty]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [produtoModel.descricaoProduto,descricaoProduto]; arguments []; default message [descricaoProduto]]; default message [não deve estar vazio]] [Field error in object 'produtoModel' on field 'nomeProduto': rejected value []; codes [NotEmpty.produtoModel.nomeProduto,NotEmpty.nomeProduto,NotEmpty.java.lang.String,NotEmpty]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [produtoModel.nomeProduto,nomeProduto]; arguments []; default message [nomeProduto]]; default message [não deve estar vazio]] [Field error in object 'produtoModel' on field 'descricaoProduto': rejected value []; codes [NotBlank.produtoModel.descricaoProduto,NotBlank.descricaoProduto,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [produtoModel.descricaoProduto,descricaoProduto]; arguments []; default message [descricaoProduto]]; default message [Obrigatório uma descrição valida.]] [Field error in object 'produtoModel' on field 'nomeProduto': rejected value []; codes [NotBlank.produtoModel.nomeProduto,NotBlank.nomeProduto,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [produtoModel.nomeProduto,nomeProduto]; arguments []; default message [nomeProduto]]; default message [Obrigatório uma descrição valida.]] \\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.resolveArgument(RequestResponseBodyMethodProcessor.java:144)\\r\\n\\tat org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:122)\\r\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:181)\\r\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:148)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:884)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)\\r\\n\\tat org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\\r\\n\\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1080)\\r\\n\\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:973)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1011)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)\\r\\n\\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:731)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)\\r\\n\\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:814)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:223)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:177)\\r\\n\\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)\\r\\n\\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)\\r\\n\\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:119)\\r\\n\\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\\r\\n\\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)\\r\\n\\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)\\r\\n\\tat org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:400)\\r\\n\\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)\\r\\n\\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:859)\\r\\n\\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1734)\\r\\n\\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)\\r\\n\\tat org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)\\r\\n\\tat org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)\\r\\n\\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\\r\\n\\tat java.base/java.lang.Thread.run(Thread.java:833)\\r\\n\",\n    \"message\": \"Validation failed for object='produtoModel'. Error count: 4\",\n    \"errors\": [\n        {\n            \"codes\": [\n                \"NotEmpty.produtoModel.descricaoProduto\",\n                \"NotEmpty.descricaoProduto\",\n                \"NotEmpty.java.lang.String\",\n                \"NotEmpty\"\n            ],\n            \"arguments\": [\n                {\n                    \"codes\": [\n                        \"produtoModel.descricaoProduto\",\n                        \"descricaoProduto\"\n                    ],\n                    \"arguments\": null,\n                    \"defaultMessage\": \"descricaoProduto\",\n                    \"code\": \"descricaoProduto\"\n                }\n            ],\n            \"defaultMessage\": \"não deve estar vazio\",\n            \"objectName\": \"produtoModel\",\n            \"field\": \"descricaoProduto\",\n            \"rejectedValue\": \"\",\n            \"bindingFailure\": false,\n            \"code\": \"NotEmpty\"\n        },\n        {\n            \"codes\": [\n                \"NotEmpty.produtoModel.nomeProduto\",\n                \"NotEmpty.nomeProduto\",\n                \"NotEmpty.java.lang.String\",\n                \"NotEmpty\"\n            ],\n            \"arguments\": [\n                {\n                    \"codes\": [\n                        \"produtoModel.nomeProduto\",\n                        \"nomeProduto\"\n                    ],\n                    \"arguments\": null,\n                    \"defaultMessage\": \"nomeProduto\",\n                    \"code\": \"nomeProduto\"\n                }\n            ],\n            \"defaultMessage\": \"não deve estar vazio\",\n            \"objectName\": \"produtoModel\",\n            \"field\": \"nomeProduto\",\n            \"rejectedValue\": \"\",\n            \"bindingFailure\": false,\n            \"code\": \"NotEmpty\"\n        },\n        {\n            \"codes\": [\n                \"NotBlank.produtoModel.descricaoProduto\",\n                \"NotBlank.descricaoProduto\",\n                \"NotBlank.java.lang.String\",\n                \"NotBlank\"\n            ],\n            \"arguments\": [\n                {\n                    \"codes\": [\n                        \"produtoModel.descricaoProduto\",\n                        \"descricaoProduto\"\n                    ],\n                    \"arguments\": null,\n                    \"defaultMessage\": \"descricaoProduto\",\n                    \"code\": \"descricaoProduto\"\n                }\n            ],\n            \"defaultMessage\": \"Obrigatório uma descrição valida.\",\n            \"objectName\": \"produtoModel\",\n            \"field\": \"descricaoProduto\",\n            \"rejectedValue\": \"\",\n            \"bindingFailure\": false,\n            \"code\": \"NotBlank\"\n        },\n        {\n            \"codes\": [\n                \"NotBlank.produtoModel.nomeProduto\",\n                \"NotBlank.nomeProduto\",\n                \"NotBlank.java.lang.String\",\n                \"NotBlank\"\n            ],\n            \"arguments\": [\n                {\n                    \"codes\": [\n                        \"produtoModel.nomeProduto\",\n                        \"nomeProduto\"\n                    ],\n                    \"arguments\": null,\n                    \"defaultMessage\": \"nomeProduto\",\n                    \"code\": \"nomeProduto\"\n                }\n            ],\n            \"defaultMessage\": \"Obrigatório uma descrição valida.\",\n            \"objectName\": \"produtoModel\",\n            \"field\": \"nomeProduto\",\n            \"rejectedValue\": \"\",\n            \"bindingFailure\": false,\n            \"code\": \"NotBlank\"\n        }\n    ],\n    \"path\": \"/produto\"\n}"
						}
					]
				},
				{
					"name": "Salvar produto com campos acima de 255 caracteres",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// pm.test(\"Código de status Bad Request\", function () {\r",
									"//     pm.response.to.be.badRequest;\r",
									"//     pm.response.to.have.status(400);\r",
									"// });\r",
									"\r",
									"// pm.test(\"Content-Type está presente\", function () {\r",
									"//     pm.response.to.have.header(\"Content-Type\");\r",
									"// });\r",
									"\r",
									"// tests[\"Body is correct\"] = responseBody === \"Excedido numero maximo de caracteres\";\r",
									"\r",
									"pm.test(\"Código de status 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    pm.response.to.be.forbidden\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"nomeProduto\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea comodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\",\r\n    \"descricaoProduto\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea comodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\",\r\n    \r\n    \"categoria\": {\r\n        \"id\": 1\r\n    },\r\n    \"cidade\": {\r\n        \"idCidade\": 1\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{servidor}}produto",
							"host": [
								"{{servidor}}produto"
							]
						}
					},
					"response": [
						{
							"name": "Salvar produto com campos acima de 255 caracteres",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{   \r\n    \"nomeProduto\": \"TOs hatchs são bons carros para motoristas iniciantes, já que seu menor tamanho ajuda na hora de fazer vagas e de andar pela cidade. Também costumam ter motores menos potentes, com a grande maioria tendo versões 1.0 como padrão. A economia de combustível é outro diferencial.este\",\r\n    \"descricaoProduto\": \"teste Os hatchs são bons carros para motoristas iniciantes, já que seu menor tamanho ajuda na hora de fazer vagas e de andar pela cidade. Também costumam ter motores menos potentes, com a grande maioria tendo versões 1.0 como padrão. A economia de combustível é outro diferencial.\",\r\n    \r\n    \"categoria\": {\r\n        \"id\": 1\r\n    },\r\n    \"cidade\": {\r\n        \"idCidade\": 1\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{servidor}}produto",
									"host": [
										"{{servidor}}produto"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 25 Mar 2023 18:07:51 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2023-03-25T18:07:51.625+00:00\",\n    \"status\": 400,\n    \"error\": \"Bad Request\",\n    \"trace\": \"org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public org.springframework.http.ResponseEntity com.DH.PI.controller.ProdutoController.save(com.DH.PI.model.ProdutoModel) throws java.sql.SQLException with 2 errors: [Field error in object 'produtoModel' on field 'nomeProduto': rejected value [TOs hatchs são bons carros para motoristas iniciantes, já que seu menor tamanho ajuda na hora de fazer vagas e de andar pela cidade. Também costumam ter motores menos potentes, com a grande maioria tendo versões 1.0 como padrão. A economia de combustível é outro diferencial.este]; codes [Size.produtoModel.nomeProduto,Size.nomeProduto,Size.java.lang.String,Size]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [produtoModel.nomeProduto,nomeProduto]; arguments []; default message [nomeProduto],254,0]; default message [Excedido número máximo de caracteres]] [Field error in object 'produtoModel' on field 'descricaoProduto': rejected value [teste Os hatchs são bons carros para motoristas iniciantes, já que seu menor tamanho ajuda na hora de fazer vagas e de andar pela cidade. Também costumam ter motores menos potentes, com a grande maioria tendo versões 1.0 como padrão. A economia de combustível é outro diferencial.]; codes [Size.produtoModel.descricaoProduto,Size.descricaoProduto,Size.java.lang.String,Size]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [produtoModel.descricaoProduto,descricaoProduto]; arguments []; default message [descricaoProduto],254,0]; default message [Excedido número máximo de caracteres]] \\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.resolveArgument(RequestResponseBodyMethodProcessor.java:144)\\r\\n\\tat org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:122)\\r\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:181)\\r\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:148)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:884)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)\\r\\n\\tat org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\\r\\n\\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1080)\\r\\n\\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:973)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1011)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)\\r\\n\\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:731)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)\\r\\n\\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:814)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:223)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:177)\\r\\n\\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)\\r\\n\\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)\\r\\n\\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:119)\\r\\n\\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\\r\\n\\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)\\r\\n\\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)\\r\\n\\tat org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:400)\\r\\n\\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)\\r\\n\\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:859)\\r\\n\\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1734)\\r\\n\\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)\\r\\n\\tat org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)\\r\\n\\tat org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)\\r\\n\\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\\r\\n\\tat java.base/java.lang.Thread.run(Thread.java:833)\\r\\n\",\n    \"message\": \"Validation failed for object='produtoModel'. Error count: 2\",\n    \"errors\": [\n        {\n            \"codes\": [\n                \"Size.produtoModel.nomeProduto\",\n                \"Size.nomeProduto\",\n                \"Size.java.lang.String\",\n                \"Size\"\n            ],\n            \"arguments\": [\n                {\n                    \"codes\": [\n                        \"produtoModel.nomeProduto\",\n                        \"nomeProduto\"\n                    ],\n                    \"arguments\": null,\n                    \"defaultMessage\": \"nomeProduto\",\n                    \"code\": \"nomeProduto\"\n                },\n                254,\n                0\n            ],\n            \"defaultMessage\": \"Excedido número máximo de caracteres\",\n            \"objectName\": \"produtoModel\",\n            \"field\": \"nomeProduto\",\n            \"rejectedValue\": \"TOs hatchs são bons carros para motoristas iniciantes, já que seu menor tamanho ajuda na hora de fazer vagas e de andar pela cidade. Também costumam ter motores menos potentes, com a grande maioria tendo versões 1.0 como padrão. A economia de combustível é outro diferencial.este\",\n            \"bindingFailure\": false,\n            \"code\": \"Size\"\n        },\n        {\n            \"codes\": [\n                \"Size.produtoModel.descricaoProduto\",\n                \"Size.descricaoProduto\",\n                \"Size.java.lang.String\",\n                \"Size\"\n            ],\n            \"arguments\": [\n                {\n                    \"codes\": [\n                        \"produtoModel.descricaoProduto\",\n                        \"descricaoProduto\"\n                    ],\n                    \"arguments\": null,\n                    \"defaultMessage\": \"descricaoProduto\",\n                    \"code\": \"descricaoProduto\"\n                },\n                254,\n                0\n            ],\n            \"defaultMessage\": \"Excedido número máximo de caracteres\",\n            \"objectName\": \"produtoModel\",\n            \"field\": \"descricaoProduto\",\n            \"rejectedValue\": \"teste Os hatchs são bons carros para motoristas iniciantes, já que seu menor tamanho ajuda na hora de fazer vagas e de andar pela cidade. Também costumam ter motores menos potentes, com a grande maioria tendo versões 1.0 como padrão. A economia de combustível é outro diferencial.\",\n            \"bindingFailure\": false,\n            \"code\": \"Size\"\n        }\n    ],\n    \"path\": \"/produto\"\n}"
						}
					]
				},
				{
					"name": "Obter todos as produtos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"O tempo de resposta é inferior a 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validando se a resposta é json\", function(){\r",
									"    pm.response.to.be.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{servidor}}produto",
							"host": [
								"{{servidor}}produto"
							]
						}
					},
					"response": [
						{
							"name": "Obter todas as caracteristicas",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{servidor}}produtos",
									"host": [
										"{{servidor}}produtos"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sun, 12 Mar 2023 20:15:05 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"headers\": {},\n    \"body\": [\n        {\n            \"idProduto\": 1,\n            \"nomeProduto\": \"teste\",\n            \"dscricaoProduto\": \"teste\",\n            \"caracteristicas\": [],\n            \"imagem\": [],\n            \"categoria\": null,\n            \"cidade\": null,\n            \"links\": []\n        },\n        {\n            \"idProduto\": 2,\n            \"nomeProduto\": \"teste\",\n            \"dscricaoProduto\": \"teste\",\n            \"caracteristicas\": [],\n            \"imagem\": [],\n            \"categoria\": null,\n            \"cidade\": null,\n            \"links\": []\n        },\n        {\n            \"idProduto\": 3,\n            \"nomeProduto\": \"teste\",\n            \"dscricaoProduto\": \"teste\",\n            \"caracteristicas\": [],\n            \"imagem\": [],\n            \"categoria\": null,\n            \"cidade\": null,\n            \"links\": []\n        },\n        {\n            \"idProduto\": 4,\n            \"nomeProduto\": \"teste\",\n            \"dscricaoProduto\": \"teste\",\n            \"caracteristicas\": [],\n            \"imagem\": [],\n            \"categoria\": null,\n            \"cidade\": null,\n            \"links\": []\n        },\n        {\n            \"idProduto\": 5,\n            \"nomeProduto\": \"teste\",\n            \"dscricaoProduto\": \"teste\",\n            \"caracteristicas\": [],\n            \"imagem\": [],\n            \"categoria\": null,\n            \"cidade\": null,\n            \"links\": []\n        }\n    ],\n    \"statusCode\": \"OK\",\n    \"statusCodeValue\": 200\n}"
						}
					]
				},
				{
					"name": "Obter produto por id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// pm.test(\"Código de status 200\", function () {\r",
									"//     pm.response.to.have.status(200);\r",
									"// });\r",
									"\r",
									"// var response_body = pm.response.json();\r",
									"// pm.test(\"Validating if the answer is json\", function(){\r",
									"//     pm.response.to.be.status(200);\r",
									"//     pm.response.to.be.withBody;\r",
									"//     pm.response.to.be.json;\r",
									"// });\r",
									"\r",
									"// pm.test(\"Validando se a categoria é a mesma cadastrada\", function(){\r",
									"//     pm.expect(\"Hatchs\").to.eql(response_body.categoria)\r",
									"// })\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{servidor}}produto/:id",
							"host": [
								"{{servidor}}produto"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						}
					},
					"response": [
						{
							"name": "Obter produto por id",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{servidor}}produto/:id",
									"host": [
										"{{servidor}}produto"
									],
									"path": [
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "7"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 25 Mar 2023 18:17:16 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"idProduto\": 7,\n    \"nomeProduto\": \"Carro 1 teste\",\n    \"descricaoProduto\": \"Descrição carro 1\",\n    \"caracteristicas\": [],\n    \"imagem\": [],\n    \"categoria\": {\n        \"id\": 1,\n        \"categoria\": \"Hatchs\",\n        \"descricao\": \"Os hatchs são bons carros para motoristas iniciantes, já que seu menor tamanho ajuda na hora de fazer vagas e de andar pela cidade. Também costumam ter motores menos potentes, com a grande maioria tendo versões 1.0 como padrão.\",\n        \"urlImagem\": \"https://images.unsplash.com/photo-1536667842290-7602f6a43a2b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\",\n        \"links\": []\n    },\n    \"cidade\": {\n        \"idCidade\": 1,\n        \"nomeCidade\": \"Belo Horizonte\",\n        \"paisCidade\": \"Brasil\",\n        \"links\": []\n    },\n    \"links\": [\n        {\n            \"rel\": \"lista de produtos\",\n            \"href\": \"http://localhost:8080/produto\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Obter produto por filtro cidade e categoria",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// pm.test(\"Código de status 200\", function () {\r",
									"//     pm.response.to.have.status(200);\r",
									"// });\r",
									"\r",
									"// var response_body = pm.response.json();\r",
									"// pm.test(\"Validating if the answer is json\", function(){\r",
									"//     pm.response.to.be.status(200);\r",
									"//     pm.response.to.be.withBody;\r",
									"//     pm.response.to.be.json;\r",
									"// });\r",
									"\r",
									"// pm.test(\"Validando se a categoria é a mesma cadastrada\", function(){\r",
									"//     pm.expect(\"Hatchs\").to.eql(response_body.categoria)\r",
									"// })\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{servidor}}produto/filter?cidade=Belo Horizonte&categoria=Sedans",
							"host": [
								"{{servidor}}produto"
							],
							"path": [
								"filter"
							],
							"query": [
								{
									"key": "cidade",
									"value": "Belo Horizonte"
								},
								{
									"key": "categoria",
									"value": "Sedans"
								}
							]
						}
					},
					"response": [
						{
							"name": "Obter produto por filtro",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{servidor}}produto/filter?cidade=Belo Horizonte&categoria=Hatchs",
									"host": [
										"{{servidor}}produto"
									],
									"path": [
										"filter"
									],
									"query": [
										{
											"key": "cidade",
											"value": "Belo Horizonte"
										},
										{
											"key": "categoria",
											"value": "Hatchs"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 25 Mar 2023 19:36:47 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"idProduto\": 5,\n        \"nomeProduto\": \"Carro 3\",\n        \"descricaoProduto\": \"Descrição carro 3\",\n        \"caracteristicas\": [],\n        \"imagem\": [],\n        \"categoria\": {\n            \"id\": 1,\n            \"categoria\": \"Hatchs\",\n            \"descricao\": \"Os hatchs são bons carros para motoristas iniciantes, já que seu menor tamanho ajuda na hora de fazer vagas e de andar pela cidade. Também costumam ter motores menos potentes, com a grande maioria tendo versões 1.0 como padrão.\",\n            \"urlImagem\": \"https://images.unsplash.com/photo-1536667842290-7602f6a43a2b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\",\n            \"links\": []\n        },\n        \"cidade\": {\n            \"idCidade\": 1,\n            \"nomeCidade\": \"Belo Horizonte\",\n            \"paisCidade\": \"Brasil\",\n            \"links\": []\n        },\n        \"links\": []\n    },\n    {\n        \"idProduto\": 7,\n        \"nomeProduto\": \"Carro 1 teste\",\n        \"descricaoProduto\": \"Descrição carro 1\",\n        \"caracteristicas\": [],\n        \"imagem\": [],\n        \"categoria\": {\n            \"id\": 1,\n            \"categoria\": \"Hatchs\",\n            \"descricao\": \"Os hatchs são bons carros para motoristas iniciantes, já que seu menor tamanho ajuda na hora de fazer vagas e de andar pela cidade. Também costumam ter motores menos potentes, com a grande maioria tendo versões 1.0 como padrão.\",\n            \"urlImagem\": \"https://images.unsplash.com/photo-1536667842290-7602f6a43a2b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\",\n            \"links\": []\n        },\n        \"cidade\": {\n            \"idCidade\": 1,\n            \"nomeCidade\": \"Belo Horizonte\",\n            \"paisCidade\": \"Brasil\",\n            \"links\": []\n        },\n        \"links\": []\n    },\n    {\n        \"idProduto\": 10,\n        \"nomeProduto\": \"Carro 12 teste\",\n        \"descricaoProduto\": \"Descrição carro 1\",\n        \"caracteristicas\": [],\n        \"imagem\": [],\n        \"categoria\": {\n            \"id\": 1,\n            \"categoria\": \"Hatchs\",\n            \"descricao\": \"Os hatchs são bons carros para motoristas iniciantes, já que seu menor tamanho ajuda na hora de fazer vagas e de andar pela cidade. Também costumam ter motores menos potentes, com a grande maioria tendo versões 1.0 como padrão.\",\n            \"urlImagem\": \"https://images.unsplash.com/photo-1536667842290-7602f6a43a2b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\",\n            \"links\": []\n        },\n        \"cidade\": {\n            \"idCidade\": 2,\n            \"nomeCidade\": \"Rio de Janeiro\",\n            \"paisCidade\": \"Brasil\",\n            \"links\": []\n        },\n        \"links\": []\n    }\n]"
						}
					]
				},
				{
					"name": "Obter produto por filtro cidade e datas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Content-Type está presente\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Código de status 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    \r",
									"});\r",
									"\r",
									"tests[\"Body is correct\"] = responseBody === \"Nenhum produto encontrado para essa pesquisa\";\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{servidor}}produto/findByCidadeAndDatas?cidade=Belo Horizonte&dataInicio=2023-04-25&dataFim=2023-05-30",
							"host": [
								"{{servidor}}produto"
							],
							"path": [
								"findByCidadeAndDatas"
							],
							"query": [
								{
									"key": "cidade",
									"value": "Belo Horizonte"
								},
								{
									"key": "dataInicio",
									"value": "2023-04-25"
								},
								{
									"key": "dataFim",
									"value": "2023-05-30"
								}
							]
						}
					},
					"response": [
						{
							"name": "Obter produto por filtro",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{servidor}}produto/filter?cidade=Belo Horizonte&categoria=Hatchs",
									"host": [
										"{{servidor}}produto"
									],
									"path": [
										"filter"
									],
									"query": [
										{
											"key": "cidade",
											"value": "Belo Horizonte"
										},
										{
											"key": "categoria",
											"value": "Hatchs"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 25 Mar 2023 19:36:47 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"idProduto\": 5,\n        \"nomeProduto\": \"Carro 3\",\n        \"descricaoProduto\": \"Descrição carro 3\",\n        \"caracteristicas\": [],\n        \"imagem\": [],\n        \"categoria\": {\n            \"id\": 1,\n            \"categoria\": \"Hatchs\",\n            \"descricao\": \"Os hatchs são bons carros para motoristas iniciantes, já que seu menor tamanho ajuda na hora de fazer vagas e de andar pela cidade. Também costumam ter motores menos potentes, com a grande maioria tendo versões 1.0 como padrão.\",\n            \"urlImagem\": \"https://images.unsplash.com/photo-1536667842290-7602f6a43a2b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\",\n            \"links\": []\n        },\n        \"cidade\": {\n            \"idCidade\": 1,\n            \"nomeCidade\": \"Belo Horizonte\",\n            \"paisCidade\": \"Brasil\",\n            \"links\": []\n        },\n        \"links\": []\n    },\n    {\n        \"idProduto\": 7,\n        \"nomeProduto\": \"Carro 1 teste\",\n        \"descricaoProduto\": \"Descrição carro 1\",\n        \"caracteristicas\": [],\n        \"imagem\": [],\n        \"categoria\": {\n            \"id\": 1,\n            \"categoria\": \"Hatchs\",\n            \"descricao\": \"Os hatchs são bons carros para motoristas iniciantes, já que seu menor tamanho ajuda na hora de fazer vagas e de andar pela cidade. Também costumam ter motores menos potentes, com a grande maioria tendo versões 1.0 como padrão.\",\n            \"urlImagem\": \"https://images.unsplash.com/photo-1536667842290-7602f6a43a2b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\",\n            \"links\": []\n        },\n        \"cidade\": {\n            \"idCidade\": 1,\n            \"nomeCidade\": \"Belo Horizonte\",\n            \"paisCidade\": \"Brasil\",\n            \"links\": []\n        },\n        \"links\": []\n    },\n    {\n        \"idProduto\": 10,\n        \"nomeProduto\": \"Carro 12 teste\",\n        \"descricaoProduto\": \"Descrição carro 1\",\n        \"caracteristicas\": [],\n        \"imagem\": [],\n        \"categoria\": {\n            \"id\": 1,\n            \"categoria\": \"Hatchs\",\n            \"descricao\": \"Os hatchs são bons carros para motoristas iniciantes, já que seu menor tamanho ajuda na hora de fazer vagas e de andar pela cidade. Também costumam ter motores menos potentes, com a grande maioria tendo versões 1.0 como padrão.\",\n            \"urlImagem\": \"https://images.unsplash.com/photo-1536667842290-7602f6a43a2b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\",\n            \"links\": []\n        },\n        \"cidade\": {\n            \"idCidade\": 2,\n            \"nomeCidade\": \"Rio de Janeiro\",\n            \"paisCidade\": \"Brasil\",\n            \"links\": []\n        },\n        \"links\": []\n    }\n]"
						}
					]
				},
				{
					"name": "Obter produto por filtro cidade e datas parametros inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Content-Type está presente\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Código de status 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    \r",
									"});\r",
									"\r",
									"tests[\"Body is correct\"] = responseBody === \"Nenhum produto encontrado para essa pesquisa\";\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{servidor}}produto/findByCidadeAndDatas?cidade=Belo Horizonte&dataInicio=2023-04-25&dataFim=2023-05-30",
							"host": [
								"{{servidor}}produto"
							],
							"path": [
								"findByCidadeAndDatas"
							],
							"query": [
								{
									"key": "cidade",
									"value": "Belo Horizonte"
								},
								{
									"key": "dataInicio",
									"value": "2023-04-25"
								},
								{
									"key": "dataFim",
									"value": "2023-05-30"
								}
							]
						}
					},
					"response": [
						{
							"name": "Obter produto por filtro",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{servidor}}produto/filter?cidade=Belo Horizonte&categoria=Hatchs",
									"host": [
										"{{servidor}}produto"
									],
									"path": [
										"filter"
									],
									"query": [
										{
											"key": "cidade",
											"value": "Belo Horizonte"
										},
										{
											"key": "categoria",
											"value": "Hatchs"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 25 Mar 2023 19:36:47 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"idProduto\": 5,\n        \"nomeProduto\": \"Carro 3\",\n        \"descricaoProduto\": \"Descrição carro 3\",\n        \"caracteristicas\": [],\n        \"imagem\": [],\n        \"categoria\": {\n            \"id\": 1,\n            \"categoria\": \"Hatchs\",\n            \"descricao\": \"Os hatchs são bons carros para motoristas iniciantes, já que seu menor tamanho ajuda na hora de fazer vagas e de andar pela cidade. Também costumam ter motores menos potentes, com a grande maioria tendo versões 1.0 como padrão.\",\n            \"urlImagem\": \"https://images.unsplash.com/photo-1536667842290-7602f6a43a2b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\",\n            \"links\": []\n        },\n        \"cidade\": {\n            \"idCidade\": 1,\n            \"nomeCidade\": \"Belo Horizonte\",\n            \"paisCidade\": \"Brasil\",\n            \"links\": []\n        },\n        \"links\": []\n    },\n    {\n        \"idProduto\": 7,\n        \"nomeProduto\": \"Carro 1 teste\",\n        \"descricaoProduto\": \"Descrição carro 1\",\n        \"caracteristicas\": [],\n        \"imagem\": [],\n        \"categoria\": {\n            \"id\": 1,\n            \"categoria\": \"Hatchs\",\n            \"descricao\": \"Os hatchs são bons carros para motoristas iniciantes, já que seu menor tamanho ajuda na hora de fazer vagas e de andar pela cidade. Também costumam ter motores menos potentes, com a grande maioria tendo versões 1.0 como padrão.\",\n            \"urlImagem\": \"https://images.unsplash.com/photo-1536667842290-7602f6a43a2b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\",\n            \"links\": []\n        },\n        \"cidade\": {\n            \"idCidade\": 1,\n            \"nomeCidade\": \"Belo Horizonte\",\n            \"paisCidade\": \"Brasil\",\n            \"links\": []\n        },\n        \"links\": []\n    },\n    {\n        \"idProduto\": 10,\n        \"nomeProduto\": \"Carro 12 teste\",\n        \"descricaoProduto\": \"Descrição carro 1\",\n        \"caracteristicas\": [],\n        \"imagem\": [],\n        \"categoria\": {\n            \"id\": 1,\n            \"categoria\": \"Hatchs\",\n            \"descricao\": \"Os hatchs são bons carros para motoristas iniciantes, já que seu menor tamanho ajuda na hora de fazer vagas e de andar pela cidade. Também costumam ter motores menos potentes, com a grande maioria tendo versões 1.0 como padrão.\",\n            \"urlImagem\": \"https://images.unsplash.com/photo-1536667842290-7602f6a43a2b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\",\n            \"links\": []\n        },\n        \"cidade\": {\n            \"idCidade\": 2,\n            \"nomeCidade\": \"Rio de Janeiro\",\n            \"paisCidade\": \"Brasil\",\n            \"links\": []\n        },\n        \"links\": []\n    }\n]"
						}
					]
				},
				{
					"name": "Obter produto por filtro cidade e categoria com parametros inexistentes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// pm.test(\"Código de status 200\", function () {\r",
									"//     pm.response.to.have.status(200);\r",
									"// });\r",
									"\r",
									"// var response_body = pm.response.json();\r",
									"// pm.test(\"Validating if the answer is json\", function(){\r",
									"//     pm.response.to.be.status(200);\r",
									"//     pm.response.to.be.withBody;\r",
									"//     pm.response.to.be.json;\r",
									"// });\r",
									"\r",
									"// pm.test(\"Validando se a categoria é a mesma cadastrada\", function(){\r",
									"//     pm.expect(\"Hatchs\").to.eql(response_body.categoria)\r",
									"// })\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{servidor}}produto/filter?cidade=Contagem&categoria=Premiun",
							"host": [
								"{{servidor}}produto"
							],
							"path": [
								"filter"
							],
							"query": [
								{
									"key": "cidade",
									"value": "Contagem"
								},
								{
									"key": "categoria",
									"value": "Premiun"
								}
							]
						}
					},
					"response": [
						{
							"name": "Obter produto por filtro",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{servidor}}produto/filter?cidade=Belo Horizonte&categoria=Hatchs",
									"host": [
										"{{servidor}}produto"
									],
									"path": [
										"filter"
									],
									"query": [
										{
											"key": "cidade",
											"value": "Belo Horizonte"
										},
										{
											"key": "categoria",
											"value": "Hatchs"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 25 Mar 2023 19:36:47 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"idProduto\": 5,\n        \"nomeProduto\": \"Carro 3\",\n        \"descricaoProduto\": \"Descrição carro 3\",\n        \"caracteristicas\": [],\n        \"imagem\": [],\n        \"categoria\": {\n            \"id\": 1,\n            \"categoria\": \"Hatchs\",\n            \"descricao\": \"Os hatchs são bons carros para motoristas iniciantes, já que seu menor tamanho ajuda na hora de fazer vagas e de andar pela cidade. Também costumam ter motores menos potentes, com a grande maioria tendo versões 1.0 como padrão.\",\n            \"urlImagem\": \"https://images.unsplash.com/photo-1536667842290-7602f6a43a2b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\",\n            \"links\": []\n        },\n        \"cidade\": {\n            \"idCidade\": 1,\n            \"nomeCidade\": \"Belo Horizonte\",\n            \"paisCidade\": \"Brasil\",\n            \"links\": []\n        },\n        \"links\": []\n    },\n    {\n        \"idProduto\": 7,\n        \"nomeProduto\": \"Carro 1 teste\",\n        \"descricaoProduto\": \"Descrição carro 1\",\n        \"caracteristicas\": [],\n        \"imagem\": [],\n        \"categoria\": {\n            \"id\": 1,\n            \"categoria\": \"Hatchs\",\n            \"descricao\": \"Os hatchs são bons carros para motoristas iniciantes, já que seu menor tamanho ajuda na hora de fazer vagas e de andar pela cidade. Também costumam ter motores menos potentes, com a grande maioria tendo versões 1.0 como padrão.\",\n            \"urlImagem\": \"https://images.unsplash.com/photo-1536667842290-7602f6a43a2b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\",\n            \"links\": []\n        },\n        \"cidade\": {\n            \"idCidade\": 1,\n            \"nomeCidade\": \"Belo Horizonte\",\n            \"paisCidade\": \"Brasil\",\n            \"links\": []\n        },\n        \"links\": []\n    },\n    {\n        \"idProduto\": 10,\n        \"nomeProduto\": \"Carro 12 teste\",\n        \"descricaoProduto\": \"Descrição carro 1\",\n        \"caracteristicas\": [],\n        \"imagem\": [],\n        \"categoria\": {\n            \"id\": 1,\n            \"categoria\": \"Hatchs\",\n            \"descricao\": \"Os hatchs são bons carros para motoristas iniciantes, já que seu menor tamanho ajuda na hora de fazer vagas e de andar pela cidade. Também costumam ter motores menos potentes, com a grande maioria tendo versões 1.0 como padrão.\",\n            \"urlImagem\": \"https://images.unsplash.com/photo-1536667842290-7602f6a43a2b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\",\n            \"links\": []\n        },\n        \"cidade\": {\n            \"idCidade\": 2,\n            \"nomeCidade\": \"Rio de Janeiro\",\n            \"paisCidade\": \"Brasil\",\n            \"links\": []\n        },\n        \"links\": []\n    }\n]"
						}
					]
				},
				{
					"name": "Obter produto com id inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status Not Found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.be.notFound;\r",
									"});\r",
									"\r",
									"tests[\"Body is correct\"] = responseBody === \"Produto não encontrado\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{servidor}}produto/:id",
							"host": [
								"{{servidor}}produto"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "10"
								}
							]
						}
					},
					"response": [
						{
							"name": "Obter produto com id inexistente",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{servidor}}produto/:id",
									"host": [
										"{{servidor}}produto"
									],
									"path": [
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "10"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "text/plain;charset=UTF-8"
								},
								{
									"key": "Content-Length",
									"value": "23"
								},
								{
									"key": "Date",
									"value": "Sat, 25 Mar 2023 18:18:27 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Produto não encontrado"
						}
					]
				},
				{
					"name": "Editar produto",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful Patch request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type está presente\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"var response_body = pm.response.json();\r",
									"pm.test(\"Validando se o produto é o mesmo editado\", function(){\r",
									"    pm.expect(\"Carro editado 1\").to.eql(response_body.nomeProduto)\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n    \"idProduto\": 1,\n    \"nomeProduto\": \"Carro editado 1\",\n    \"descricaoProduto\": \"Descrição carro 1\",\n    \"categoria\": {\n        \"id\": 1\n    },\n    \"cidade\": {\n        \"idCidade\": 1\n    }\n}"
						},
						"url": {
							"raw": "{{servidor}}produto",
							"host": [
								"{{servidor}}produto"
							]
						}
					},
					"response": [
						{
							"name": "Editar produtos",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{   \n    \"idProduto\": 1,\n    \"nomeProduto\": \"Teste editar carro 1\",\n    \"descricaoProduto\": \"Teste editar descrição carro\",\n    \"categoria\": {\n        \"id\": 2\n    },\n    \"cidade\": {\n        \"idCidade\": 2\n    }\n}"
								},
								"url": {
									"raw": "{{servidor}}produto",
									"host": [
										"{{servidor}}produto"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/hal+json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 25 Mar 2023 18:22:37 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"idProduto\": 1,\n    \"nomeProduto\": \"Teste editar carro 1\",\n    \"descricaoProduto\": \"Teste editar descrição carro\",\n    \"caracteristicas\": null,\n    \"imagem\": null,\n    \"categoria\": {\n        \"id\": 2,\n        \"categoria\": \"Sedans\",\n        \"descricao\": \"São úteis para famílias que precisam de mais espaço nos bancos de trás para as crianças, pessoas que viajam regularmente e para quem quer mais conforto sem precisar investir muito.\",\n        \"urlImagem\": \"https://images.unsplash.com/photo-1494976388531-d1058494cdd8?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\"\n    },\n    \"cidade\": {\n        \"idCidade\": 2,\n        \"nomeCidade\": \"Rio de Janeiro\",\n        \"paisCidade\": \"Brasil\"\n    }\n}"
						}
					]
				},
				{
					"name": "Editar produto com id inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status Not found\", function () {\r",
									"    pm.response.to.be.notFound;   \r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type é presente\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"tests[\"Body is correct\"] = responseBody === \"Produto não encontrado\";\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n    \"idProduto\": 10,\n    \"nomeProduto\": \"Teste editar carro 1\",\n    \"descricaoProduto\": \"Teste editar descrição carro\",\n    \"categoria\": {\n        \"id\": 2\n    },\n    \"cidade\": {\n        \"idCidade\": 2\n    }\n}"
						},
						"url": {
							"raw": "{{servidor}}produto",
							"host": [
								"{{servidor}}produto"
							]
						}
					},
					"response": [
						{
							"name": "Editar produto com id inexistente",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{   \n    \"idProduto\": 10,\n    \"nomeProduto\": \"Teste editar carro 1\",\n    \"descricaoProduto\": \"Teste editar descrição carro\",\n    \"categoria\": {\n        \"id\": 2\n    },\n    \"cidade\": {\n        \"idCidade\": 2\n    }\n}"
								},
								"url": {
									"raw": "{{servidor}}produto",
									"host": [
										"{{servidor}}produto"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "text/plain;charset=UTF-8"
								},
								{
									"key": "Content-Length",
									"value": "23"
								},
								{
									"key": "Date",
									"value": "Sat, 25 Mar 2023 18:27:05 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Produto não encontrado"
						}
					]
				},
				{
					"name": "Editar produto para uma já existente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content-Type está presente\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Código de status 409\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"    \r",
									"});\r",
									"\r",
									"tests[\"Body is correct\"] = responseBody === \"Produto já cadastrado\";\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n    \"idProduto\": 4,\n    \"nomeProduto\": \"Carro editado 1\",\n    \"descricaoProduto\": \"Teste editar descrição carro\",\n    \"categoria\": {\n        \"id\": 2\n    },\n    \"cidade\": {\n        \"idCidade\": 2\n    }\n}"
						},
						"url": {
							"raw": "{{servidor}}produto",
							"host": [
								"{{servidor}}produto"
							]
						}
					},
					"response": [
						{
							"name": "Editar produto para uma já existente",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{   \n    \"idProduto\": 4,\n    \"nomeProduto\": \"Teste editar carro 1\",\n    \"descricaoProduto\": \"Teste editar descrição carro\",\n    \"categoria\": {\n        \"id\": 2\n    },\n    \"cidade\": {\n        \"idCidade\": 2\n    }\n}"
								},
								"url": {
									"raw": "{{servidor}}produto",
									"host": [
										"{{servidor}}produto"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "text/plain;charset=UTF-8"
								},
								{
									"key": "Content-Length",
									"value": "22"
								},
								{
									"key": "Date",
									"value": "Sat, 25 Mar 2023 18:25:46 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Produto já cadastrado"
						}
					]
				},
				{
					"name": "Editar produto para uma já existente Case Sensitive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status conflict\", function () {\r",
									"    pm.response.to.be.clientError;   \r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type está presente\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"tests[\"Body is correct\"] = responseBody === \"Produto já cadastrado\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n    \"idProduto\": 5,\n    \"nomeProduto\": \"teste editar carro 1\",\n    \"descricaoProduto\": \"teste editar descrição carro 1\",\n    \"categoria\": {\n        \"id\": 1\n    },\n    \"cidade\": {\n        \"idCidade\": 2\n    }\n}"
						},
						"url": {
							"raw": "{{servidor}}produto",
							"host": [
								"{{servidor}}produto"
							]
						}
					},
					"response": [
						{
							"name": "Editar produto para uma já existente Case Sensitive",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{   \n    \"idProduto\": 5,\n    \"nomeProduto\": \"teste editar carro 1\",\n    \"descricaoProduto\": \"teste editar descrição carro 1\",\n    \"categoria\": {\n        \"id\": 1\n    },\n    \"cidade\": {\n        \"idCidade\": 2\n    }\n}"
								},
								"url": {
									"raw": "{{servidor}}produto",
									"host": [
										"{{servidor}}produto"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "text/plain;charset=UTF-8"
								},
								{
									"key": "Content-Length",
									"value": "22"
								},
								{
									"key": "Date",
									"value": "Sat, 25 Mar 2023 18:28:17 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Produto já cadastrado"
						}
					]
				},
				{
					"name": "Editar produto com caracteres  acima de 255",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status Bad Request\", function () {\r",
									"    pm.response.to.be.badRequest;\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type está presente\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"tests[\"Body is correct\"] = responseBody === \"Excedido numero maximo de caracteres\";\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n    \"idProduto\": 1,\n    \"nomeProduto\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea comodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\",\n    \"descricaoProduto\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea comodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\",\n    \"categoria\": {\n        \"id\": 2\n    },\n    \"cidade\": {\n        \"idCidade\": 2\n    }\n}"
						},
						"url": {
							"raw": "{{servidor}}produto",
							"host": [
								"{{servidor}}produto"
							]
						}
					},
					"response": [
						{
							"name": "Editar produto com caracteres  acima de 255",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{   \n    \"idProduto\": 1,\n    \"nomeProduto\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea comodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\",\n    \"descricaoProduto\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea comodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\",\n    \"categoria\": {\n        \"id\": 2\n    },\n    \"cidade\": {\n        \"idCidade\": 2\n    }\n}"
								},
								"url": {
									"raw": "{{servidor}}produto",
									"host": [
										"{{servidor}}produto"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 25 Mar 2023 18:30:36 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2023-03-25T18:30:36.184+00:00\",\n    \"status\": 400,\n    \"error\": \"Bad Request\",\n    \"trace\": \"org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public org.springframework.http.ResponseEntity com.DH.PI.controller.ProdutoController.change(com.DH.PI.model.ProdutoModel) with 2 errors: [Field error in object 'produtoModel' on field 'descricaoProduto': rejected value [Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea comodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.]; codes [Size.produtoModel.descricaoProduto,Size.descricaoProduto,Size.java.lang.String,Size]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [produtoModel.descricaoProduto,descricaoProduto]; arguments []; default message [descricaoProduto],254,0]; default message [Excedido número máximo de caracteres]] [Field error in object 'produtoModel' on field 'nomeProduto': rejected value [Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea comodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.]; codes [Size.produtoModel.nomeProduto,Size.nomeProduto,Size.java.lang.String,Size]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [produtoModel.nomeProduto,nomeProduto]; arguments []; default message [nomeProduto],254,0]; default message [Excedido número máximo de caracteres]] \\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.resolveArgument(RequestResponseBodyMethodProcessor.java:144)\\r\\n\\tat org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:122)\\r\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:181)\\r\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:148)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:884)\\r\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)\\r\\n\\tat org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\\r\\n\\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1080)\\r\\n\\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:973)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1011)\\r\\n\\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:888)\\r\\n\\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:814)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:223)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\\r\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:185)\\r\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:158)\\r\\n\\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:177)\\r\\n\\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)\\r\\n\\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)\\r\\n\\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:119)\\r\\n\\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\\r\\n\\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)\\r\\n\\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)\\r\\n\\tat org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:400)\\r\\n\\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)\\r\\n\\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:859)\\r\\n\\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1734)\\r\\n\\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)\\r\\n\\tat org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)\\r\\n\\tat org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)\\r\\n\\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\\r\\n\\tat java.base/java.lang.Thread.run(Thread.java:833)\\r\\n\",\n    \"message\": \"Validation failed for object='produtoModel'. Error count: 2\",\n    \"errors\": [\n        {\n            \"codes\": [\n                \"Size.produtoModel.descricaoProduto\",\n                \"Size.descricaoProduto\",\n                \"Size.java.lang.String\",\n                \"Size\"\n            ],\n            \"arguments\": [\n                {\n                    \"codes\": [\n                        \"produtoModel.descricaoProduto\",\n                        \"descricaoProduto\"\n                    ],\n                    \"arguments\": null,\n                    \"defaultMessage\": \"descricaoProduto\",\n                    \"code\": \"descricaoProduto\"\n                },\n                254,\n                0\n            ],\n            \"defaultMessage\": \"Excedido número máximo de caracteres\",\n            \"objectName\": \"produtoModel\",\n            \"field\": \"descricaoProduto\",\n            \"rejectedValue\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea comodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\",\n            \"bindingFailure\": false,\n            \"code\": \"Size\"\n        },\n        {\n            \"codes\": [\n                \"Size.produtoModel.nomeProduto\",\n                \"Size.nomeProduto\",\n                \"Size.java.lang.String\",\n                \"Size\"\n            ],\n            \"arguments\": [\n                {\n                    \"codes\": [\n                        \"produtoModel.nomeProduto\",\n                        \"nomeProduto\"\n                    ],\n                    \"arguments\": null,\n                    \"defaultMessage\": \"nomeProduto\",\n                    \"code\": \"nomeProduto\"\n                },\n                254,\n                0\n            ],\n            \"defaultMessage\": \"Excedido número máximo de caracteres\",\n            \"objectName\": \"produtoModel\",\n            \"field\": \"nomeProduto\",\n            \"rejectedValue\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea comodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\",\n            \"bindingFailure\": false,\n            \"code\": \"Size\"\n        }\n    ],\n    \"path\": \"/produto\"\n}"
						}
					]
				},
				{
					"name": "Apagar produto",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// pathVariableId = pm.variables.get(\"$endpointDeletarId\");\r",
									"// tests[\"Body is correct\"] = responseBody === \"Excluido produto de ID: pathVariableId\";\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{servidor}}produto/:id",
							"host": [
								"{{servidor}}produto"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "2"
								}
							]
						}
					},
					"response": [
						{
							"name": "Apagar produto",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{servidor}}produto/:id",
									"host": [
										"{{servidor}}produto"
									],
									"path": [
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "6"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "text/plain;charset=UTF-8"
								},
								{
									"key": "Content-Length",
									"value": "25"
								},
								{
									"key": "Date",
									"value": "Sat, 25 Mar 2023 18:32:11 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Excluido produto de ID: 6"
						}
					]
				},
				{
					"name": "Apagar produto com ID inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status Not Found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.be.notFound;\r",
									"});\r",
									"\r",
									"tests[\"Body is correct\"] = responseBody === \"Produto não encontrado\";\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{servidor}}produto/:id",
							"host": [
								"{{servidor}}produto"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "15"
								}
							]
						}
					},
					"response": [
						{
							"name": "Apagar produto com ID inexistente",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{servidor}}produto/:id",
									"host": [
										"{{servidor}}produto"
									],
									"path": [
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "10"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "text/plain;charset=UTF-8"
								},
								{
									"key": "Content-Length",
									"value": "23"
								},
								{
									"key": "Date",
									"value": "Sat, 25 Mar 2023 18:33:33 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Produto não encontrado"
						}
					]
				}
			]
		},
		{
			"name": "/reserva",
			"item": [
				{
					"name": "Obter todas as reservas quando não existe nada salvo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.be.notFound;\r",
									"});\r",
									"\r",
									"pm.test(\"O tempo de resposta é inferior a 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validando há resposta\", function(){\r",
									"    pm.response.to.be.status(404);\r",
									"    pm.response.to.be.withBody; \r",
									"});\r",
									"\r",
									"tests[\"Body is correct\"] = responseBody === \"Nenhuma reserva encontrada\";\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{servidor}}reserva",
							"host": [
								"{{servidor}}reserva"
							]
						}
					},
					"response": []
				},
				{
					"name": "Salvar reserva 1 - 25/04-30/05",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Solicitação POST bem-sucedida\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Location no header está presente\", function () {\r",
									"    pm.response.to.have.header(\"Location\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"horarioInicioReserva\":\"08:00:00\",\r\n    \"dataInicioReserva\":\"2023-04-25\",\r\n    \"dataFinalReserva\":\"2023-05-30\",\r\n    \"produto\":{\r\n        \"idProduto\":1\r\n    },\r\n    \"usuario\":{\r\n        \"id\": 1\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{servidor}}reserva",
							"host": [
								"{{servidor}}reserva"
							]
						}
					},
					"response": []
				},
				{
					"name": "Salvar reserva 2 - 10/10 - 20/10",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Solicitação POST bem-sucedida\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Location no header está presente\", function () {\r",
									"    pm.response.to.have.header(\"Location\");\r",
									"});\r",
									"\r",
									"// pm.test(\"Código de status 200\", function () {\r",
									"//     pm.response.to.have.status(201);\r",
									"// });\r",
									"\r",
									"// pm.test(\"Solicitação POST bem-sucedida\", function () {\r",
									"//     pm.expect(pm.response.code).to.be.oneOf([201]);\r",
									"// });\r",
									"\r",
									"// var response_body = pm.response.json();\r",
									"// pm.test(\"Validando se a resposta é json\", function(){\r",
									"//     pm.response.to.be.status(201);\r",
									"//     pm.response.to.be.withBody;\r",
									"//     pm.response.to.be.json;\r",
									"// });\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"horarioInicioReserva\":\"08:00:00\",\r\n    \"dataInicioReserva\":\"2023-10-10\",\r\n    \"dataFinalReserva\":\"2023-10-20\",\r\n    \"produto\":{\r\n        \"idProduto\":2\r\n    },\r\n    \"usuario\":{\r\n        \"id\": 1\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{servidor}}reserva",
							"host": [
								"{{servidor}}reserva"
							]
						}
					},
					"response": []
				},
				{
					"name": "Salvar reserva 3 - 24/06 - 25/07",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Solicitação POST bem-sucedida\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Location no header está presente\", function () {\r",
									"    pm.response.to.have.header(\"Location\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"horarioInicioReserva\":\"08:00:00\",\r\n    \"dataInicioReserva\":\"2023-06-24\",\r\n    \"dataFinalReserva\":\"2023-07-25\",\r\n    \"produto\":{\r\n        \"idProduto\":2\r\n    },\r\n    \"usuario\":{\r\n        \"id\": 2\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{servidor}}reserva",
							"host": [
								"{{servidor}}reserva"
							]
						}
					},
					"response": []
				},
				{
					"name": "Salvar reserva com data final ja reservada por outro user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status 409\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"    pm.response.to.be.clientError\r",
									"});\r",
									"\r",
									"\r",
									"tests[\"Body is correct\"] = responseBody === \"Este produto indisponivel para essa data\";\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"horarioInicioReserva\":\"08:00:00\",\r\n    \"dataInicioReserva\":\"2023-04-20\",\r\n    \"dataFinalReserva\":\"2023-05-03\",\r\n    \"produto\":{\r\n        \"idProduto\":1\r\n    },\r\n    \"usuario\":{\r\n        \"id\": 2\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{servidor}}reserva",
							"host": [
								"{{servidor}}reserva"
							]
						}
					},
					"response": []
				},
				{
					"name": "Salvar reserva com data inicial ja reservada por outro user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status 200\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Solicitação POST bem-sucedida\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
									"});\r",
									"\r",
									"var response_body = pm.response.json();\r",
									"pm.test(\"Validando se a resposta é json\", function(){\r",
									"    pm.response.to.be.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"horarioInicioReserva\":\"08:00:00\",\r\n    \"dataInicioReserva\":\"2023-04-26\",\r\n    \"dataFinalReserva\":\"2023-05-31\",\r\n    \"produto\":{\r\n        \"idProduto\":1\r\n    },\r\n    \"usuario\":{\r\n        \"id\": 1\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{servidor}}reserva",
							"host": [
								"{{servidor}}reserva"
							]
						}
					},
					"response": []
				},
				{
					"name": "Salvar reserva com data retroativa",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status 200\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Solicitação POST bem-sucedida\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
									"});\r",
									"\r",
									"var response_body = pm.response.json();\r",
									"pm.test(\"Validando se a resposta é json\", function(){\r",
									"    pm.response.to.be.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"horarioInicioReserva\":\"08:00:00\",\r\n    \"dataInicioReserva\":\"2023-03-25\",\r\n    \"dataFinalReserva\":\"2023-04-10\",\r\n    \"produto\":{\r\n        \"idProduto\":1\r\n    },\r\n    \"usuario\":{\r\n        \"id\": 2\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{servidor}}reserva",
							"host": [
								"{{servidor}}reserva"
							]
						}
					},
					"response": []
				},
				{
					"name": "Salvar reserva com campos em branco",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.be.badRequest\r",
									"});\r",
									"\r",
									"tests[\"Body is correct\"] = responseBody === \"Obrigatório uma descrição válida.\";\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"horarioInicioReserva\":\"08:00:00\",\r\n    \"dataInicioReserva\":\"\",\r\n    \"dataFinalReserva\":\" \",\r\n    \"produto\":{\r\n        \"idProduto\":1\r\n    },\r\n    \"usuario\":{\r\n        \"id\": 2\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{servidor}}reserva",
							"host": [
								"{{servidor}}reserva"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obter todos as reservas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"O tempo de resposta é inferior a 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validando se a resposta é json\", function(){\r",
									"    pm.response.to.be.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{servidor}}reserva",
							"host": [
								"{{servidor}}reserva"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obter reserva por id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// pm.test(\"Código de status 200\", function () {\r",
									"//     pm.response.to.have.status(200);\r",
									"// });\r",
									"\r",
									"// var response_body = pm.response.json();\r",
									"// pm.test(\"Validating if the answer is json\", function(){\r",
									"//     pm.response.to.be.status(200);\r",
									"//     pm.response.to.be.withBody;\r",
									"//     pm.response.to.be.json;\r",
									"// });\r",
									"\r",
									"// pm.test(\"Validando se a categoria é a mesma cadastrada\", function(){\r",
									"//     pm.expect(\"Hatchs\").to.eql(response_body.categoria)\r",
									"// })\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{servidor}}reserva/:id",
							"host": [
								"{{servidor}}reserva"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Obter reserva por id Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// pm.test(\"Código de status 200\", function () {\r",
									"//     pm.response.to.have.status(200);\r",
									"// });\r",
									"\r",
									"// var response_body = pm.response.json();\r",
									"// pm.test(\"Validating if the answer is json\", function(){\r",
									"//     pm.response.to.be.status(200);\r",
									"//     pm.response.to.be.withBody;\r",
									"//     pm.response.to.be.json;\r",
									"// });\r",
									"\r",
									"// pm.test(\"Validando se a categoria é a mesma cadastrada\", function(){\r",
									"//     pm.expect(\"Hatchs\").to.eql(response_body.categoria)\r",
									"// })\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{servidor}}reserva/findusuario?id=1",
							"host": [
								"{{servidor}}reserva"
							],
							"path": [
								"findusuario"
							],
							"query": [
								{
									"key": "id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Obter reserva por filtro",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// pm.test(\"Código de status 200\", function () {\r",
									"//     pm.response.to.have.status(200);\r",
									"// });\r",
									"\r",
									"// var response_body = pm.response.json();\r",
									"// pm.test(\"Validating if the answer is json\", function(){\r",
									"//     pm.response.to.be.status(200);\r",
									"//     pm.response.to.be.withBody;\r",
									"//     pm.response.to.be.json;\r",
									"// });\r",
									"\r",
									"// pm.test(\"Validando se a categoria é a mesma cadastrada\", function(){\r",
									"//     pm.expect(\"Hatchs\").to.eql(response_body.categoria)\r",
									"// })\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{servidor}}reserva/filter?atributos=&filtro=",
							"host": [
								"{{servidor}}reserva"
							],
							"path": [
								"filter"
							],
							"query": [
								{
									"key": "atributos",
									"value": ""
								},
								{
									"key": "filtro",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Obter reserva com id inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status Not Found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.be.notFound;\r",
									"});\r",
									"\r",
									"tests[\"Body is correct\"] = responseBody === \"Produto não encontrado\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{servidor}}reserva/:id",
							"host": [
								"{{servidor}}reserva"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar data reserva - 22/04 - 09/05 - user 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful Patch request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type está presente\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"idReserva\":1,\n    \"horarioInicioReserva\":\"08:30:00\",\n    \"dataInicioReserva\":\"2023-04-22\",\n    \"dataFinalReserva\":\"2023-05-09\",\n    \"produto\":{\n        \"idProduto\":1\n    },\n    \"usuario\":{\n        \"id\": 1\n    }\n}"
						},
						"url": {
							"raw": "{{servidor}}reserva",
							"host": [
								"{{servidor}}reserva"
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar data inicial da reserva para uma existente entre datas - 12/10 - 15/10 - user 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful Patch request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type está presente\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n    \"idReserva\": 1,\n    \"horaInicio\": \"10:20:00\",\n    \"dataInicio\": \"12/10/2023\",\n    \"dataFinal\": \"15/10/2023\",\n    \"produto\": {\n        \"idProduto\": 2\n    },\n    \"usuario\": {\n        \"idUsuario\": 1\n    }\n}"
						},
						"url": {
							"raw": "{{servidor}}reserva",
							"host": [
								"{{servidor}}reserva"
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar data final da reserva para uma existente entre datas - 20/06 - 15/07 - user 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful Patch request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type está presente\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n    \"idReserva\": 2,\n    \"horaInicio\": \"08:00:00\",\n    \"dataInicio\": \"20/06/2023\",\n    \"dataFinal\": \"15/07/2023\",\n    \"produto\": {\n        \"idProduto\": 3\n    },\n    \"usuario\": {\n        \"idUsuario\": 2\n    }\n}"
						},
						"url": {
							"raw": "{{servidor}}reserva",
							"host": [
								"{{servidor}}reserva"
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar reserva para uma data anterior a atual",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful Patch request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type está presente\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n    \"idReserva\": 1,\n    \"horaInicio\": \"08:20:00\",\n    \"dataInicio\": \"25/03/2023\",\n    \"dataFinal\": \"30/04/2023\",\n    \"produto\": {\n        \"idProduto\": 1\n    },\n    \"usuario\": {\n        \"idUsuario\": 1\n    }\n}"
						},
						"url": {
							"raw": "{{servidor}}reserva",
							"host": [
								"{{servidor}}reserva"
							]
						}
					},
					"response": []
				},
				{
					"name": "Apagar reserva",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// pathVariableId = pm.variables.get(\"$endpointDeletarId\");\r",
									"// tests[\"Body is correct\"] = responseBody === \"Excluido produto de ID: pathVariableId\";\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{servidor}}reserva/:id",
							"host": [
								"{{servidor}}reserva"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Apagar reserva com ID inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Código de status Not Found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.be.notFound;\r",
									"});\r",
									"\r",
									"tests[\"Body is correct\"] = responseBody === \"Produto não encontrado\";\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAdmin}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenUser}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{servidor}}reserva/:id",
							"host": [
								"{{servidor}}reserva"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "10"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "/sending-email",
			"item": [
				{
					"name": "Enviar email confirmação reserva",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{servidor}}sending-email",
							"host": [
								"{{servidor}}sending-email"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}